diff --git a/regression_tests/Makefile b/regression_tests/Makefile
index 10326d39d..1ddec0aad 100644
--- a/regression_tests/Makefile
+++ b/regression_tests/Makefile
@@ -80,7 +80,9 @@ STANDARD_CFG = \
 	default/multicontinuum/multicontinuum.cfg \
 	default/numerical/numerical.cfg \
 	default/output/compare/compare.cfg \
+	default/output/face_output/face_output.cfg \
 	default/output/output.cfg \
+	default/output/sensitivities/sensitivities.cfg \
 	default/restart/restart.cfg \
 	default/restart/skip/skip.cfg \
 	default/reaction_sandbox/reaction_sandbox.cfg \
@@ -351,3 +353,25 @@ clean-tests :
 	-rm -f geophys/ert/*.h5
 	-rm -f geophys/ert/*.dat
 	-rm -f geophys/ert/*-ert-*
+	-rm -f default/output/output_biosphere-0.bio
+	-rm -f default/output/output_WIPP_pnl-0.pnl
+	-rm -f default/output/output_waste_form_wf-0.wf
+	-rm -f default/output/output_vtk-000.vtk
+	-rm -f default/output/output_vtk-np3-000.vtk
+	-rm -f default/output/output_xdmf_explicit-000.xmf
+	-rm -f default/output/output_xdmf_explicit_primal-000.xmf
+	-rm -f default/output/sensitivities/*.h5
+	-rm -f default/output/sensitivities/*.csv
+	-rm -f default/output/sensitivities/*.xml
+	-rm -f default/materials/full_tensor/*.h5
+	-rm -f default/materials/full_tensor/*.xml
+	-rm -f default/materials/full_tensor/*.dat
+	-rm -f default/materials/full_tensor/*.pft
+	-rm -f ufd/glass-0.wf
+	-rm -f ufd/fmdm_dummy-0.wf
+	-rm -f ufd/wf_doubles-0.wf
+	-rm -f ufd/wf_region-wf_mass-*.dat
+	-rm -f ufd/glass-*.vtk
+	-rm -f ufd/wf_doubles-*.vtk
+	-rm -f ufd/wf_region-*.vtk
+	-rm -f ufd/glass_full_geochem_np4-*.vtk
diff --git a/regression_tests/default/output/face_output/BC1.ex b/regression_tests/default/output/face_output/BC1.ex
new file mode 100644
index 000000000..1b56e1bcb
--- /dev/null
+++ b/regression_tests/default/output/face_output/BC1.ex
@@ -0,0 +1,4 @@
+CONNECTIONS 3
+31 101.10272574419852 50.30358502282871 10.0 4134.725197329216
+25 138.0245668220075 17.018008124676985 10.0 4122.912838946573
+26 59.34831130176987 7.201333624226523 30.0 1198.3934037252916
diff --git a/regression_tests/default/output/face_output/BC1.ss b/regression_tests/default/output/face_output/BC1.ss
new file mode 100644
index 000000000..7b93b6cd1
--- /dev/null
+++ b/regression_tests/default/output/face_output/BC1.ss
@@ -0,0 +1,4 @@
+3
+Q 5 30 32 6 
+Q 7 6 32 34 
+Q 34 32 33 35 
diff --git a/regression_tests/default/output/face_output/BC2.ex b/regression_tests/default/output/face_output/BC2.ex
new file mode 100644
index 000000000..a6b8bdc59
--- /dev/null
+++ b/regression_tests/default/output/face_output/BC2.ex
@@ -0,0 +1,5 @@
+CONNECTIONS 4
+13 -104.52077206051635 -51.9675874522264 10.0 3668.2004635890194
+14 -53.839513510074596 -24.991944311661722 30.0 1119.0669297927143
+1 -141.78018083451482 -19.56138521441453 10.0 3749.8976374558592
+2 -71.2272376046072 -9.869049934016186 30.0 1099.9069790814606
diff --git a/regression_tests/default/output/face_output/BC2.ss b/regression_tests/default/output/face_output/BC2.ss
new file mode 100644
index 000000000..2390aac7e
--- /dev/null
+++ b/regression_tests/default/output/face_output/BC2.ss
@@ -0,0 +1,5 @@
+4
+Q 12 11 42 44 
+Q 44 42 43 45 
+Q 1 12 44 24 
+Q 24 44 45 25 
diff --git a/regression_tests/default/output/face_output/check_struct-np4.py b/regression_tests/default/output/face_output/check_struct-np4.py
new file mode 100644
index 000000000..539f5dbdb
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_struct-np4.py
@@ -0,0 +1,4 @@
+from check_ugi import check_connections_ids_and_area
+
+if __name__ == "__main__":
+  check_connections_ids_and_area("face_area_struct-np4.h5", struct=True)
diff --git a/regression_tests/default/output/face_output/check_struct.py b/regression_tests/default/output/face_output/check_struct.py
new file mode 100644
index 000000000..df239672d
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_struct.py
@@ -0,0 +1,4 @@
+from check_ugi import check_connections_ids_and_area
+
+if __name__ == "__main__":
+  check_connections_ids_and_area("face_area_struct.h5", struct=True)
diff --git a/regression_tests/default/output/face_output/check_struct.txt.gold b/regression_tests/default/output/face_output/check_struct.txt.gold
new file mode 100644
index 000000000..32008fa53
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_struct.txt.gold
@@ -0,0 +1,26 @@
+3
+3
+17
+-2 10 3.333333e+01
+-2 11 3.333333e+01
+-2 12 3.333333e+01
+-1 1 3.333333e+01
+-1 2 3.333333e+01
+-1 3 3.333333e+01
+1 2 2.500000e+01
+1 4 3.333333e+01
+2 3 2.500000e+01
+2 5 3.333333e+01
+3 6 3.333333e+01
+4 5 2.500000e+01
+4 7 3.333333e+01
+5 6 2.500000e+01
+5 8 3.333333e+01
+6 9 3.333333e+01
+7 8 2.500000e+01
+7 10 3.333333e+01
+8 9 2.500000e+01
+8 11 3.333333e+01
+9 12 3.333333e+01
+10 11 2.500000e+01
+11 12 2.500000e+01
diff --git a/regression_tests/default/output/face_output/check_uge-np4.py b/regression_tests/default/output/face_output/check_uge-np4.py
new file mode 100644
index 000000000..21ccecb68
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_uge-np4.py
@@ -0,0 +1,4 @@
+from check_ugi import check_connections_ids_and_area
+
+if __name__ == "__main__":
+  check_connections_ids_and_area("face_area_uge-np4.h5", struct=False, ugi=False)
diff --git a/regression_tests/default/output/face_output/check_uge.py b/regression_tests/default/output/face_output/check_uge.py
new file mode 100644
index 000000000..72195ce29
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_uge.py
@@ -0,0 +1,4 @@
+from check_ugi import check_connections_ids_and_area
+
+if __name__ == "__main__":
+  check_connections_ids_and_area("face_area_uge.h5", struct=False, ugi=False)
diff --git a/regression_tests/default/output/face_output/check_ugi-np4.py b/regression_tests/default/output/face_output/check_ugi-np4.py
new file mode 100644
index 000000000..77468ac2f
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_ugi-np4.py
@@ -0,0 +1,4 @@
+from check_ugi import check_connections_ids_and_area
+
+if __name__ == "__main__":
+  check_connections_ids_and_area("face_area_ugi-np4.h5", struct=False, ugi=True)
diff --git a/regression_tests/default/output/face_output/check_ugi.py b/regression_tests/default/output/face_output/check_ugi.py
new file mode 100644
index 000000000..8c8b62545
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_ugi.py
@@ -0,0 +1,60 @@
+#
+# Create a ASCII file of the following structure given the ouput of a PFLOTRAN
+# simulation with ugi mesh:
+#
+# the number of BC1 connections
+# the number of BC2 connections
+#Â the number of internal connections
+# list of the TRUE face area (id1 id2 area)
+#
+# TRUE face area is the product of projected face area and Orthogonality error
+
+import h5py
+import numpy as np
+
+def check_connections_ids_and_area(f_in, struct=True, ugi=False):
+  #open pflotran output
+  f = h5py.File(f_in,'r')
+  if struct:
+    areas = np.array(f["Time:  5.00000E+01 y/Face_Area [m^2]"])
+    connections = np.array(f["Connection Ids"])
+  elif ugi:
+    areas = np.array(f["   1 Time  5.00000E+01 y/Face Area [m^2]"])
+    connections = np.array(f["Domain/Connection Ids"])
+    cos_angle_non_orth = np.array(f["   1 Time  5.00000E+01 y/Face Non Orthogonality Angle"])
+    areas = areas / (1 - cos_angle_non_orth)
+  else: #uge
+    areas = np.array(f["   1 Time  5.00000E+01 y/Face Area [m^2]"])
+    connections = np.array(f["Connection Ids"])
+  f.close()
+  
+  n_connections_internal = 0
+  n_connections_bc1, n_connections_bc2 = 0, 0
+  for x in connections:
+    if (x[0] < 0 or x[1] < 0): 
+      if (x[0] == -1 or x[1] == -1): n_connections_bc1 += 1
+      if (x[0] == -2 or x[1] == -2): n_connections_bc2 += 1
+    else: n_connections_internal += 1
+  
+  #write connections #
+  if struct: out_name = "check_struct.txt"
+  else: out_name = "check_unstruct.txt"
+  out = open(out_name,'w')
+  out.write(str(n_connections_bc1)+'\n')
+  out.write(str(n_connections_bc2)+'\n')
+  out.write(str(n_connections_internal)+'\n')
+  
+  #write connection detail
+  #sort connections
+  connections = np.sort(connections)
+  ind = np.lexsort((connections[:,1],connections[:,0]))
+  print(connections)
+  print(connections[ind])
+  for con,area in zip(connections[ind],areas[ind]):
+    out.write("{} {} {:.6e}\n".format(con[0],con[1],area))
+
+  return
+
+  
+if __name__ == "__main__":
+  check_connections_ids_and_area("face_area_ugi.h5", struct=False, ugi=True)
diff --git a/regression_tests/default/output/face_output/check_unstruct.txt.gold b/regression_tests/default/output/face_output/check_unstruct.txt.gold
new file mode 100644
index 000000000..88238cff1
--- /dev/null
+++ b/regression_tests/default/output/face_output/check_unstruct.txt.gold
@@ -0,0 +1,74 @@
+3
+4
+64
+-2 1 3.749898e+03
+-2 2 1.099907e+03
+-2 13 3.668200e+03
+-2 14 1.119067e+03
+-1 25 4.122913e+03
+-1 26 1.198393e+03
+-1 31 4.134725e+03
+1 2 9.819886e+02
+1 3 2.254348e+03
+1 13 2.601062e+03
+2 4 7.393762e+02
+2 14 8.334786e+02
+3 4 1.277773e+03
+3 5 1.175234e+03
+3 17 1.734862e+03
+4 6 4.872845e+02
+4 18 6.235055e+02
+5 6 1.205048e+03
+5 15 9.400161e+02
+5 19 1.454986e+03
+6 16 4.162219e+02
+6 20 5.564763e+02
+7 8 1.685708e+03
+7 9 1.332751e+03
+7 27 1.488942e+03
+7 29 3.478089e+03
+8 10 5.895419e+02
+8 28 5.330607e+02
+8 30 1.178149e+03
+9 10 1.146468e+03
+9 11 8.028118e+02
+9 21 1.163763e+03
+10 12 3.696762e+02
+10 22 4.413970e+02
+11 12 6.129083e+02
+11 23 2.113818e+03
+12 24 8.036507e+02
+13 14 9.967487e+02
+13 17 1.560567e+03
+13 23 1.699248e+03
+14 18 5.165053e+02
+14 24 5.731085e+02
+15 16 1.345362e+03
+15 27 1.659788e+03
+15 31 2.220157e+03
+16 28 6.153269e+02
+16 32 7.435325e+02
+17 18 7.202604e+02
+17 19 9.343528e+02
+17 23 7.827990e+02
+18 20 3.805002e+02
+18 24 3.651636e+02
+19 20 5.955698e+02
+19 21 6.366239e+02
+19 27 6.394063e+02
+20 22 2.970659e+02
+20 28 2.920534e+02
+21 22 5.015432e+02
+21 23 8.500941e+02
+21 27 7.205169e+02
+22 24 3.489617e+02
+22 28 3.307530e+02
+23 24 8.407235e+02
+25 26 3.706680e+02
+25 29 7.166488e+03
+26 30 2.088519e+03
+27 28 7.093636e+02
+29 30 1.264100e+03
+29 31 1.581014e+03
+30 32 7.334758e+02
+31 32 7.429610e+02
diff --git a/regression_tests/default/output/face_output/face_area_struct-np4.in b/regression_tests/default/output/face_output/face_area_struct-np4.in
new file mode 100755
index 000000000..90c469bbe
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_area_struct-np4.in
@@ -0,0 +1 @@
+EXTERNAL_FILE face_area_struct.in
diff --git a/regression_tests/default/output/face_output/face_area_struct.in b/regression_tests/default/output/face_output/face_area_struct.in
new file mode 100755
index 000000000..75da004e4
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_area_struct.in
@@ -0,0 +1,132 @@
+
+SIMULATION
+  SIMULATION_TYPE SUBSURFACE
+  PROCESS_MODELS
+    SUBSURFACE_FLOW flow
+      MODE RICHARDS
+    /
+  /
+END
+
+SUBSURFACE
+
+
+#=========================== discretization ===================================
+GRID
+  TYPE STRUCTURED 
+  BOUNDS
+    0. 0. 0.
+    100. 100. 1.
+  /
+  NXYZ 3 4 1
+END
+REGION BC1
+  CARTESIAN_BOUNDARY SOUTH !ymin
+END
+REGION BC2
+  CARTESIAN_BOUNDARY NORTH !ymax
+END
+
+
+#=========================== EOS ===================================
+EOS WATER
+  #simplified value for hydraulic conductivity computation
+  DENSITY CONSTANT 997.16d0 kg/m^3
+  VISCOSITY CONSTANT 8.904156d-4 Pa-s
+END
+
+
+#=========================== material properties ==============================
+
+MATERIAL_PROPERTY mater
+  ID 1
+  POROSITY 0.3
+  TORTUOSITY 0.1
+  SATURATION_FUNCTION default
+  PERMEABILITY
+    PERM_ISO 1e-12
+  /
+END
+
+
+#=========================== characteristic curves ============================
+CHARACTERISTIC_CURVES default
+  DEFAULT
+END
+
+
+#=========================== output options ===================================
+OUTPUT
+  FORMAT HDF5
+  VARIABLES
+    LIQUID_HEAD
+    FACE_AREA
+    FACE_NON_ORTHOGONALITY_ANGLE
+  /
+  SNAPSHOT_FILE 
+    PERIODIC TIMESTEP 1
+    PRINT_CONNECTION_IDS
+  /
+  NO_PRINT_INITIAL
+END
+
+
+#=========================== times ============================================
+TIME
+  FINAL_TIME 50 y
+  INITIAL_TIMESTEP_SIZE 50 y
+  MAXIMUM_TIMESTEP_SIZE 1e2 y
+END
+
+
+
+#=========================== regions ==========================================
+REGION all
+  COORDINATES
+    -1e6 -1e6 -1e6
+    1e6 1e6  1e6
+  /
+END
+
+
+
+#=========================== flow conditions ==================================
+FLOW_CONDITION initial
+  TYPE
+    PRESSURE hydrostatic
+  /
+  DATUM 0 0 100
+  PRESSURE 101325.
+  GRADIENT 
+    PRESSURE 0. -0.01 0.
+  /
+END
+
+
+
+#=========================== condition couplers ===============================
+# initial condition
+INITIAL_CONDITION
+  FLOW_CONDITION initial
+  REGION all
+END
+
+BOUNDARY_CONDITION bc1
+  FLOW_CONDITION initial
+  REGION BC1
+END
+
+BOUNDARY_CONDITION bc2
+  FLOW_CONDITION initial
+  REGION BC2
+END
+
+
+
+#=========================== stratigraphy couplers ============================
+STRATA
+  REGION all
+  MATERIAL mater
+END
+
+END_SUBSURFACE
diff --git a/regression_tests/default/output/face_output/face_area_uge-np4.in b/regression_tests/default/output/face_output/face_area_uge-np4.in
new file mode 100644
index 000000000..07b254bac
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_area_uge-np4.in
@@ -0,0 +1 @@
+EXTERNAL_FILE face_area_uge.in
diff --git a/regression_tests/default/output/face_output/face_area_uge.in b/regression_tests/default/output/face_output/face_area_uge.in
new file mode 100644
index 000000000..a1597310e
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_area_uge.in
@@ -0,0 +1,123 @@
+
+SIMULATION
+  SIMULATION_TYPE SUBSURFACE
+  PROCESS_MODELS
+    SUBSURFACE_FLOW flow
+      MODE RICHARDS
+    /
+  /
+END
+
+SUBSURFACE
+
+
+#=========================== discretization ===================================
+
+GRID
+  TYPE UNSTRUCTURED_EXPLICIT mesh.uge
+  UPWIND_FRACTION_METHOD ABSOLUTE_DISTANCE
+END
+REGION BC1
+  FILE BC1.ex
+END
+REGION BC2
+  FILE BC2.ex
+END
+
+
+#=========================== EOS ===================================
+EOS WATER
+  DENSITY CONSTANT 997.16d0 kg/m^3
+  VISCOSITY CONSTANT 8.904156d-4 Pa-s
+END
+
+
+#=========================== material properties ==============================
+
+MATERIAL_PROPERTY mater
+  ID 1
+  POROSITY 0.3
+  TORTUOSITY 0.1
+  SATURATION_FUNCTION default
+  PERMEABILITY
+    PERM_ISO 1e-12
+  /
+END
+
+
+#=========================== characteristic curves ============================
+CHARACTERISTIC_CURVES default
+  DEFAULT
+END
+
+
+#=========================== output options ===================================
+OUTPUT
+  FORMAT HDF5
+  VARIABLES
+    FACE_AREA
+  /
+  SNAPSHOT_FILE 
+    PERIODIC TIMESTEP 1
+    PRINT_CONNECTION_IDS
+  /
+  NO_PRINT_INITIAL
+END
+
+
+#=========================== times ============================================
+TIME
+  FINAL_TIME 50 y
+  INITIAL_TIMESTEP_SIZE 50 y
+  MAXIMUM_TIMESTEP_SIZE 1e2 y
+END
+
+
+
+#=========================== regions ==========================================
+REGION all
+  COORDINATES
+    -1e6 -1e6 -1e6
+    1e6 1e6  1e6
+  /
+END
+
+
+
+#=========================== flow conditions ==================================
+FLOW_CONDITION initial
+  TYPE
+    PRESSURE hydrostatic
+  /
+  DATUM 0 0 100
+  PRESSURE 101325.
+END
+
+
+
+#=========================== condition couplers ===============================
+# initial condition
+INITIAL_CONDITION
+  FLOW_CONDITION initial
+  REGION all
+END
+
+BOUNDARY_CONDITION bc1
+  FLOW_CONDITION initial
+  REGION BC1
+END
+
+BOUNDARY_CONDITION bc2
+  FLOW_CONDITION initial
+  REGION BC2
+END
+
+
+
+#=========================== stratigraphy couplers ============================
+STRATA
+  REGION all
+  MATERIAL mater
+END
+
+END_SUBSURFACE
diff --git a/regression_tests/default/output/face_output/face_area_ugi-np4.in b/regression_tests/default/output/face_output/face_area_ugi-np4.in
new file mode 100644
index 000000000..5b1f5bb24
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_area_ugi-np4.in
@@ -0,0 +1 @@
+EXTERNAL_FILE face_area_ugi.in
diff --git a/regression_tests/default/output/face_output/face_area_ugi.in b/regression_tests/default/output/face_output/face_area_ugi.in
new file mode 100644
index 000000000..6769ac4fb
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_area_ugi.in
@@ -0,0 +1,123 @@
+
+SIMULATION
+  SIMULATION_TYPE SUBSURFACE
+  PROCESS_MODELS
+    SUBSURFACE_FLOW flow
+      MODE RICHARDS
+    /
+  /
+END
+
+SUBSURFACE
+
+
+#=========================== discretization ===================================
+
+GRID
+  TYPE UNSTRUCTURED mesh.ugi
+END
+REGION BC1
+  FILE BC1.ss
+END
+REGION BC2
+  FILE BC2.ss
+END
+
+
+#=========================== EOS ===================================
+EOS WATER
+  DENSITY CONSTANT 997.16d0 kg/m^3
+  VISCOSITY CONSTANT 8.904156d-4 Pa-s
+END
+
+
+#=========================== material properties ==============================
+
+MATERIAL_PROPERTY mater
+  ID 1
+  POROSITY 0.3
+  TORTUOSITY 0.1
+  SATURATION_FUNCTION default
+  PERMEABILITY
+    PERM_ISO 1e-12
+  /
+END
+
+
+#=========================== characteristic curves ============================
+CHARACTERISTIC_CURVES default
+  DEFAULT
+END
+
+
+#=========================== output options ===================================
+OUTPUT
+  FORMAT HDF5
+  VARIABLES
+    FACE_AREA
+    FACE_NON_ORTHOGONALITY_ANGLE
+  /
+  SNAPSHOT_FILE 
+    PERIODIC TIMESTEP 1
+    PRINT_CONNECTION_IDS
+  /
+  NO_PRINT_INITIAL
+END
+
+
+#=========================== times ============================================
+TIME
+  FINAL_TIME 50 y
+  INITIAL_TIMESTEP_SIZE 50 y
+  MAXIMUM_TIMESTEP_SIZE 1e2 y
+END
+
+
+
+#=========================== regions ==========================================
+REGION all
+  COORDINATES
+    -1e6 -1e6 -1e6
+    1e6 1e6  1e6
+  /
+END
+
+
+
+#=========================== flow conditions ==================================
+FLOW_CONDITION initial
+  TYPE
+    PRESSURE hydrostatic
+  /
+  DATUM 0 0 100
+  PRESSURE 101325.
+END
+
+
+
+#=========================== condition couplers ===============================
+# initial condition
+INITIAL_CONDITION
+  FLOW_CONDITION initial
+  REGION all
+END
+
+BOUNDARY_CONDITION bc1
+  FLOW_CONDITION initial
+  REGION BC1
+END
+
+BOUNDARY_CONDITION bc2
+  FLOW_CONDITION initial
+  REGION BC2
+END
+
+
+
+#=========================== stratigraphy couplers ============================
+STRATA
+  REGION all
+  MATERIAL mater
+END
+
+END_SUBSURFACE
diff --git a/regression_tests/default/output/face_output/face_output.cfg b/regression_tests/default/output/face_output/face_output.cfg
new file mode 100644
index 000000000..ef2718a12
--- /dev/null
+++ b/regression_tests/default/output/face_output/face_output.cfg
@@ -0,0 +1,47 @@
+#Â Compare face output connection ids and area
+# for ugi mesh, area is projected and true area recovered with the face
+# orthogonality error
+
+[suites]
+standard = face_area_struct
+           face_area_ugi
+           face_area_uge
+
+standard_parallel = face_area_struct-np4
+                    face_area_ugi-np4
+                    face_area_uge-np4
+
+[default-test-criteria]
+
+[face_area_struct]
+skip_check_regression = True
+python_post_process_script = check_struct.py
+diff_ascii_output = check_struct.txt
+
+[face_area_ugi]
+skip_check_regression = True
+python_post_process_script = check_ugi.py
+diff_ascii_output = check_unstruct.txt
+
+[face_area_uge]
+skip_check_regression = True
+python_post_process_script = check_uge.py
+diff_ascii_output = check_unstruct.txt
+
+[face_area_struct-np4]
+skip_check_regression = True
+np = 4
+python_post_process_script = check_struct-np4.py
+diff_ascii_output = check_struct.txt
+
+[face_area_ugi-np4]
+skip_check_regression = True
+np = 4
+python_post_process_script = check_ugi-np4.py
+diff_ascii_output = check_unstruct.txt
+
+[face_area_uge-np4]
+skip_check_regression = True
+np = 4
+python_post_process_script = check_uge-np4.py
+diff_ascii_output = check_unstruct.txt
diff --git a/regression_tests/default/output/face_output/mesh.uge b/regression_tests/default/output/face_output/mesh.uge
new file mode 100644
index 000000000..73557cb9e
--- /dev/null
+++ b/regression_tests/default/output/face_output/mesh.uge
@@ -0,0 +1,98 @@
+CELLS 32
+1 -127.414485212706 0.10472906633248011 10.0 45826.13420576683
+2 -64.52324631442977 -0.691529936334248 30.0 10212.681337285178
+3 -86.17227492830796 32.53326551880666 10.0 59629.38583943594
+4 -45.27688151504402 14.44178707482037 30.0 13288.834558502871
+5 -28.614087256448087 49.16899217612854 10.0 56235.59552793121
+6 -18.41639393484273 22.20512618157058 30.0 12532.504146224666
+7 67.47959167434333 -28.96588885223778 10.0 78666.36838155384
+8 26.4273228995266 -14.257818298333703 30.0 17531.362096460565
+9 19.049620437735843 -50.00387387859078 10.0 53501.82636934778
+10 3.82666965577644 -24.075544643965106 30.0 11923.264162311794
+11 -31.486686517545674 -58.95890355396934 10.0 28602.386903869883
+12 -19.756940256688267 -28.254558492475095 30.0 6374.246224291003
+13 -92.91725484770208 -31.493436550717565 10.0 46514.938472578615
+14 -48.42453881076126 -15.437340557624264 30.0 10366.186288174662
+15 32.85253947782178 45.971239237749124 10.0 62783.572782886746
+16 10.268031874483214 20.71284147699352 30.0 13991.767648757623
+17 -60.44024124187566 -1.7136721252931475 10.0 33612.15377749853
+18 -33.26859912804226 -1.5401171590928735 30.0 7490.708556128244
+19 -19.436729358150252 11.85762255985672 10.0 27793.25657811403
+20 -14.133626915637072 4.7931536939770645 30.0 6193.925751693984
+21 -4.418841620054179 -16.51344542708167 10.0 23405.3472058912
+22 -7.12527930452557 -8.44667803326085 30.0 5216.048805884325
+23 -47.02592178527893 -33.54080734991489 10.0 39233.76330595782
+24 -27.00858338163046 -16.392780263916357 30.0 8743.524393899172
+25 133.2070652411419 -2.349083081779058 10.0 17297.839610390423
+26 57.10014389736594 -1.836642272119632 30.0 3854.9471131727246
+27 20.228223240519466 6.089282663547888 10.0 33103.63608060573
+28 4.376684297075463 2.101261742366276 30.0 7377.38175510642
+29 101.86237494471847 2.919822677629273 10.0 58991.341013236335
+30 42.47262175903501 0.6221804156042561 30.0 13146.641711521239
+31 85.24925010813062 38.04171120013107 10.0 34671.51385816606
+32 34.71983016862735 17.012395059438425 30.0 7726.794516962725
+CONNECTIONS 64
+1 2 -87.20602821205475 -0.5498265195664968 20.0 981.9885901235749
+1 3 -119.75584383436241 22.72005475963219 8.630975352265821 2254.347696403441
+1 13 -119.7900992063818 -21.54877446455057 8.586935055347126 2601.061828478057
+2 4 -61.73045999461152 10.015800947471075 28.55428450124913 739.3761659949784
+2 14 -61.786695847002356 -10.929237211140967 28.502074557574357 833.4786281997264
+3 4 -61.54511812889907 21.94976678678699 20.0 1277.7725537021988
+3 5 -63.62873052831334 50.7783543304591 8.371369341890144 1175.2338625970938
+3 17 -77.58169654905588 12.367252945532899 8.269054118465702 1734.8619771931687
+4 6 -35.11343799565433 23.232440682020584 28.307937040866975 487.2845420294472
+4 18 -41.72794984263317 5.2187261739150665 28.18864145764759 623.5055182511716
+5 6 -23.129705764581075 33.72332819720085 20.0 1205.048475598526
+5 15 2.6378329847409203 59.11893976727489 8.326944751073244 940.0160785058365
+5 19 -24.27242868216632 29.67217147130338 7.9956493913095 1454.9860876057637
+6 16 -3.7341258714082097 27.084445264946265 28.296154194463828 416.2218874854221
+6 20 -16.438166405161105 13.406479460559487 27.947999701225214 556.4763063861104
+7 8 44.621477669681994 -19.84235728920458 20.0 1685.7078938904397
+7 9 53.03717644364255 -50.36736797485297 8.196444120859503 1332.75084636501
+7 27 43.74439287849708 -2.6716501537960573 8.258356964495299 1488.9417833656535
+7 29 99.7630977501134 -18.5684797001897 8.149412503110135 3478.088706658503
+8 10 20.156724030716024 -24.568600820255355 28.086440610674046 589.5418787657259
+8 28 15.690794710085886 -2.107483648128652 28.22136129988146 533.0606543649068
+8 30 42.712973434016654 -9.595336451959827 27.96616953971661 1178.1493911929272
+9 10 12.594379445599857 -35.58117262982015 19.999999999999996 1146.4677079145952
+9 11 -7.869382944210914 -61.47973620673042 8.388631361989725 802.811833795025
+9 21 8.932529868356722 -30.433118817689344 8.15678301248607 1163.7625628378114
+10 12 -8.753582387228988 -29.63822185385153 28.37651921034715 369.6761595314679
+10 22 -0.8041454478795642 -15.174612245258158 28.17573902545708 441.3969960236362
+11 12 -26.958531908932528 -40.147936962870595 19.999999999999996 612.9082907972117
+11 23 -51.54918871797067 -56.14274022190794 7.992758281074002 2113.818112543313
+12 24 -29.380973291155716 -27.46494008323361 27.839219451359902 803.6506832747611
+13 14 -66.80932891973424 -22.54450671947555 20.0 996.7486815552559
+13 17 -85.64326774480797 -10.46955843254427 8.635820858755231 1560.5670287949706
+13 23 -76.37348723781462 -48.472502986956734 8.553296227779926 1699.247930333988
+14 18 -45.461390776842364 -5.730944466893859 28.60792784632614 516.5053163946629
+14 24 -41.159507277085204 -23.61555765698032 28.502855838870257 573.1085138922108
+15 16 20.05108195711249 31.262441776475434 20.0 1345.362273919002
+15 31 68.62622133574085 43.874317170924755 8.418561018689141 2220.1572191418895
+15 27 32.79317270005246 23.21399779012468 8.06766974449548 1659.7884698504654
+16 32 27.59214822711523 20.04495179752742 28.32681757187718 743.5324506261504
+16 28 10.464233563384656 10.389279728292593 27.99127940441045 615.3268937696309
+17 18 -44.0243030641497 -0.8219575884540724 19.999999999999996 720.2604380892544
+17 19 -42.05727766275087 9.515795340569369 8.184976483431077 934.3527771395775
+17 23 -54.49725396561019 -18.184585264523047 8.257968865394906 782.7990469064854
+18 20 -24.820470668172142 3.5931149770365383 28.232998969508255 380.5002284700319
+18 24 -30.54354727029914 -9.237444006833423 28.272047030293265 365.1635629522281
+19 20 -16.925717804861737 8.668417014845861 20.0 595.5697838167291
+19 27 1.4772970281743463 18.528186571123648 8.182232765941645 639.406293170961
+19 21 -17.40812257102016 -4.508213998776994 8.067032109169508 636.6239373980807
+20 28 -4.347430749546125 7.773470264919106 28.31928269215136 292.0533744623738
+20 22 -13.105939221670015 -2.8206196967452852 28.233264278263665 297.06588451410533
+21 22 -5.5828197449228805 -11.915911197031772 20.0 501.54315441195433
+21 23 -21.493310094601632 -24.616706619131726 8.168709805985786 850.0940655222153
+21 27 15.164793357398876 -12.01720625424612 8.12382780515017 720.5168584544219
+22 24 -15.233315296976619 -12.278073678508257 28.2558670757432 348.9617298179775
+22 28 1.9398473876706448 -6.230637659653205 28.219294334130375 330.753026777378
+23 24 -34.988728133875036 -25.20156100632061 20.0 840.7234994133819
+25 26 84.67097357056407 -2.229889043648735 20.0 370.6679916512235
+25 29 132.76786900446697 -2.125548340237941 8.510960570649074 7166.487522186695
+26 30 58.13549000759745 -1.7349663688939139 28.38438490615519 2088.518529708704
+27 28 11.997399496464492 4.30094632508976 20.0 709.3636302986941
+29 30 64.31390422208696 1.0180760150476076 19.999999999999996 1264.1001645693495
+29 31 102.99575782199202 28.323303257029984 8.269063477150679 1581.0136701371048
+30 32 44.118759642429325 12.77130268212616 28.117651626909684 733.47577143638
+31 32 54.507668182861345 24.119838227542584 20.0 742.9610112464155
diff --git a/regression_tests/default/output/face_output/mesh.ugi b/regression_tests/default/output/face_output/mesh.ugi
new file mode 100644
index 000000000..e163309ef
--- /dev/null
+++ b/regression_tests/default/output/face_output/mesh.ugi
@@ -0,0 +1,96 @@
+32 63
+H 2 1 12 13 22 24 44 46 
+H 22 24 44 46 23 25 45 47 
+H 3 2 13 14 26 22 46 48 
+H 26 22 46 48 27 23 47 49 
+H 4 3 14 15 28 26 48 50 
+H 28 26 48 50 29 27 49 51 
+H 9 8 16 17 38 36 52 54 
+H 38 36 52 54 39 37 53 55 
+H 10 9 17 18 40 38 54 56 
+H 40 38 54 56 41 39 55 57 
+W 11 10 18 42 40 56 
+W 42 40 56 43 41 57 
+H 12 11 19 13 44 42 58 46 
+H 44 42 58 46 45 43 59 47 
+H 5 4 15 16 30 28 50 52 
+H 30 28 50 52 31 29 51 53 
+H 14 13 19 20 48 46 58 60 
+H 48 46 58 60 49 47 59 61 
+H 15 14 20 21 50 48 60 62 
+H 50 48 60 62 51 49 61 63 
+H 18 17 21 20 56 54 62 60 
+H 56 54 62 60 57 55 63 61 
+H 18 20 19 11 56 60 58 42 
+H 56 60 58 42 57 61 59 43 
+W 8 7 6 36 34 32 
+W 36 34 32 37 35 33 
+H 17 16 15 21 54 52 50 62 
+H 54 52 50 62 55 53 51 63 
+W 6 16 8 32 52 36 
+W 32 52 36 33 53 37 
+W 5 16 6 30 52 32 
+W 30 52 32 31 53 33 
+-200.0 0.0 0.0
+-171.86167222974882 51.14578579510332 0.0
+-91.41724094880871 88.94223976450596 0.0
+5.216283011407571 99.9659822033787 0.0
+101.4747208523422 86.17261895164152 0.0
+174.46148931781258 48.8957788183468 0.0
+199.93296372649945 -2.5889194434297442 0.0
+167.92722019869362 -54.31493513836565 0.0
+92.25778265416032 -88.72499864713681 0.0
+-4.347700825759548 -99.97636907981017 0.0
+-100.6415766026708 -86.41653930083164 0.0
+-171.75154070641415 -51.23818952932699 0.0
+-123.27282516035167 2.5019675062204083 0.0
+-60.3758449074826 32.77176511936268 0.0
+6.626220515077974 42.405646603661715 0.0
+74.5542025408058 18.48670359420358 0.0
+37.80983324075541 -28.080501602412443 0.0
+-11.464056363314311 -48.0544492715679 0.0
+-87.23486701372383 -30.961224861665258 0.0
+-38.806533170528 -11.601083680591108 0.0
+1.5514840240486676 1.5153343616927273 0.0
+-90.67754225409344 24.87876461571784 20.0
+-41.9670642687002 9.118551908086557 40.0
+-104.74670613921903 -0.694128281833817 20.0
+-47.59472982275043 -1.1106052509341073 40.0
+-50.45532661362337 43.776991600419166 20.0
+-25.878178012512173 16.677842701967084 40.0
+-2.1385646335152337 49.28886281985554 20.0
+-6.551473220468916 18.882591189741635 40.0
+45.990654286952086 42.39218119398695 20.0
+12.700214347718012 16.123918539394197 40.0
+82.48403851968726 23.75376112733958 20.0
+27.297568040812088 8.668550512735253 40.0
+95.2197757240307 -1.9885880035486891 20.0
+32.391862922549464 -1.628389139620056 40.0
+79.21690396012778 -27.851595851016643 20.0
+25.990714216988295 -11.973592278607237 40.0
+41.38218518786115 -45.05662760540222 20.0
+10.856826708081636 -18.85560498036147 40.0
+-6.920556552098793 -50.6823128217389 20.0
+-8.464269987902341 -21.105879066896144 40.0
+-55.06749444055441 -43.902397932249634 20.0
+-27.723045143284587 -18.39391311110044 40.0
+-90.6224764924261 -26.313223046497313 20.0
+-41.94503796403326 -11.358243156799505 40.0
+-66.38311871939486 0.5568554712763871 20.0
+-32.24929485482077 -0.6102117496900256 40.0
+-34.93462859296032 15.691754277847524 20.0
+-19.66989880424695 5.44374777293843 40.0
+-1.4335958816800325 20.508695019997038 20.0
+-6.269485719734836 7.370524069798236 40.0
+32.53039513118389 8.549223515267974 20.0
+7.316110685410733 2.586735467906609 40.0
+14.158210481158685 -14.734379083040038 20.0
+-0.0327631745993493 -6.726705571416597 40.0
+-10.478734320876175 -24.721352917617768 20.0
+-9.887541095413292 -10.721495105247687 40.0
+-48.36413964608093 -16.174740712666445 20.0
+-25.041703225495198 -7.302850223267159 40.0
+-24.14997272448302 -6.494670122129371 20.0
+-15.356036456856032 -3.430821987052329 40.0
+-3.9709641271946854 0.0635388990125465 20.0
+-7.284433017940697 -0.8075383785955618 40.0
diff --git a/regression_tests/default/output/sensitivities/64.uge b/regression_tests/default/output/sensitivities/64.uge
new file mode 100644
index 000000000..57dac9917
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/64.uge
@@ -0,0 +1,178 @@
+CELLS 64
+1 -4.375000e+01 -4.375000e+01 -5.000000e-01 1.562500e+02
+2 -3.125000e+01 -4.375000e+01 -5.000000e-01 1.562500e+02
+3 -1.875000e+01 -4.375000e+01 -5.000000e-01 1.562500e+02
+4 -6.250000e+00 -4.375000e+01 -5.000000e-01 1.562500e+02
+5 6.250000e+00 -4.375000e+01 -5.000000e-01 1.562500e+02
+6 1.875000e+01 -4.375000e+01 -5.000000e-01 1.562500e+02
+7 3.125000e+01 -4.375000e+01 -5.000000e-01 1.562500e+02
+8 4.375000e+01 -4.375000e+01 -5.000000e-01 1.562500e+02
+9 -4.375000e+01 -3.125000e+01 -5.000000e-01 1.562500e+02
+10 -3.125000e+01 -3.125000e+01 -5.000000e-01 1.562500e+02
+11 -1.875000e+01 -3.125000e+01 -5.000000e-01 1.562500e+02
+12 -6.250000e+00 -3.125000e+01 -5.000000e-01 1.562500e+02
+13 6.250000e+00 -3.125000e+01 -5.000000e-01 1.562500e+02
+14 1.875000e+01 -3.125000e+01 -5.000000e-01 1.562500e+02
+15 3.125000e+01 -3.125000e+01 -5.000000e-01 1.562500e+02
+16 4.375000e+01 -3.125000e+01 -5.000000e-01 1.562500e+02
+17 -4.375000e+01 -1.875000e+01 -5.000000e-01 1.562500e+02
+18 -3.125000e+01 -1.875000e+01 -5.000000e-01 1.562500e+02
+19 -1.875000e+01 -1.875000e+01 -5.000000e-01 1.562500e+02
+20 -6.250000e+00 -1.875000e+01 -5.000000e-01 1.562500e+02
+21 6.250000e+00 -1.875000e+01 -5.000000e-01 1.562500e+02
+22 1.875000e+01 -1.875000e+01 -5.000000e-01 1.562500e+02
+23 3.125000e+01 -1.875000e+01 -5.000000e-01 1.562500e+02
+24 4.375000e+01 -1.875000e+01 -5.000000e-01 1.562500e+02
+25 -4.375000e+01 -6.250000e+00 -5.000000e-01 1.562500e+02
+26 -3.125000e+01 -6.250000e+00 -5.000000e-01 1.562500e+02
+27 -1.875000e+01 -6.250000e+00 -5.000000e-01 1.562500e+02
+28 -6.250000e+00 -6.250000e+00 -5.000000e-01 1.562500e+02
+29 6.250000e+00 -6.250000e+00 -5.000000e-01 1.562500e+02
+30 1.875000e+01 -6.250000e+00 -5.000000e-01 1.562500e+02
+31 3.125000e+01 -6.250000e+00 -5.000000e-01 1.562500e+02
+32 4.375000e+01 -6.250000e+00 -5.000000e-01 1.562500e+02
+33 -4.375000e+01 6.250000e+00 -5.000000e-01 1.562500e+02
+34 -3.125000e+01 6.250000e+00 -5.000000e-01 1.562500e+02
+35 -1.875000e+01 6.250000e+00 -5.000000e-01 1.562500e+02
+36 -6.250000e+00 6.250000e+00 -5.000000e-01 1.562500e+02
+37 6.250000e+00 6.250000e+00 -5.000000e-01 1.562500e+02
+38 1.875000e+01 6.250000e+00 -5.000000e-01 1.562500e+02
+39 3.125000e+01 6.250000e+00 -5.000000e-01 1.562500e+02
+40 4.375000e+01 6.250000e+00 -5.000000e-01 1.562500e+02
+41 -4.375000e+01 1.875000e+01 -5.000000e-01 1.562500e+02
+42 -3.125000e+01 1.875000e+01 -5.000000e-01 1.562500e+02
+43 -1.875000e+01 1.875000e+01 -5.000000e-01 1.562500e+02
+44 -6.250000e+00 1.875000e+01 -5.000000e-01 1.562500e+02
+45 6.250000e+00 1.875000e+01 -5.000000e-01 1.562500e+02
+46 1.875000e+01 1.875000e+01 -5.000000e-01 1.562500e+02
+47 3.125000e+01 1.875000e+01 -5.000000e-01 1.562500e+02
+48 4.375000e+01 1.875000e+01 -5.000000e-01 1.562500e+02
+49 -4.375000e+01 3.125000e+01 -5.000000e-01 1.562500e+02
+50 -3.125000e+01 3.125000e+01 -5.000000e-01 1.562500e+02
+51 -1.875000e+01 3.125000e+01 -5.000000e-01 1.562500e+02
+52 -6.250000e+00 3.125000e+01 -5.000000e-01 1.562500e+02
+53 6.250000e+00 3.125000e+01 -5.000000e-01 1.562500e+02
+54 1.875000e+01 3.125000e+01 -5.000000e-01 1.562500e+02
+55 3.125000e+01 3.125000e+01 -5.000000e-01 1.562500e+02
+56 4.375000e+01 3.125000e+01 -5.000000e-01 1.562500e+02
+57 -4.375000e+01 4.375000e+01 -5.000000e-01 1.562500e+02
+58 -3.125000e+01 4.375000e+01 -5.000000e-01 1.562500e+02
+59 -1.875000e+01 4.375000e+01 -5.000000e-01 1.562500e+02
+60 -6.250000e+00 4.375000e+01 -5.000000e-01 1.562500e+02
+61 6.250000e+00 4.375000e+01 -5.000000e-01 1.562500e+02
+62 1.875000e+01 4.375000e+01 -5.000000e-01 1.562500e+02
+63 3.125000e+01 4.375000e+01 -5.000000e-01 1.562500e+02
+64 4.375000e+01 4.375000e+01 -5.000000e-01 1.562500e+02
+CONNECTIONS 112
+1 2 -3.750000e+01 -4.375000e+01 -5.000000e-01 1.250000e+01
+1 9 -4.375000e+01 -3.750000e+01 -5.000000e-01 1.250000e+01
+2 3 -2.500000e+01 -4.375000e+01 -5.000000e-01 1.250000e+01
+2 10 -3.125000e+01 -3.750000e+01 -5.000000e-01 1.250000e+01
+3 4 -1.250000e+01 -4.375000e+01 -5.000000e-01 1.250000e+01
+3 11 -1.875000e+01 -3.750000e+01 -5.000000e-01 1.250000e+01
+4 5 5.419062e-15 -4.375000e+01 -5.000000e-01 1.250000e+01
+4 12 -6.250000e+00 -3.750000e+01 -5.000000e-01 1.250000e+01
+5 6 1.250000e+01 -4.375000e+01 -5.000000e-01 1.250000e+01
+5 13 6.250000e+00 -3.750000e+01 -5.000000e-01 1.250000e+01
+6 7 2.500000e+01 -4.375000e+01 -5.000000e-01 1.250000e+01
+6 14 1.875000e+01 -3.750000e+01 -5.000000e-01 1.250000e+01
+7 8 3.750000e+01 -4.375000e+01 -5.000000e-01 1.250000e+01
+7 15 3.125000e+01 -3.750000e+01 -5.000000e-01 1.250000e+01
+8 16 4.375000e+01 -3.750000e+01 -5.000000e-01 1.250000e+01
+9 10 -3.750000e+01 -3.125000e+01 -5.000000e-01 1.250000e+01
+9 17 -4.375000e+01 -2.500000e+01 -5.000000e-01 1.250000e+01
+10 11 -2.500000e+01 -3.125000e+01 -5.000000e-01 1.250000e+01
+10 18 -3.125000e+01 -2.500000e+01 -5.000000e-01 1.250000e+01
+11 12 -1.250000e+01 -3.125000e+01 -5.000000e-01 1.250000e+01
+11 19 -1.875000e+01 -2.500000e+01 -5.000000e-01 1.250000e+01
+12 13 3.888254e-15 -3.125000e+01 -5.000000e-01 1.250000e+01
+12 20 -6.250000e+00 -2.500000e+01 -5.000000e-01 1.250000e+01
+13 14 1.250000e+01 -3.125000e+01 -5.000000e-01 1.250000e+01
+13 21 6.250000e+00 -2.500000e+01 -5.000000e-01 1.250000e+01
+14 15 2.500000e+01 -3.125000e+01 -5.000000e-01 1.250000e+01
+14 22 1.875000e+01 -2.500000e+01 -5.000000e-01 1.250000e+01
+15 16 3.750000e+01 -3.125000e+01 -5.000000e-01 1.250000e+01
+15 23 3.125000e+01 -2.500000e+01 -5.000000e-01 1.250000e+01
+16 24 4.375000e+01 -2.500000e+01 -5.000000e-01 1.250000e+01
+17 18 -3.750000e+01 -1.875000e+01 -5.000000e-01 1.250000e+01
+17 25 -4.375000e+01 -1.250000e+01 -5.000000e-01 1.250000e+01
+18 19 -2.500000e+01 -1.875000e+01 -5.000000e-01 1.250000e+01
+18 26 -3.125000e+01 -1.250000e+01 -5.000000e-01 1.250000e+01
+19 20 -1.250000e+01 -1.875000e+01 -5.000000e-01 1.250000e+01
+19 27 -1.875000e+01 -1.250000e+01 -5.000000e-01 1.250000e+01
+20 21 2.357445e-15 -1.875000e+01 -5.000000e-01 1.250000e+01
+20 28 -6.250000e+00 -1.250000e+01 -5.000000e-01 1.250000e+01
+21 22 1.250000e+01 -1.875000e+01 -5.000000e-01 1.250000e+01
+21 29 6.250000e+00 -1.250000e+01 -5.000000e-01 1.250000e+01
+22 23 2.500000e+01 -1.875000e+01 -5.000000e-01 1.250000e+01
+22 30 1.875000e+01 -1.250000e+01 -5.000000e-01 1.250000e+01
+23 24 3.750000e+01 -1.875000e+01 -5.000000e-01 1.250000e+01
+23 31 3.125000e+01 -1.250000e+01 -5.000000e-01 1.250000e+01
+24 32 4.375000e+01 -1.250000e+01 -5.000000e-01 1.250000e+01
+25 26 -3.750000e+01 -6.250000e+00 -5.000000e-01 1.250000e+01
+25 33 -4.375000e+01 -5.357830e-15 -5.000000e-01 1.250000e+01
+26 27 -2.500000e+01 -6.250000e+00 -5.000000e-01 1.250000e+01
+26 34 -3.125000e+01 -3.827021e-15 -5.000000e-01 1.250000e+01
+27 28 -1.250000e+01 -6.250000e+00 -5.000000e-01 1.250000e+01
+27 35 -1.875000e+01 -2.296213e-15 -5.000000e-01 1.250000e+01
+28 29 8.266366e-16 -6.250000e+00 -5.000000e-01 1.250000e+01
+28 36 -6.250000e+00 -7.654042e-16 -5.000000e-01 1.250000e+01
+29 30 1.250000e+01 -6.250000e+00 -5.000000e-01 1.250000e+01
+29 37 6.250000e+00 7.654042e-16 -5.000000e-01 1.250000e+01
+30 31 2.500000e+01 -6.250000e+00 -5.000000e-01 1.250000e+01
+30 38 1.875000e+01 2.296213e-15 -5.000000e-01 1.250000e+01
+31 32 3.750000e+01 -6.250000e+00 -5.000000e-01 1.250000e+01
+31 39 3.125000e+01 3.827021e-15 -5.000000e-01 1.250000e+01
+32 40 4.375000e+01 5.357830e-15 -5.000000e-01 1.250000e+01
+33 34 -3.750000e+01 6.250000e+00 -5.000000e-01 1.250000e+01
+33 41 -4.375000e+01 1.250000e+01 -5.000000e-01 1.250000e+01
+34 35 -2.500000e+01 6.250000e+00 -5.000000e-01 1.250000e+01
+34 42 -3.125000e+01 1.250000e+01 -5.000000e-01 1.250000e+01
+35 36 -1.250000e+01 6.250000e+00 -5.000000e-01 1.250000e+01
+35 43 -1.875000e+01 1.250000e+01 -5.000000e-01 1.250000e+01
+36 37 -7.041719e-16 6.250000e+00 -5.000000e-01 1.250000e+01
+36 44 -6.250000e+00 1.250000e+01 -5.000000e-01 1.250000e+01
+37 38 1.250000e+01 6.250000e+00 -5.000000e-01 1.250000e+01
+37 45 6.250000e+00 1.250000e+01 -5.000000e-01 1.250000e+01
+38 39 2.500000e+01 6.250000e+00 -5.000000e-01 1.250000e+01
+38 46 1.875000e+01 1.250000e+01 -5.000000e-01 1.250000e+01
+39 40 3.750000e+01 6.250000e+00 -5.000000e-01 1.250000e+01
+39 47 3.125000e+01 1.250000e+01 -5.000000e-01 1.250000e+01
+40 48 4.375000e+01 1.250000e+01 -5.000000e-01 1.250000e+01
+41 42 -3.750000e+01 1.875000e+01 -5.000000e-01 1.250000e+01
+41 49 -4.375000e+01 2.500000e+01 -5.000000e-01 1.250000e+01
+42 43 -2.500000e+01 1.875000e+01 -5.000000e-01 1.250000e+01
+42 50 -3.125000e+01 2.500000e+01 -5.000000e-01 1.250000e+01
+43 44 -1.250000e+01 1.875000e+01 -5.000000e-01 1.250000e+01
+43 51 -1.875000e+01 2.500000e+01 -5.000000e-01 1.250000e+01
+44 45 -2.234980e-15 1.875000e+01 -5.000000e-01 1.250000e+01
+44 52 -6.250000e+00 2.500000e+01 -5.000000e-01 1.250000e+01
+45 46 1.250000e+01 1.875000e+01 -5.000000e-01 1.250000e+01
+45 53 6.250000e+00 2.500000e+01 -5.000000e-01 1.250000e+01
+46 47 2.500000e+01 1.875000e+01 -5.000000e-01 1.250000e+01
+46 54 1.875000e+01 2.500000e+01 -5.000000e-01 1.250000e+01
+47 48 3.750000e+01 1.875000e+01 -5.000000e-01 1.250000e+01
+47 55 3.125000e+01 2.500000e+01 -5.000000e-01 1.250000e+01
+48 56 4.375000e+01 2.500000e+01 -5.000000e-01 1.250000e+01
+49 50 -3.750000e+01 3.125000e+01 -5.000000e-01 1.250000e+01
+49 57 -4.375000e+01 3.750000e+01 -5.000000e-01 1.250000e+01
+50 51 -2.500000e+01 3.125000e+01 -5.000000e-01 1.250000e+01
+50 58 -3.125000e+01 3.750000e+01 -5.000000e-01 1.250000e+01
+51 52 -1.250000e+01 3.125000e+01 -5.000000e-01 1.250000e+01
+51 59 -1.875000e+01 3.750000e+01 -5.000000e-01 1.250000e+01
+52 53 -3.765789e-15 3.125000e+01 -5.000000e-01 1.250000e+01
+52 60 -6.250000e+00 3.750000e+01 -5.000000e-01 1.250000e+01
+53 54 1.250000e+01 3.125000e+01 -5.000000e-01 1.250000e+01
+53 61 6.250000e+00 3.750000e+01 -5.000000e-01 1.250000e+01
+54 55 2.500000e+01 3.125000e+01 -5.000000e-01 1.250000e+01
+54 62 1.875000e+01 3.750000e+01 -5.000000e-01 1.250000e+01
+55 56 3.750000e+01 3.125000e+01 -5.000000e-01 1.250000e+01
+55 63 3.125000e+01 3.750000e+01 -5.000000e-01 1.250000e+01
+56 64 4.375000e+01 3.750000e+01 -5.000000e-01 1.250000e+01
+57 58 -3.750000e+01 4.375000e+01 -5.000000e-01 1.250000e+01
+58 59 -2.500000e+01 4.375000e+01 -5.000000e-01 1.250000e+01
+59 60 -1.250000e+01 4.375000e+01 -5.000000e-01 1.250000e+01
+60 61 -5.296597e-15 4.375000e+01 -5.000000e-01 1.250000e+01
+61 62 1.250000e+01 4.375000e+01 -5.000000e-01 1.250000e+01
+62 63 2.500000e+01 4.375000e+01 -5.000000e-01 1.250000e+01
+63 64 3.750000e+01 4.375000e+01 -5.000000e-01 1.250000e+01
diff --git a/regression_tests/default/output/sensitivities/64.ugi b/regression_tests/default/output/sensitivities/64.ugi
new file mode 100644
index 000000000..f310ab3fe
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/64.ugi
@@ -0,0 +1,227 @@
+64 162
+H 2 11 33 26 90 89 114 107 
+H 26 33 34 27 107 114 115 108 
+H 27 34 35 28 108 115 116 109 
+H 28 35 36 29 109 116 117 110 
+H 29 36 37 30 110 117 118 111 
+H 30 37 38 31 111 118 119 112 
+H 31 38 39 32 112 119 120 113 
+H 32 39 25 4 113 120 105 106 
+H 11 10 40 33 89 88 121 114 
+H 33 40 41 34 114 121 122 115 
+H 34 41 42 35 115 122 123 116 
+H 35 42 43 36 116 123 124 117 
+H 36 43 44 37 117 124 125 118 
+H 37 44 45 38 118 125 126 119 
+H 38 45 46 39 119 126 127 120 
+H 39 46 24 25 120 127 104 105 
+H 10 9 47 40 88 87 128 121 
+H 40 47 48 41 121 128 129 122 
+H 41 48 49 42 122 129 130 123 
+H 42 49 50 43 123 130 131 124 
+H 43 50 51 44 124 131 132 125 
+H 44 51 52 45 125 132 133 126 
+H 45 52 53 46 126 133 134 127 
+H 46 53 23 24 127 134 103 104 
+H 9 8 54 47 87 86 135 128 
+H 47 54 55 48 128 135 136 129 
+H 48 55 56 49 129 136 137 130 
+H 49 56 57 50 130 137 138 131 
+H 50 57 58 51 131 138 139 132 
+H 51 58 59 52 132 139 140 133 
+H 52 59 60 53 133 140 141 134 
+H 53 60 22 23 134 141 102 103 
+H 8 7 61 54 86 85 142 135 
+H 54 61 62 55 135 142 143 136 
+H 55 62 63 56 136 143 144 137 
+H 56 63 64 57 137 144 145 138 
+H 57 64 65 58 138 145 146 139 
+H 58 65 66 59 139 146 147 140 
+H 59 66 67 60 140 147 148 141 
+H 60 67 21 22 141 148 101 102 
+H 7 6 68 61 85 84 149 142 
+H 61 68 69 62 142 149 150 143 
+H 62 69 70 63 143 150 151 144 
+H 63 70 71 64 144 151 152 145 
+H 64 71 72 65 145 152 153 146 
+H 65 72 73 66 146 153 154 147 
+H 66 73 74 67 147 154 155 148 
+H 67 74 20 21 148 155 100 101 
+H 6 5 75 68 84 83 156 149 
+H 68 75 76 69 149 156 157 150 
+H 69 76 77 70 150 157 158 151 
+H 70 77 78 71 151 158 159 152 
+H 71 78 79 72 152 159 160 153 
+H 72 79 80 73 153 160 161 154 
+H 73 80 81 74 154 161 162 155 
+H 74 81 19 20 155 162 99 100 
+H 5 1 12 75 83 82 91 156 
+H 75 12 13 76 156 91 92 157 
+H 76 13 14 77 157 92 93 158 
+H 77 14 15 78 158 93 94 159 
+H 78 15 16 79 159 94 95 160 
+H 79 16 17 80 160 95 96 161 
+H 80 17 18 81 161 96 97 162 
+H 81 18 3 19 162 97 98 99 
+-50.00000000000001 49.99999999999999 -6.123233995736767e-15
+-49.99999999999999 -50.00000000000001 -6.123233995736765e-15
+49.99999999999999 50.00000000000001 6.123233995736765e-15
+50.00000000000001 -49.99999999999999 6.123233995736767e-15
+-50.00000000000001 37.49999999999999 -6.123233995736767e-15
+-50.0 24.999999999999993 -6.123233995736766e-15
+-50.0 12.499999999999995 -6.123233995736766e-15
+-50.0 -6.123233995736766e-15 -6.123233995736766e-15
+-50.0 -12.500000000000005 -6.123233995736766e-15
+-50.0 -25.000000000000007 -6.123233995736766e-15
+-49.99999999999999 -37.50000000000001 -6.123233995736765e-15
+-37.50000000000001 49.99999999999999 -4.592425496802575e-15
+-25.000000000000007 50.0 -3.061616997868384e-15
+-12.500000000000005 50.0 -1.5308084989341921e-15
+-6.123233995736766e-15 50.0 -7.4987989133092885e-31
+12.499999999999995 50.0 1.530808498934191e-15
+24.999999999999993 50.0 3.0616169978683823e-15
+37.49999999999999 50.00000000000001 4.5924254968025736e-15
+49.99999999999999 37.50000000000001 6.123233995736765e-15
+50.0 25.000000000000007 6.123233995736766e-15
+50.0 12.500000000000005 6.123233995736766e-15
+50.0 6.123233995736766e-15 6.123233995736766e-15
+50.0 -12.499999999999995 6.123233995736766e-15
+50.0 -24.999999999999993 6.123233995736766e-15
+50.00000000000001 -37.49999999999999 6.123233995736767e-15
+-37.49999999999999 -50.00000000000001 -4.5924254968025736e-15
+-24.999999999999993 -50.0 -3.0616169978683823e-15
+-12.499999999999995 -50.0 -1.530808498934191e-15
+6.123233995736766e-15 -50.0 7.4987989133092885e-31
+12.500000000000005 -50.0 1.5308084989341921e-15
+25.000000000000007 -50.0 3.061616997868384e-15
+37.50000000000001 -49.99999999999999 4.592425496802575e-15
+-37.49999999999999 -37.50000000000001 -4.5924254968025736e-15
+-24.999999999999996 -37.5 -3.0616169978683826e-15
+-12.499999999999995 -37.5 -1.530808498934191e-15
+4.592425496802574e-15 -37.5 5.624099184981966e-31
+12.500000000000005 -37.5 1.5308084989341921e-15
+25.000000000000004 -37.5 3.0616169978683834e-15
+37.50000000000001 -37.49999999999999 4.592425496802575e-15
+-37.5 -25.000000000000004 -4.592425496802574e-15
+-24.999999999999996 -25.000000000000004 -3.0616169978683826e-15
+-12.499999999999996 -25.0 -1.5308084989341911e-15
+3.061616997868383e-15 -25.0 3.7493994566546442e-31
+12.500000000000004 -25.0 1.530808498934192e-15
+25.000000000000004 -24.999999999999996 3.0616169978683834e-15
+37.5 -24.999999999999996 4.592425496802574e-15
+-37.5 -12.500000000000005 -4.592425496802574e-15
+-25.0 -12.500000000000004 -3.061616997868383e-15
+-12.499999999999998 -12.500000000000002 -1.5308084989341913e-15
+1.5308084989341915e-15 -12.5 1.8746997283273221e-31
+12.500000000000002 -12.499999999999998 1.5308084989341917e-15
+25.0 -12.499999999999996 3.061616997868383e-15
+37.5 -12.499999999999995 4.592425496802574e-15
+-37.5 -4.592425496802574e-15 -4.592425496802574e-15
+-25.0 -3.061616997868383e-15 -3.061616997868383e-15
+-12.5 -1.5308084989341915e-15 -1.5308084989341915e-15
+0.0 0.0 0.0
+12.5 1.5308084989341915e-15 1.5308084989341915e-15
+25.0 3.061616997868383e-15 3.061616997868383e-15
+37.5 4.592425496802574e-15 4.592425496802574e-15
+-37.5 12.499999999999995 -4.592425496802574e-15
+-25.0 12.499999999999996 -3.061616997868383e-15
+-12.500000000000002 12.499999999999998 -1.5308084989341917e-15
+-1.5308084989341915e-15 12.5 -1.8746997283273221e-31
+12.499999999999998 12.500000000000002 1.5308084989341913e-15
+25.0 12.500000000000004 3.061616997868383e-15
+37.5 12.500000000000005 4.592425496802574e-15
+-37.5 24.999999999999996 -4.592425496802574e-15
+-25.000000000000004 24.999999999999996 -3.0616169978683834e-15
+-12.500000000000004 25.0 -1.530808498934192e-15
+-3.061616997868383e-15 25.0 -3.7493994566546442e-31
+12.499999999999996 25.0 1.5308084989341911e-15
+24.999999999999996 25.000000000000004 3.0616169978683826e-15
+37.5 25.000000000000004 4.592425496802574e-15
+-37.50000000000001 37.49999999999999 -4.592425496802575e-15
+-25.000000000000004 37.5 -3.0616169978683834e-15
+-12.500000000000005 37.5 -1.5308084989341921e-15
+-4.592425496802574e-15 37.5 -5.624099184981966e-31
+12.499999999999995 37.5 1.530808498934191e-15
+24.999999999999996 37.5 3.0616169978683826e-15
+37.49999999999999 37.50000000000001 4.5924254968025736e-15
+-50.00000000000001 49.99999999999999 -1.0000000000000062
+-50.00000000000001 37.49999999999999 -1.0000000000000062
+-50.0 24.999999999999993 -1.0000000000000062
+-50.0 12.499999999999995 -1.0000000000000062
+-50.0 -6.123233995736766e-15 -1.0000000000000062
+-50.0 -12.500000000000005 -1.0000000000000062
+-50.0 -25.000000000000007 -1.0000000000000062
+-49.99999999999999 -37.50000000000001 -1.0000000000000062
+-49.99999999999999 -50.00000000000001 -1.0000000000000062
+-37.50000000000001 49.99999999999999 -1.0000000000000047
+-25.000000000000007 50.0 -1.000000000000003
+-12.500000000000005 50.0 -1.0000000000000016
+-6.000769315822031e-15 50.0 -1.0
+12.499999999999995 50.0 -0.9999999999999984
+24.999999999999993 50.0 -0.9999999999999969
+37.49999999999999 50.00000000000001 -0.9999999999999954
+49.99999999999999 50.00000000000001 -0.9999999999999939
+49.99999999999999 37.50000000000001 -0.9999999999999939
+50.0 25.000000000000007 -0.9999999999999939
+50.0 12.500000000000005 -0.9999999999999939
+50.0 6.123233995736766e-15 -0.9999999999999939
+50.0 -12.499999999999995 -0.9999999999999939
+50.0 -24.999999999999993 -0.9999999999999939
+50.00000000000001 -37.49999999999999 -0.9999999999999939
+50.00000000000001 -49.99999999999999 -0.9999999999999939
+-37.49999999999999 -50.00000000000001 -1.0000000000000047
+-24.999999999999993 -50.0 -1.000000000000003
+-12.499999999999995 -50.0 -1.0000000000000016
+6.245698675651501e-15 -50.0 -1.0
+12.500000000000005 -50.0 -0.9999999999999984
+25.000000000000007 -50.0 -0.9999999999999969
+37.50000000000001 -49.99999999999999 -0.9999999999999954
+-37.49999999999999 -37.50000000000001 -1.0000000000000047
+-24.999999999999996 -37.5 -1.000000000000003
+-12.499999999999995 -37.5 -1.0000000000000016
+4.7148901767173095e-15 -37.5 -1.0
+12.500000000000005 -37.5 -0.9999999999999984
+25.000000000000004 -37.5 -0.9999999999999969
+37.50000000000001 -37.49999999999999 -0.9999999999999954
+-37.5 -25.000000000000004 -1.0000000000000047
+-24.999999999999996 -25.000000000000004 -1.000000000000003
+-12.499999999999996 -25.0 -1.0000000000000016
+3.184081677783118e-15 -25.0 -1.0
+12.500000000000004 -25.0 -0.9999999999999984
+25.000000000000004 -24.999999999999996 -0.9999999999999969
+37.5 -24.999999999999996 -0.9999999999999954
+-37.5 -12.500000000000005 -1.0000000000000047
+-25.0 -12.500000000000004 -1.000000000000003
+-12.499999999999998 -12.500000000000002 -1.0000000000000016
+1.6532731788489269e-15 -12.5 -1.0
+12.500000000000002 -12.499999999999998 -0.9999999999999984
+25.0 -12.499999999999996 -0.9999999999999969
+37.5 -12.499999999999995 -0.9999999999999954
+-37.5 -4.592425496802574e-15 -1.0000000000000047
+-25.0 -3.061616997868383e-15 -1.000000000000003
+-12.5 -1.5308084989341915e-15 -1.0000000000000016
+1.2246467991473532e-16 0.0 -1.0
+12.5 1.5308084989341915e-15 -0.9999999999999984
+25.0 3.061616997868383e-15 -0.9999999999999969
+37.5 4.592425496802574e-15 -0.9999999999999954
+-37.5 12.499999999999995 -1.0000000000000047
+-25.0 12.499999999999996 -1.000000000000003
+-12.500000000000002 12.499999999999998 -1.0000000000000016
+-1.4083438190194562e-15 12.5 -1.0
+12.499999999999998 12.500000000000002 -0.9999999999999984
+25.0 12.500000000000004 -0.9999999999999969
+37.5 12.500000000000005 -0.9999999999999954
+-37.5 24.999999999999996 -1.0000000000000047
+-25.000000000000004 24.999999999999996 -1.000000000000003
+-12.500000000000004 25.0 -1.0000000000000016
+-2.939152317953648e-15 25.0 -1.0
+12.499999999999996 25.0 -0.9999999999999984
+24.999999999999996 25.000000000000004 -0.9999999999999969
+37.5 25.000000000000004 -0.9999999999999954
+-37.50000000000001 37.49999999999999 -1.0000000000000047
+-25.000000000000004 37.5 -1.000000000000003
+-12.500000000000005 37.5 -1.0000000000000016
+-4.469960816887839e-15 37.5 -1.0
+12.499999999999995 37.5 -0.9999999999999984
+24.999999999999996 37.5 -0.9999999999999969
+37.49999999999999 37.50000000000001 -0.9999999999999954
diff --git a/regression_tests/default/output/sensitivities/exp-np4.in b/regression_tests/default/output/sensitivities/exp-np4.in
new file mode 100755
index 000000000..6645fe223
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/exp-np4.in
@@ -0,0 +1 @@
+EXTERNAL_FILE exp.in
diff --git a/regression_tests/default/output/sensitivities/exp.in b/regression_tests/default/output/sensitivities/exp.in
new file mode 100755
index 000000000..768dbdba0
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/exp.in
@@ -0,0 +1,19 @@
+#Output permeability and pressure sensitivities in hdf5 format using an 
+#explicit grid
+
+EXTERNAL_FILE pm.txt
+
+#=========================== discretization ===================================
+GRID
+  TYPE UNSTRUCTURED_EXPLICIT ./64.uge
+  UPWIND_FRACTION_METHOD ABSOLUTE_DISTANCE
+END
+REGION ymin
+  FILE ./ymin.ex
+END
+REGION ymax
+  FILE ./ymax.ex
+END
+
+
+EXTERNAL_FILE subsurface_card.txt
diff --git a/regression_tests/default/output/sensitivities/generate_dataset.py b/regression_tests/default/output/sensitivities/generate_dataset.py
new file mode 100644
index 000000000..dc2d5bc11
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/generate_dataset.py
@@ -0,0 +1,13 @@
+import numpy as np
+import h5py
+
+if __name__ == "__main__":
+  #read permeability from csv
+  perm_data = np.genfromtxt("permeability_field.txt", comments='#')
+  cell_ids, perm_field = perm_data[:,0], perm_data[:,1]
+  #create dataset
+  out = h5py.File("permeability.h5", 'w')
+  out.create_dataset("Cell Ids", data=cell_ids)
+  out.create_dataset("permeability", data=perm_field)
+  out.close()
+    
diff --git a/regression_tests/default/output/sensitivities/imp-np4.in b/regression_tests/default/output/sensitivities/imp-np4.in
new file mode 100755
index 000000000..e1edfb9b0
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/imp-np4.in
@@ -0,0 +1 @@
+EXTERNAL_FILE imp.in
diff --git a/regression_tests/default/output/sensitivities/imp.in b/regression_tests/default/output/sensitivities/imp.in
new file mode 100755
index 000000000..5fda16cee
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/imp.in
@@ -0,0 +1,18 @@
+#Output permeability and pressure sensitivities in hdf5 format using an 
+#implicit grid
+
+EXTERNAL_FILE pm.txt
+
+#=========================== discretization ===================================
+GRID
+  TYPE UNSTRUCTURED ./64.ugi
+END
+REGION ymin
+  FILE ./ymin.ss
+END
+REGION ymax
+  FILE ./ymax.ss
+END
+
+
+EXTERNAL_FILE subsurface_card.txt
diff --git a/regression_tests/default/output/sensitivities/permeability_field.txt b/regression_tests/default/output/sensitivities/permeability_field.txt
new file mode 100644
index 000000000..9e33388c9
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/permeability_field.txt
@@ -0,0 +1,65 @@
+#cell_id permeability
+1 3.10675414E-11
+2 8.24592025E-11
+3 5.43670756E-12
+4 6.72391459E-12
+5 6.55363599E-11
+6 1.85234955E-11
+7 4.77071216E-11
+8 2.45885393E-11
+9 4.68845114E-12
+10 6.87668692E-11
+11 1.38171982E-11
+12 7.42298573E-11
+13 7.84574707E-11
+14 4.92252188E-11
+15 8.42334973E-11
+16 5.07046663E-11
+17 2.67303995E-11
+18 6.93137044E-11
+19 3.88874196E-11
+20 2.73942228E-11
+21 3.09098298E-11
+22 1.66393822E-12
+23 4.19890963E-11
+24 7.68014015E-11
+25 2.04149102E-11
+26 6.76201521E-11
+27 1.20230426E-11
+28 2.61027892E-11
+29 7.11252678E-11
+30 8.52953511E-11
+31 5.20947923E-11
+32 6.87622936E-11
+33 1.78433021E-11
+34 3.28126933E-11
+35 3.90539353E-11
+36 3.40058727E-11
+37 6.81874857E-11
+38 6.18317948E-11
+39 6.13311312E-11
+40 2.22073467E-11
+41 1.98734152E-11
+42 1.39861243E-11
+43 8.9723508E-11
+44 9.29169711E-12
+45 3.28439705E-11
+46 5.70753587E-11
+47 2.10830313E-11
+48 7.72096426E-11
+49 4.37144386E-11
+50 8.20645075E-11
+51 2.54740734E-11
+52 4.57148037E-12
+53 8.37153879E-11
+54 3.62246875E-11
+55 1.80159745E-11
+56 8.61671284E-11
+57 7.89434729E-11
+58 8.05371982E-11
+59 2.12779591E-12
+60 3.19622792E-11
+61 5.2275367E-11
+62 7.09340285E-11
+63 2.31906236E-11
+64 2.06022077E-11
diff --git a/regression_tests/default/output/sensitivities/pm.txt b/regression_tests/default/output/sensitivities/pm.txt
new file mode 100644
index 000000000..ca7a002d0
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/pm.txt
@@ -0,0 +1,13 @@
+SIMULATION
+  SIMULATION_TYPE SUBSURFACE
+  PROCESS_MODELS
+    SUBSURFACE_FLOW flow
+      MODE RICHARDS
+    /
+    SENSITIVITY_ANALYSIS sensitivity
+      SENSITIVITY_FLOW
+    /
+  /
+END
+
+SUBSURFACE
diff --git a/regression_tests/default/output/sensitivities/post_exp-np4.py b/regression_tests/default/output/sensitivities/post_exp-np4.py
new file mode 100644
index 000000000..65c1a197a
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/post_exp-np4.py
@@ -0,0 +1,3 @@
+from post_process_sensitivities import post_process
+
+post_process("exp-np4")
diff --git a/regression_tests/default/output/sensitivities/post_exp.py b/regression_tests/default/output/sensitivities/post_exp.py
new file mode 100644
index 000000000..df17f5d2a
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/post_exp.py
@@ -0,0 +1,3 @@
+from post_process_sensitivities import post_process
+
+post_process("exp")
diff --git a/regression_tests/default/output/sensitivities/post_imp-np4.py b/regression_tests/default/output/sensitivities/post_imp-np4.py
new file mode 100644
index 000000000..cf8f07592
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/post_imp-np4.py
@@ -0,0 +1,3 @@
+from post_process_sensitivities import post_process
+
+post_process("imp-np4")
diff --git a/regression_tests/default/output/sensitivities/post_imp.py b/regression_tests/default/output/sensitivities/post_imp.py
new file mode 100644
index 000000000..205ace5d0
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/post_imp.py
@@ -0,0 +1,3 @@
+from post_process_sensitivities import post_process
+
+post_process("imp")
diff --git a/regression_tests/default/output/sensitivities/post_process_sensitivities.py b/regression_tests/default/output/sensitivities/post_process_sensitivities.py
new file mode 100644
index 000000000..cca084875
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/post_process_sensitivities.py
@@ -0,0 +1,28 @@
+import numpy as np
+import h5py
+
+
+def post_process(f):
+
+  src = h5py.File(f+"-sensitivity-flow.h5",'r')
+  
+  datasets = ["Permeability","Pressure"] 
+  rows = np.array(src["Mat Structure/Row Indices"])
+  cols = np.array(src["Mat Structure/Column Indices"])
+  indexes = np.zeros((len(rows),2),dtype='i8')
+  count = 0
+  for i,j in zip(rows,cols):
+    indexes[count] = i,j
+    count += 1
+  order = np.lexsort((indexes[:,1],indexes[:,0]))
+
+  for name in datasets:
+    data = np.array(src[f'Time:  1.00000E+02 y/{name} []'])
+    out = open(f"sensitivity-{name.lower()}.csv",'w')
+    for i in order:
+      out.write(f"{rows[i]} {indexes[i][1]}  {data[i]:.6e}\n")
+    out.close()
+  
+  src.close()
+  
+  
diff --git a/regression_tests/default/output/sensitivities/post_struct.py b/regression_tests/default/output/sensitivities/post_struct.py
new file mode 100644
index 000000000..630d6708b
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/post_struct.py
@@ -0,0 +1,3 @@
+from post_process_sensitivities import post_process
+
+post_process("struct")
diff --git a/regression_tests/default/output/sensitivities/sensitivities.cfg b/regression_tests/default/output/sensitivities/sensitivities.cfg
new file mode 100644
index 000000000..9ff8ab44a
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/sensitivities.cfg
@@ -0,0 +1,49 @@
+# Regression test that compare the sensitivity outputted in HDF5 for different
+# grid format in serial and in parallel.
+
+[suites]
+standard = struct imp exp 
+standard_parallel = struct-np4 imp-np4 exp-np4
+
+[default-test-criteria]
+# default criteria for all tests, can be overwritten by specific tests
+
+[struct]
+python_setup_script = generate_dataset.py
+skip_check_regression = True
+python_post_process_script = post_struct.py
+diff_ascii_output = sensitivity-pressure.csv sensitivity-permeability.csv
+
+[imp]
+python_setup_script = generate_dataset.py
+skip_check_regression = True
+python_post_process_script = post_imp.py
+diff_ascii_output = sensitivity-pressure.csv sensitivity-permeability.csv
+
+[exp]
+python_setup_script = generate_dataset.py
+skip_check_regression = True
+python_post_process_script = post_exp.py
+diff_ascii_output = sensitivity-pressure.csv sensitivity-permeability.csv
+
+[struct-np4]
+np = 4
+python_setup_script = generate_dataset.py
+skip_check_regression = True
+python_post_process_script = post_struct.py
+diff_ascii_output = sensitivity-pressure.csv sensitivity-permeability.csv
+
+[imp-np4]
+np = 4
+python_setup_script = generate_dataset.py
+skip_check_regression = True
+python_post_process_script = post_imp.py
+diff_ascii_output = sensitivity-pressure.csv sensitivity-permeability.csv
+
+[exp-np4]
+np = 4
+python_setup_script = generate_dataset.py
+skip_check_regression = True
+python_post_process_script = post_exp.py
+diff_ascii_output = sensitivity-pressure.csv sensitivity-permeability.csv
+
diff --git a/regression_tests/default/output/sensitivities/sensitivity-permeability.csv.gold b/regression_tests/default/output/sensitivities/sensitivity-permeability.csv.gold
new file mode 100644
index 000000000..de21b7001
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/sensitivity-permeability.csv.gold
@@ -0,0 +1,288 @@
+1 1  7.419500e+05
+1 2  1.284463e+05
+1 9  -7.176935e+06
+2 1  -9.052792e+05
+2 2  -7.088222e+05
+2 3  2.876341e+07
+2 10  -1.014225e+06
+3 2  -1.249263e+05
+3 3  -1.211811e+07
+3 4  1.173729e+07
+3 11  -2.026864e+05
+4 3  -1.795504e+07
+4 4  1.199511e+07
+4 5  3.355810e+05
+4 12  -6.700895e+04
+5 4  -3.190589e+07
+5 5  -2.686852e+06
+5 6  3.669743e+07
+5 13  -3.684674e+06
+6 5  -2.930044e+06
+6 6  1.288837e+06
+6 7  6.116390e+06
+6 14  -2.510625e+06
+7 6  -4.058887e+07
+7 7  4.461570e+07
+7 8  -1.980410e+07
+7 15  -1.053975e+07
+8 7  5.259146e+06
+8 8  -4.066368e+05
+8 16  -4.751176e+06
+9 1  1.633292e+05
+9 9  7.746247e+05
+9 10  3.179337e+04
+9 17  -4.072794e+05
+10 2  7.053022e+05
+10 9  -6.845653e+06
+10 10  -1.579169e+06
+10 11  2.326024e+07
+10 18  -3.445020e+06
+11 3  1.309729e+06
+11 10  -9.384408e+05
+11 11  1.599809e+06
+11 12  1.269118e+06
+11 19  -1.513775e+06
+12 4  8.173493e+06
+12 11  -3.665363e+07
+12 12  4.615442e+06
+12 13  7.256151e+06
+12 20  -1.681367e+07
+13 5  5.281314e+06
+13 12  -8.106431e+06
+13 13  1.261409e+05
+13 14  1.682424e+07
+13 21  -1.884488e+07
+14 6  1.773814e+07
+14 13  -6.621294e+06
+14 14  -1.941612e+06
+14 15  4.240638e+06
+14 22  -4.248793e+07
+15 7  3.286651e+07
+15 14  -1.242051e+07
+15 15  2.748435e+05
+15 16  -3.664375e+06
+15 23  -1.890799e+07
+16 8  2.021073e+07
+16 15  1.327450e+06
+16 16  -3.885786e+06
+16 24  -5.360694e+06
+17 9  1.324796e+07
+17 17  1.771262e+06
+17 18  9.458740e+05
+17 25  -8.571315e+06
+18 10  3.500042e+06
+18 17  -6.362870e+06
+18 18  -4.653872e+05
+18 19  1.042277e+07
+18 26  -6.561061e+06
+19 11  1.199627e+07
+19 18  -3.279753e+06
+19 19  -3.350859e+06
+19 20  1.448431e+07
+19 27  -1.704475e+07
+20 12  2.288880e+06
+20 19  -7.186578e+06
+20 20  3.718521e+06
+20 21  5.650737e+06
+20 28  -6.394250e+06
+21 13  2.923676e+06
+21 20  -7.194598e+06
+21 21  2.087580e+06
+21 22  3.222901e+07
+21 29  -2.114401e+06
+22 14  4.850192e+04
+22 21  -9.331218e+04
+22 22  -1.339504e+05
+22 23  4.954061e+04
+22 30  -1.595646e+04
+23 15  4.696816e+06
+23 22  -3.157628e+07
+23 23  3.840568e+06
+23 24  -1.068172e+05
+23 31  -9.523229e+06
+24 16  1.230134e+07
+24 23  3.574650e+05
+24 24  -1.043707e+06
+24 32  -8.123138e+06
+25 17  4.998888e+06
+25 25  4.598607e+06
+25 26  7.133427e+05
+25 33  -1.545158e+07
+26 18  6.244286e+06
+26 25  -7.830478e+06
+26 26  2.040533e+06
+26 27  1.571730e+07
+26 34  -1.828366e+07
+27 19  1.628442e+06
+27 26  -4.965368e+05
+27 27  -4.151112e+06
+27 28  4.662814e+06
+27 35  -2.601644e+06
+28 20  5.805438e+06
+28 27  -2.198637e+07
+28 28  6.303405e+06
+28 29  1.941101e+06
+28 36  -5.800917e+06
+29 21  1.119987e+07
+29 28  -1.441860e+07
+29 29  7.597119e+05
+29 30  3.146641e+06
+29 37  -4.286172e+06
+30 22  4.196916e+07
+30 29  -4.525738e+06
+30 30  -1.039042e+06
+30 31  1.152530e+07
+30 38  -4.199610e+06
+31 23  1.466042e+07
+31 30  -4.298187e+06
+31 31  -3.218043e+06
+31 32  3.303363e+06
+31 39  -5.029828e+06
+32 24  6.511219e+06
+32 31  -5.756099e+06
+32 32  2.932877e+06
+32 40  -1.809997e+07
+33 25  1.180319e+07
+33 33  2.325078e+06
+33 34  3.375209e+06
+33 41  -1.978442e+07
+34 26  4.303722e+06
+34 33  -1.141727e+07
+34 34  1.167423e+07
+34 35  3.159296e+06
+34 42  -4.245424e+07
+35 27  2.746493e+07
+35 34  -4.475833e+06
+35 35  -1.023677e+07
+35 36  1.803075e+07
+35 43  -4.421943e+06
+36 28  9.846633e+06
+36 35  -1.366980e+07
+36 36  4.605516e+06
+36 37  4.567555e+06
+36 44  -2.057922e+07
+37 29  3.939326e+06
+37 36  -1.837090e+07
+37 37  2.824240e+06
+37 38  5.272398e+06
+37 45  -5.301246e+06
+38 30  2.206545e+06
+38 37  -4.335122e+06
+38 38  4.418896e+05
+38 39  4.674773e+06
+38 46  -3.620375e+06
+39 31  6.972071e+06
+39 38  -4.599355e+06
+39 39  -3.793139e+04
+39 40  5.367075e+06
+39 47  -9.282139e+06
+40 32  1.886898e+06
+40 39  -7.033407e+05
+40 40  -1.864468e+05
+40 48  -1.068195e+06
+41 33  2.454377e+07
+41 41  -1.229047e+07
+41 42  1.008259e+07
+41 49  -7.658229e+06
+42 34  7.710054e+06
+42 41  -4.992827e+06
+42 42  -4.191107e+06
+42 43  9.709679e+05
+42 50  -2.221933e+06
+43 35  2.334892e+07
+43 42  -3.998891e+07
+43 43  8.895516e+05
+43 44  6.393953e+07
+43 51  -4.029813e+07
+44 36  1.535548e+06
+44 43  -6.851638e+05
+44 44  -6.653485e+06
+44 45  3.061412e+06
+44 52  -6.469891e+06
+45 37  1.229499e+06
+45 44  -3.827239e+07
+45 45  5.650370e+06
+45 46  2.323324e+06
+45 53  -5.550243e+05
+46 38  3.084678e+06
+46 45  -7.017989e+06
+46 46  5.785572e+05
+46 47  8.096931e+06
+46 54  -4.526099e+06
+47 39  1.096327e+06
+47 46  -1.104306e+06
+47 47  1.899551e+06
+47 48  2.436581e+05
+47 55  -3.499721e+06
+48 40  1.291934e+07
+48 47  -3.269684e+06
+48 48  -1.099033e+06
+48 56  -1.544344e+06
+49 41  3.706772e+07
+49 49  -8.101213e+06
+49 50  3.443861e+05
+49 57  -5.203123e+06
+50 42  7.655166e+07
+50 49  -1.214057e+06
+50 50  -1.081483e+07
+50 51  5.349018e+07
+50 58  -1.852722e+07
+51 43  3.246587e+06
+51 50  -5.151476e+06
+51 51  -1.029542e+07
+51 52  9.337294e+07
+51 59  -1.553786e+07
+52 44  1.565571e+06
+52 51  -3.004941e+06
+52 52  5.903075e+06
+52 53  1.886172e+05
+52 60  6.029602e+05
+53 45  3.607453e+06
+53 52  -6.330927e+07
+53 53  7.034181e+05
+53 54  6.000791e+06
+53 61  -2.016567e+06
+54 46  1.822800e+06
+54 53  -1.123144e+06
+54 54  -2.351658e+06
+54 55  6.797370e+06
+54 62  -6.668233e+05
+55 47  2.555341e+06
+55 54  -1.680743e+06
+55 55  1.056387e+06
+55 56  3.114497e+05
+55 63  -1.674640e+06
+56 48  1.923570e+06
+56 55  -7.129180e+06
+56 56  9.500442e+05
+56 64  -4.950841e+06
+57 49  1.697350e+07
+57 57  -2.170615e+06
+57 58  -7.084721e+06
+58 50  1.784385e+07
+58 57  7.373738e+06
+58 58  -2.910708e+07
+58 59  1.389598e+08
+59 51  1.083147e+05
+59 58  -9.690457e+04
+59 59  -8.560184e+06
+59 60  7.266715e+05
+60 52  -2.949686e+07
+60 59  -1.641094e+08
+60 60  8.891015e+06
+60 61  3.819927e+06
+61 53  7.861327e+05
+61 60  -1.022065e+07
+61 61  2.107993e+06
+61 62  2.123959e+06
+62 54  2.557710e+06
+62 61  -3.911353e+06
+62 62  -7.099236e+05
+62 63  6.994373e+06
+63 55  2.775143e+06
+63 62  -7.472126e+05
+63 63  -2.756725e+06
+63 64  3.247677e+06
+64 56  2.828503e+05
+64 63  -2.563007e+06
+64 64  1.703164e+06
diff --git a/regression_tests/default/output/sensitivities/sensitivity-pressure.csv.gold b/regression_tests/default/output/sensitivities/sensitivity-pressure.csv.gold
new file mode 100644
index 000000000..5a6674241
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/sensitivity-pressure.csv.gold
@@ -0,0 +1,288 @@
+1 1  3.311944e-06
+1 2  -2.805482e-06
+1 9  -5.064622e-07
+2 1  -2.805482e-06
+2 2  8.101369e-06
+2 3  -6.341121e-07
+2 10  -4.661775e-06
+3 2  -6.341121e-07
+3 3  1.492907e-06
+3 4  -3.737335e-07
+3 11  -4.850614e-07
+4 3  -3.737335e-07
+4 4  1.898420e-06
+4 5  -7.581664e-07
+4 12  -7.665197e-07
+5 4  -7.581664e-07
+5 5  6.993111e-06
+5 6  -1.795462e-06
+5 13  -4.439483e-06
+6 5  -1.795462e-06
+6 6  7.430533e-06
+6 7  -1.658849e-06
+6 14  -1.673282e-06
+7 6  -1.658849e-06
+7 7  1.339392e-05
+7 8  -2.017267e-06
+7 15  -3.786598e-06
+8 7  -2.017267e-06
+8 8  4.075926e-06
+8 16  -2.058659e-06
+9 1  -5.064622e-07
+9 9  1.548062e-06
+9 10  -5.456888e-07
+9 17  -4.959115e-07
+10 2  -4.661775e-06
+10 9  -5.456888e-07
+10 10  1.092954e-05
+10 11  -1.430417e-06
+10 18  -4.291661e-06
+11 3  -4.850614e-07
+11 10  -1.430417e-06
+11 11  4.631205e-06
+11 12  -1.448250e-06
+11 19  -1.267477e-06
+12 4  -7.665197e-07
+12 11  -1.448250e-06
+12 12  9.444572e-06
+12 13  -4.742087e-06
+12 20  -2.487715e-06
+13 5  -4.439483e-06
+13 12  -4.742087e-06
+13 13  1.569889e-05
+13 14  -3.760534e-06
+13 21  -2.756786e-06
+14 6  -1.673282e-06
+14 13  -3.760534e-06
+14 14  9.496570e-06
+14 15  -3.862648e-06
+14 22  -2.001056e-07
+15 7  -3.786598e-06
+15 14  -3.862648e-06
+15 15  1.506809e-05
+15 16  -3.935116e-06
+15 23  -3.483725e-06
+16 8  -2.058659e-06
+16 15  -3.935116e-06
+16 16  9.790822e-06
+16 24  -3.797046e-06
+17 9  -4.959115e-07
+17 17  4.333310e-06
+17 18  -2.398355e-06
+17 25  -1.439044e-06
+18 10  -4.291661e-06
+18 17  -2.398355e-06
+18 18  1.404256e-05
+18 19  -3.097106e-06
+18 26  -4.255436e-06
+19 11  -1.267477e-06
+19 18  -3.097106e-06
+19 19  7.504526e-06
+19 20  -1.998179e-06
+19 27  -1.141763e-06
+20 12  -2.487715e-06
+20 19  -1.998179e-06
+20 20  7.953263e-06
+20 21  -1.805579e-06
+20 28  -1.661789e-06
+21 13  -2.756786e-06
+21 20  -1.805579e-06
+21 21  7.437407e-06
+21 22  -1.963023e-07
+21 29  -2.678740e-06
+22 14  -2.001056e-07
+22 21  -1.963023e-07
+22 22  7.983035e-07
+22 23  -1.989843e-07
+22 30  -2.029113e-07
+23 15  -3.483725e-06
+23 22  -1.989843e-07
+23 23  9.948301e-06
+23 24  -3.375076e-06
+23 31  -2.890515e-06
+24 16  -3.797046e-06
+24 23  -3.375076e-06
+24 24  1.168264e-05
+24 32  -4.510514e-06
+25 17  -1.439044e-06
+25 25  4.572307e-06
+25 26  -1.949519e-06
+25 33  -1.183744e-06
+26 18  -4.255436e-06
+26 25  -1.949519e-06
+26 26  1.022071e-05
+26 27  -1.269116e-06
+26 34  -2.746641e-06
+27 19  -1.141763e-06
+27 26  -1.269116e-06
+27 27  4.577185e-06
+27 28  -1.023391e-06
+27 35  -1.142914e-06
+28 20  -1.661789e-06
+28 27  -1.023391e-06
+28 28  6.895131e-06
+28 29  -2.373990e-06
+28 36  -1.835961e-06
+29 21  -2.678740e-06
+29 28  -2.373990e-06
+29 29  1.420269e-05
+29 30  -4.821863e-06
+29 37  -4.328101e-06
+30 22  -2.029113e-07
+30 29  -4.821863e-06
+30 30  1.350228e-05
+30 31  -4.020904e-06
+30 38  -4.456604e-06
+31 23  -2.890515e-06
+31 30  -4.020904e-06
+31 31  1.409843e-05
+31 32  -3.684955e-06
+31 39  -3.502052e-06
+32 24  -4.510514e-06
+32 31  -3.684955e-06
+32 32  1.028241e-05
+32 40  -2.086941e-06
+33 25  -1.183744e-06
+33 33  3.789597e-06
+33 34  -1.436964e-06
+33 41  -1.168890e-06
+34 26  -2.746641e-06
+34 33  -1.436964e-06
+34 34  7.619638e-06
+34 35  -2.216864e-06
+34 42  -1.219169e-06
+35 27  -1.142914e-06
+35 34  -2.216864e-06
+35 35  9.002647e-06
+35 36  -2.259955e-06
+35 43  -3.382913e-06
+36 28  -1.835961e-06
+36 35  -2.259955e-06
+36 36  7.824155e-06
+36 37  -2.820951e-06
+36 44  -9.072878e-07
+37 29  -4.328101e-06
+37 36  -2.820951e-06
+37 37  1.393647e-05
+37 38  -4.031516e-06
+37 45  -2.755899e-06
+38 30  -4.456604e-06
+38 37  -4.031516e-06
+38 38  1.600600e-05
+38 39  -3.828005e-06
+38 46  -3.689879e-06
+39 31  -3.502052e-06
+39 38  -3.828005e-06
+39 39  1.130766e-05
+39 40  -2.026986e-06
+39 47  -1.950616e-06
+40 32  -2.086941e-06
+40 39  -2.026986e-06
+40 40  6.258136e-06
+40 48  -2.144210e-06
+41 33  -1.168890e-06
+41 41  3.888041e-06
+41 42  -1.020583e-06
+41 49  -1.698568e-06
+42 34  -1.219169e-06
+42 41  -1.020583e-06
+42 42  5.229721e-06
+42 43  -1.504334e-06
+42 50  -1.485635e-06
+43 35  -3.382913e-06
+43 42  -1.504334e-06
+43 43  8.400762e-06
+43 44  -1.046789e-06
+43 51  -2.466726e-06
+44 36  -9.072878e-07
+44 43  -1.046789e-06
+44 44  3.235461e-06
+44 45  -9.004517e-07
+44 52  -3.809331e-07
+45 37  -2.755899e-06
+45 44  -9.004517e-07
+45 45  9.180946e-06
+45 46  -2.591856e-06
+45 53  -2.932739e-06
+46 38  -3.689879e-06
+46 45  -2.591856e-06
+46 46  1.095090e-05
+46 47  -1.914105e-06
+46 54  -2.755060e-06
+47 39  -1.950616e-06
+47 46  -1.914105e-06
+47 47  7.131429e-06
+47 48  -2.058937e-06
+47 55  -1.207771e-06
+48 40  -2.144210e-06
+48 47  -2.058937e-06
+48 48  9.265850e-06
+48 56  -5.062703e-06
+49 41  -1.698568e-06
+49 49  8.742395e-06
+49 50  -3.545945e-06
+49 57  -3.497882e-06
+50 42  -1.485635e-06
+50 49  -3.545945e-06
+50 50  1.250186e-05
+50 51  -2.416847e-06
+50 58  -5.053432e-06
+51 43  -2.466726e-06
+51 50  -2.416847e-06
+51 51  5.609594e-06
+51 52  -4.818753e-07
+51 59  -2.441459e-07
+52 44  -3.809331e-07
+52 51  -4.818753e-07
+52 52  1.898963e-06
+52 53  -5.389217e-07
+52 60  -4.972329e-07
+53 45  -2.932739e-06
+53 52  -5.389217e-07
+53 53  1.061595e-05
+53 54  -3.143441e-06
+53 61  -4.000853e-06
+54 46  -2.755060e-06
+54 53  -3.143441e-06
+54 54  1.037558e-05
+54 55  -1.495881e-06
+54 62  -2.981202e-06
+55 47  -1.207771e-06
+55 54  -1.495881e-06
+55 55  5.816726e-06
+55 56  -1.852515e-06
+55 63  -1.260559e-06
+56 48  -5.062703e-06
+56 55  -1.852515e-06
+56 56  8.982351e-06
+56 64  -2.067133e-06
+57 49  -3.497882e-06
+57 57  8.454259e-06
+57 58  -4.956377e-06
+58 50  -5.053432e-06
+58 57  -4.956377e-06
+58 58  2.028035e-05
+58 59  -2.577297e-07
+59 51  -2.441459e-07
+59 58  -2.577297e-07
+59 59  1.014442e-06
+59 60  -2.480272e-07
+60 52  -4.972329e-07
+60 59  -2.480272e-07
+60 60  3.211233e-06
+60 61  -2.465973e-06
+61 53  -4.000853e-06
+61 60  -2.465973e-06
+61 61  1.020851e-05
+61 62  -3.741687e-06
+62 54  -2.981202e-06
+62 61  -3.741687e-06
+62 62  8.895707e-06
+62 63  -2.172818e-06
+63 55  -1.260559e-06
+63 62  -2.172818e-06
+63 63  4.789761e-06
+63 64  -1.356384e-06
+64 56  -2.067133e-06
+64 63  -1.356384e-06
+64 64  3.423518e-06
diff --git a/regression_tests/default/output/sensitivities/struct-np4.in b/regression_tests/default/output/sensitivities/struct-np4.in
new file mode 100755
index 000000000..59acc93f3
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/struct-np4.in
@@ -0,0 +1 @@
+EXTERNAL_FILE struct.in
diff --git a/regression_tests/default/output/sensitivities/struct.in b/regression_tests/default/output/sensitivities/struct.in
new file mode 100755
index 000000000..99cf728b2
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/struct.in
@@ -0,0 +1,24 @@
+#Output permeability and pressure sensitivities in hdf5 format using an 
+#structured grid
+
+EXTERNAL_FILE pm.txt
+
+#=========================== discretization ===================================
+GRID
+  TYPE STRUCTURED
+  BOUNDS
+    -50. -50. -1.
+    50. 50. 0.
+  /
+  NXYZ 8 8 1
+END
+REGION ymin
+  BLOCK 6 7 1 1 1 1
+  FACE SOUTH
+END
+REGION ymax
+ BLOCK 2 3 8 8 1 1
+ FACE NORTH
+END
+
+EXTERNAL_FILE subsurface_card.txt
diff --git a/regression_tests/default/output/sensitivities/subsurface_card.txt b/regression_tests/default/output/sensitivities/subsurface_card.txt
new file mode 100644
index 000000000..81b4f499b
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/subsurface_card.txt
@@ -0,0 +1,111 @@
+
+#=========================== EOS ===================================
+EOS WATER
+  #simplified value for hydraulic conductivity computation
+  DENSITY CONSTANT 997.16d0 kg/m^3
+  VISCOSITY CONSTANT 8.904156d-4 Pa-s
+END
+
+
+#=========================== material properties ==============================
+DATASET permeability
+  FILENAME permeability.h5
+END
+
+MATERIAL_PROPERTY mater
+  ID 1
+  POROSITY 0.3
+  TORTUOSITY 0.1
+  SATURATION_FUNCTION default
+  PERMEABILITY
+    DATASET permeability
+  /
+END
+
+
+#=========================== characteristic curves ============================
+CHARACTERISTIC_CURVES default
+  DEFAULT
+END
+
+
+#=========================== output options ===================================
+OUTPUT
+  FORMAT HDF5
+  VARIABLES
+    LIQUID_PRESSURE
+    PERMEABILITY
+  /
+  NO_PRINT_INITIAL
+END
+
+
+#=========================== times ============================================
+TIME
+  FINAL_TIME 1e2 y
+  INITIAL_TIMESTEP_SIZE 100 y
+  MAXIMUM_TIMESTEP_SIZE 1e2 y
+END
+
+
+
+#=========================== regions ==========================================
+REGION all
+  COORDINATES
+    -1e6 -1e6 -1e6
+    1e6 1e6  1e6
+  /
+END
+
+
+
+#=========================== flow conditions ==================================
+FLOW_CONDITION initial
+  TYPE
+    PRESSURE hydrostatic
+  /
+  DATUM 0 0 10
+  GRADIENT 
+    PRESSURE -0.01 0. 0.
+  /
+  PRESSURE 101325.
+END
+
+
+
+#=========================== condition couplers ===============================
+# initial condition
+INITIAL_CONDITION
+  FLOW_CONDITION initial
+  REGION all
+END
+BOUNDARY_CONDITION west
+  FLOW_CONDITION initial
+  REGION ymin
+END
+BOUNDARY_CONDITION east
+  FLOW_CONDITION initial
+  REGION ymax
+END
+
+
+#=========================== stratigraphy couplers ============================
+STRATA
+  REGION all
+  MATERIAL mater
+END
+
+END_SUBSURFACE
+
+
+#=========================== sensitivity analysis =============================
+SENSITIVITY_FLOW
+  OUTPUT 
+    PERIODIC_TIMESTEP 1
+  /
+  VARIABLES
+    PRESSURE
+    PERMEABILITY
+  /
+  SENSITIVITY_OUTPUT_FORMAT HDF5
+END
diff --git a/regression_tests/default/output/sensitivities/ymax.ex b/regression_tests/default/output/sensitivities/ymax.ex
new file mode 100644
index 000000000..db9103a5f
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/ymax.ex
@@ -0,0 +1,3 @@
+CONNECTIONS 2
+58 -31.25 50.0 -0.5 12.5
+59 -18.75 50.0 -0.5 12.5
diff --git a/regression_tests/default/output/sensitivities/ymax.ss b/regression_tests/default/output/sensitivities/ymax.ss
new file mode 100644
index 000000000..89139ccaf
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/ymax.ss
@@ -0,0 +1,3 @@
+2
+Q 12 13 92 91 
+Q 13 14 93 92 
diff --git a/regression_tests/default/output/sensitivities/ymin.ex b/regression_tests/default/output/sensitivities/ymin.ex
new file mode 100644
index 000000000..16d696d03
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/ymin.ex
@@ -0,0 +1,3 @@
+CONNECTIONS 2
+6 18.75 -50.0 -0.5 12.5
+7 31.25 -50.0 -0.5 12.5
diff --git a/regression_tests/default/output/sensitivities/ymin.ss b/regression_tests/default/output/sensitivities/ymin.ss
new file mode 100644
index 000000000..5166f7b7c
--- /dev/null
+++ b/regression_tests/default/output/sensitivities/ymin.ss
@@ -0,0 +1,3 @@
+2
+Q 30 111 112 31 
+Q 31 112 113 32 
diff --git a/src/pflotran/connection.F90 b/src/pflotran/connection.F90
index 0c727960f..20255aeba 100644
--- a/src/pflotran/connection.F90
+++ b/src/pflotran/connection.F90
@@ -11,8 +11,11 @@ module Connection_module
     PetscInt :: id
     PetscInt :: itype                  ! connection type (boundary, internal, source sink
     PetscInt :: num_connections
+    PetscInt :: num_connections_unique ! number of connections to be treat uniquely
     PetscInt :: offset
     PetscInt, pointer :: local(:)      ! 1 if connection is local, 0 if connection is ghosted
+                                       ! -1 if ghosted but owned by the set uniquely
+                                       ! structured grid only
     PetscInt, pointer :: id_up(:)      ! list of ids of upwind cells
     PetscInt, pointer :: id_dn(:)      ! list of ids of downwind cells
     PetscInt, pointer :: id_up2(:)     ! list of ids of 2nd upwind cells
@@ -21,6 +24,7 @@ module Connection_module
                                        !   -1 = fraction upwind
                                        !   0 = magnitude of distance 
                                        !   1-3 = components of unit vector
+    PetscReal, pointer :: normal(:,:)  ! list of unit normal vectors,
     PetscReal, pointer :: intercp(:,:) ! x,y,z location of intercept between the line connecting
                                        ! upwind and downwind cells with the face shared by the cells
     PetscReal, pointer :: area(:)      ! list of areas of faces normal to distance vectors
@@ -76,6 +80,7 @@ function ConnectionCreate(num_connections,connection_itype)
   connection%itype = connection_itype
   connection%offset = 0
   connection%num_connections = num_connections
+  connection%num_connections_unique = 0
   nullify(connection%local)
   nullify(connection%id_up)
   nullify(connection%id_dn)
@@ -83,14 +88,17 @@ function ConnectionCreate(num_connections,connection_itype)
   nullify(connection%id_dn2)
   nullify(connection%face_id)
   nullify(connection%dist)
+  nullify(connection%normal)
   nullify(connection%intercp)
   nullify(connection%area)
   nullify(connection%cntr)
   select case(connection_itype)
     case(INTERNAL_CONNECTION_TYPE)
+      allocate(connection%local(num_connections))
       allocate(connection%id_up(num_connections))
       allocate(connection%id_dn(num_connections))
       allocate(connection%dist(-1:3,num_connections))
+      allocate(connection%normal(1:3,num_connections))
       allocate(connection%intercp(1:3,num_connections))
       allocate(connection%area(num_connections))
       allocate(connection%face_id(num_connections))
@@ -98,16 +106,19 @@ function ConnectionCreate(num_connections,connection_itype)
       connection%id_dn = 0
       connection%face_id = 0
       connection%dist = 0.d0
+      connection%normal = 0.d0
       connection%intercp = 0.d0
       connection%area = 0.d0
     case(BOUNDARY_CONNECTION_TYPE)
       allocate(connection%id_dn(num_connections))
       allocate(connection%dist(-1:3,num_connections))
+      allocate(connection%normal(1:3,num_connections))
       allocate(connection%intercp(1:3,num_connections))
       allocate(connection%area(num_connections))
       allocate(connection%face_id(num_connections))
       connection%id_dn = 0
       connection%dist = 0.d0
+      connection%normal = 0.d0
       connection%intercp = 0.d0
       connection%area = 0.d0
     case(SRC_SINK_CONNECTION_TYPE,INITIAL_CONNECTION_TYPE)
@@ -283,6 +294,7 @@ subroutine ConnectionDestroy(connection)
   call DeallocateArray(connection%id_dn2)
   call DeallocateArray(connection%face_id)
   call DeallocateArray(connection%dist)
+  call DeallocateArray(connection%normal)
   call DeallocateArray(connection%intercp)
   call DeallocateArray(connection%area)
   call DeallocateArray(connection%cntr)
diff --git a/src/pflotran/debug.F90 b/src/pflotran/debug.F90
index 8c699552a..442d053c2 100644
--- a/src/pflotran/debug.F90
+++ b/src/pflotran/debug.F90
@@ -19,6 +19,8 @@ module Debug_module
     PetscBool :: matview_Matrix
     PetscBool :: matview_Matrix_detailed
     PetscBool :: norm_Matrix
+    
+    PetscBool :: matview_perm_sensitivity
 
     PetscInt  :: output_format
     PetscBool :: verbose_filename
@@ -61,6 +63,7 @@ function DebugCreate()
   debug%matview_Matrix = PETSC_FALSE
   debug%matview_Matrix_detailed = PETSC_FALSE
   debug%norm_Matrix = PETSC_FALSE
+  debug%matview_perm_sensitivity = PETSC_FALSE
 
   debug%output_format = DEBUG_ASCII_FORMAT
   debug%verbose_filename = PETSC_FALSE
@@ -128,6 +131,8 @@ subroutine DebugRead(debug,input,option)
       case('PRINT_JACOBIAN_DETAILED','matview_Matrix_DETAILED', &
            'VIEW_JACOBIAN_DETAILED')
         debug%matview_Matrix_detailed = PETSC_TRUE
+      case ('PRINT_PERMEABILITY_SENSITIVITY')
+        debug%matview_perm_sensitivity = PETSC_TRUE
       case('PRINT_WAYPOINTS')
         debug%print_waypoints = PETSC_TRUE
       case('APPEND_COUNTS_TO_FILENAME','APPEND_COUNTS_TO_FILENAMES')
diff --git a/src/pflotran/factory_forward.F90 b/src/pflotran/factory_forward.F90
index 35a77f36a..36920acc1 100644
--- a/src/pflotran/factory_forward.F90
+++ b/src/pflotran/factory_forward.F90
@@ -289,6 +289,8 @@ subroutine FactoryForwardReadSimProcessModels(input,pm_master,option)
         call FactorySubsurfaceReadUFDDecayPM(input,option,new_pm)
       case('UFD_BIOSPHERE')
         call FactorySubsurfReadUFDBiospherePM(input,option,new_pm)
+      case('SENSITIVITY_ANALYSIS')
+        call FactorySubsurfaceReadSensitivityPM(input,option,new_pm)
       case('WIPP_SOURCE_SINK')
         option%io_buffer = 'Do not include the WIPP_SOURCE_SINK block &
           &unless you are running in WIPP_FLOW mode and intend to &
diff --git a/src/pflotran/factory_subsurface.F90 b/src/pflotran/factory_subsurface.F90
index c1da16aac..9e0ffbe10 100644
--- a/src/pflotran/factory_subsurface.F90
+++ b/src/pflotran/factory_subsurface.F90
@@ -3,7 +3,7 @@ module Factory_Subsurface_module
 #include "petsc/finclude/petscsys.h"
   use petscsys
   use Simulation_Subsurface_class
-
+  
   use PFLOTRAN_Constants_module
   use Utility_module, only : Equal
 
@@ -20,7 +20,8 @@ module Factory_Subsurface_module
             FactorySubsurfaceReadWasteFormPM, &
             FactorySubsurfaceReadUFDDecayPM, &
             FactorySubsurfReadUFDBiospherePM, &
-            FactorySubsurfReadGeophysicsPM
+            FactorySubsurfReadGeophysicsPM, &
+            FactorySubsurfaceReadSensitivityPM
 
 contains
 
@@ -58,7 +59,7 @@ subroutine FactorySubsurfaceInitPostPetsc(simulation)
   ! framework after to PETSc initialization
   !
   ! Author: Glenn Hammond
-  ! Date: 06/07/13
+  ! Date: 06/07/1
   !
 
   use Option_module
@@ -67,6 +68,7 @@ subroutine FactorySubsurfaceInitPostPetsc(simulation)
   use PM_Waste_Form_class
   use PM_UFD_Decay_class
   use PM_UFD_Biosphere_class
+  use PM_Sensitivity_Analysis_class
   use PM_Auxiliary_class
   use Realization_Subsurface_class
   use Simulation_Subsurface_class
@@ -83,6 +85,7 @@ subroutine FactorySubsurfaceInitPostPetsc(simulation)
   class(pm_ufd_decay_type), pointer :: pm_ufd_decay
   class(pm_ufd_biosphere_type), pointer :: pm_ufd_biosphere
   class(pm_base_type), pointer :: pm_geop
+  class(pm_sensitivity_type), pointer :: pm_sensitivity
   class(pm_auxiliary_type), pointer :: pm_auxiliary
   class(realization_subsurface_type), pointer :: realization
 
@@ -94,13 +97,15 @@ subroutine FactorySubsurfaceInitPostPetsc(simulation)
   nullify(pm_ufd_decay)
   nullify(pm_ufd_biosphere)
   nullify(pm_geop)
+  nullify(pm_sensitivity)
   nullify(pm_auxiliary)
 
   ! process command line arguments specific to subsurface
   call SubsurfInitCommandLineSettings(option)
 
   call ExtractPMsFromPMList(simulation,pm_flow,pm_tran,pm_waste_form,&
-                            pm_ufd_decay,pm_ufd_biosphere,pm_geop,pm_auxiliary)
+                            pm_ufd_decay,pm_ufd_biosphere,pm_geop,&
+                            pm_sensitivity,pm_auxiliary)
 
   call SubsurfaceSetFlowMode(pm_flow,option)
   call SubsurfaceSetGeopMode(pm_geop,option)
@@ -114,8 +119,7 @@ subroutine FactorySubsurfaceInitPostPetsc(simulation)
   ! Setup linkages between PMCs
   call SetupPMCLinkages(simulation,pm_flow,pm_tran,pm_waste_form,&
                         pm_ufd_decay,pm_ufd_biosphere,pm_geop, &
-                        pm_auxiliary,realization)
-
+                        pm_sensitivity,pm_auxiliary,realization)
   ! SubsurfaceInitSimulation() must be called after pmc linkages are set above.
   call SubsurfaceInitSimulation(simulation)
 
@@ -127,7 +131,8 @@ end subroutine FactorySubsurfaceInitPostPetsc
 ! ************************************************************************** !
 
 subroutine ExtractPMsFromPMList(simulation,pm_flow,pm_tran,pm_waste_form,&
-                                pm_ufd_decay,pm_ufd_biosphere,pm_geop,pm_auxiliary)
+                                pm_ufd_decay,pm_ufd_biosphere,pm_geop,&
+                                pm_sensitivity,pm_auxiliary)
   !
   ! Extracts all possible PMs from the PM list
   !
@@ -143,6 +148,7 @@ subroutine ExtractPMsFromPMList(simulation,pm_flow,pm_tran,pm_waste_form,&
   use PM_UFD_Decay_class
   use PM_UFD_Biosphere_class
   use PM_ERT_class
+  use PM_Sensitivity_Analysis_class
   use PM_Auxiliary_class
   use Option_module
   use Simulation_Subsurface_class
@@ -158,6 +164,7 @@ subroutine ExtractPMsFromPMList(simulation,pm_flow,pm_tran,pm_waste_form,&
   class(pm_ufd_decay_type), pointer :: pm_ufd_decay
   class(pm_ufd_biosphere_type), pointer :: pm_ufd_biosphere
   class(pm_base_type), pointer :: pm_geop
+  class(pm_sensitivity_type), pointer :: pm_sensitivity
   class(pm_auxiliary_type), pointer :: pm_auxiliary
   class(pm_base_type), pointer :: cur_pm, prev_pm
 
@@ -168,6 +175,7 @@ subroutine ExtractPMsFromPMList(simulation,pm_flow,pm_tran,pm_waste_form,&
   nullify(pm_waste_form)
   nullify(pm_ufd_decay)
   nullify(pm_ufd_biosphere)
+  nullify(pm_sensitivity)
   nullify(pm_auxiliary)
 
   cur_pm => simulation%process_model_list
@@ -188,6 +196,8 @@ subroutine ExtractPMsFromPMList(simulation,pm_flow,pm_tran,pm_waste_form,&
         pm_ufd_biosphere => cur_pm
       class is(pm_ert_type)
         pm_geop => cur_pm
+      class is(pm_sensitivity_type)
+        pm_sensitivity => cur_pm
       class is(pm_auxiliary_type)
         pm_auxiliary => cur_pm
       class default
@@ -209,9 +219,10 @@ end subroutine ExtractPMsFromPMList
 
 ! ************************************************************************** !
 
-subroutine SetupPMCLinkages(simulation,pm_flow,pm_tran,pm_waste_form,&
+subroutine SetupPMCLinkages(simulation,pm_flow,pm_tran,pm_waste_form, &
                             pm_ufd_decay,pm_ufd_biosphere,pm_geop, &
-                            pm_auxiliary,realization)
+                            pm_sensitivity,pm_auxiliary, &
+                            realization)
   !
   ! Sets up all PMC linkages
   !
@@ -224,6 +235,7 @@ subroutine SetupPMCLinkages(simulation,pm_flow,pm_tran,pm_waste_form,&
   use PM_Waste_Form_class
   use PM_UFD_Decay_class
   use PM_UFD_Biosphere_class
+  use PM_Sensitivity_Analysis_class
   use PM_Auxiliary_class
   use Realization_Subsurface_class
   use Option_module
@@ -238,6 +250,7 @@ subroutine SetupPMCLinkages(simulation,pm_flow,pm_tran,pm_waste_form,&
   class(pm_ufd_decay_type), pointer :: pm_ufd_decay
   class(pm_ufd_biosphere_type), pointer :: pm_ufd_biosphere
   class(pm_base_type), pointer :: pm_geop
+  class(pm_sensitivity_type), pointer :: pm_sensitivity
   class(pm_auxiliary_type), pointer :: pm_auxiliary
   class(realization_subsurface_type), pointer :: realization
 
@@ -276,6 +289,11 @@ subroutine SetupPMCLinkages(simulation,pm_flow,pm_tran,pm_waste_form,&
     call AddPMCUDFBiosphere(simulation,pm_ufd_biosphere,'PMC3PUFDBiosphere',&
                             associated(pm_ufd_decay),realization,input,option)
 
+  if (associated(pm_sensitivity)) &
+    call AddPMCSensitivityAnalysis(simulation,pm_sensitivity,&
+                                   'PMC3PSensitivityAnalysis',&
+                                   realization,input,option)
+
   if (associated(pm_auxiliary)) &
     call AddPMCAuxiliary(simulation,pm_auxiliary,'SALINITY',realization,option)
 
@@ -744,6 +762,84 @@ end subroutine AddPMCSubsurfaceGeophysics
 
 ! ************************************************************************** !
 
+subroutine AddPMCSensitivityAnalysis(simulation,pm_sensitivity,&
+                                     pmc_name,realization,input,option)
+
+  !
+  ! Adds a Sensitivity Richards PMC
+  !
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+
+  use PMC_Base_class
+  use PMC_Third_Party_class
+  use PM_Sensitivity_Analysis_class
+  use Realization_Subsurface_class
+  use Option_module
+  use Logging_module
+  use Input_Aux_module
+
+  implicit none
+
+  class(simulation_subsurface_type) :: simulation
+  class(pm_sensitivity_type), pointer :: pm_sensitivity
+  character(len=*) :: pmc_name
+  class(realization_subsurface_type), pointer :: realization
+  type(input_type), pointer :: input
+  type(option_type), pointer :: option
+
+  class(pmc_third_party_type), pointer :: pmc_sensitivity_analysis
+  character(len=MAXSTRINGLENGTH) :: string
+  class(pmc_base_type), pointer :: pmc_dummy
+
+  nullify(pmc_dummy)
+  
+  if (pm_sensitivity%sensitivity_flow) then
+    string = 'SENSITIVITY_FLOW'
+    call InputFindStringInFile(input,option,string)
+    call InputFindStringErrorMsg(input,option,string)
+    call pm_sensitivity%ReadPMBlock(input)
+    if (option%iflowmode /= RICHARDS_MODE) then
+       option%io_buffer = 'The SENSITIVITY FLOW process model requires &
+	                         RICHARDS flow mode.'
+       call PrintErrMsg(option)
+    endif
+
+    pmc_sensitivity_analysis => PMCThirdPartyCreate()
+    call pmc_sensitivity_analysis%SetName(pmc_name)
+    call pmc_sensitivity_analysis%SetOption(option)
+    call pmc_sensitivity_analysis%SetCheckpointOption( &
+                                             simulation%checkpoint_option)
+    call pmc_sensitivity_analysis%SetWaypointList( &
+                                       simulation%waypoint_list_subsurface)
+    pmc_sensitivity_analysis%pm_list => pm_sensitivity
+    pmc_sensitivity_analysis%pm_ptr%pm => pm_sensitivity
+    pmc_sensitivity_analysis%realization => realization
+
+    ! set up logging stage
+    string = 'SENSITIVITY_FLOW'
+    call LoggingCreateStage(string,pmc_sensitivity_analysis%stage)
+    call PMCBaseSetChildPeerPtr(PMCCastToBase(pmc_sensitivity_analysis), &
+           PM_CHILD,PMCCastToBase(simulation%flow_process_model_coupler), &
+	         pmc_dummy,PM_APPEND)
+	endif
+	
+	if (pm_sensitivity%sensitivity_transport) then
+	  string = 'SENSITIVITY_TRANSPORT'
+    call InputFindStringInFile(input,option,string)
+    call InputFindStringErrorMsg(input,option,string)
+    option%io_buffer = 'The SENSITIVITY TRANSPORT process model is not yet &
+	                      implemented.'
+    call PrintErrMsg(option)
+    !call pm_sensitivity%ReadPMBlock(input)
+    ! TODO (moise)
+	endif
+
+end subroutine AddPMCSensitivityAnalysis
+
+! ************************************************************************** !
+
 subroutine AddPMCAuxiliary(simulation,pm_auxiliary,pmc_name, &
                            realization,option)
 
@@ -1439,6 +1535,44 @@ end subroutine FactorySubsurfReadGeophysicsPM
 
 ! ************************************************************************** !
 
+subroutine FactorySubsurfaceReadSensitivityPM(input,option,pm)
+  !
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  use Input_Aux_module
+  use Option_module
+  use String_module
+
+  use PM_Base_class
+  use PM_Sensitivity_Analysis_class
+
+  implicit none
+
+  type(input_type), pointer :: input
+  type(option_type), pointer :: option
+  class(pm_base_type), pointer :: pm
+
+  character(len=MAXWORDLENGTH) :: word
+  character(len=MAXSTRINGLENGTH) :: error_string
+
+  error_string = 'SIMULATION,PROCESS_MODELS,SENSITIVITY_ANALYSIS'
+
+  pm => PMSensitivityCreate()
+  pm%option => option
+  
+  if (.not.associated(pm)) then
+    option%io_buffer = 'SENSITIVITY_ANALYSIS block require keyword ' // &
+                       'SENSITIVITY_FLOW or TRANSPORT. See documentation'
+    call PrintErrMsg(option)
+  endif
+  
+  call pm%ReadSimulationOptionsBlock(input)
+  
+end subroutine FactorySubsurfaceReadSensitivityPM
+
+! ************************************************************************** !
+
 subroutine SubsurfaceInitSimulation(simulation)
   !
   ! Author: Glenn Hammond
@@ -1604,13 +1738,13 @@ recursive subroutine SetUpPMApproach(pmc,simulation)
   use PM_UFD_Decay_class
   use PM_UFD_Biosphere_class
   use PM_ERT_class
+  use PM_Sensitivity_Analysis_class
   use Option_module
   use Simulation_Subsurface_class
   use Realization_Subsurface_class
 
   implicit none
 
-
   class(pmc_base_type), pointer :: pmc
   class(simulation_subsurface_type) :: simulation
 
@@ -1662,6 +1796,9 @@ recursive subroutine SetUpPMApproach(pmc,simulation)
 
       class is(pm_ufd_biosphere_type)
         call cur_pm%SetRealization(realization)
+      
+      class is(pm_sensitivity_type)
+        call cur_pm%SetRealization(realization)
 
       class is(pm_ert_type)
         call cur_pm%SetRealization(realization)
@@ -3057,10 +3194,10 @@ subroutine SubsurfaceReadInput(simulation,input)
               output_option%tconv = &
                 UnitsConvertToInternal(word,internal_units,option)
             case('VARIABLES')
-              call OutputVariableRead(input,option, &
+              call OutputVariableRead(input,option,output_option, &
                                       output_option%output_variable_list)
             case('AVERAGE_VARIABLES')
-              call OutputVariableRead(input,option, &
+              call OutputVariableRead(input,option,output_option, &
                                       output_option%aveg_output_variable_list)
             case('UNFILTER_NON_STATE_VARIABLES')
               output_option%filter_non_state_variables = PETSC_FALSE
@@ -3524,7 +3661,7 @@ subroutine SubsurfaceReadInput(simulation,input)
 
 !.....................
       case ('REGRESSION')
-        call RegressionRead(simulation%regression,input,option)
+        call RegressionRead(simulation%regression,input,option,output_option)
 
 !.....................
       case ('TIME')
diff --git a/src/pflotran/grid.F90 b/src/pflotran/grid.F90
index 2547cc212..0240ee7bc 100644
--- a/src/pflotran/grid.F90
+++ b/src/pflotran/grid.F90
@@ -26,7 +26,7 @@ module Grid_module
     PetscInt :: global_offset ! Offset of first cell on process in petsc ordering
     PetscInt :: nlmax_faces  ! Total number of non-ghosted faces in local domain.
     PetscInt :: ngmax_faces  ! Number of ghosted & non-ghosted faces in local domain.
-    PetscInt :: nmax_faces  ! Number of ghosted & non-ghosted faces in local domain.
+    PetscInt :: nmax_faces  ! Number of ghosted & non-ghosted faces in global domain.
     PetscInt :: global_cell_offset, global_faces_offset  ! offsets for LP formulation
 
     ! Below, we define several arrays used for mapping between different
@@ -173,6 +173,9 @@ function GridCreate()
   grid%nlmax = 0
   grid%ngmax = 0
   grid%global_offset = 0
+  grid%nmax_faces = 0
+  !grid%ngmax_faces = 0
+  !grid%nlmax_faces = 0
 
   nullify(grid%cell_neighbors_local_ghosted)
   nullify(grid%hash)
diff --git a/src/pflotran/grid_structured.F90 b/src/pflotran/grid_structured.F90
index 6fb3fec44..6a31688ff 100644
--- a/src/pflotran/grid_structured.F90
+++ b/src/pflotran/grid_structured.F90
@@ -907,6 +907,19 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               connections%id_up(iconn) = id_up
               connections%id_dn(iconn) = id_dn
               
+              connections%local(iconn) = 1
+              connections%num_connections_unique = &
+		                     connections%num_connections_unique + 1
+              if (structured_grid%npx_final > 1) then
+                if (structured_grid%istart == 0 .and. i == lenx) &
+                                               connections%local(iconn) = -1
+                if (structured_grid%istart /= 0 .and. i == 1) then
+                  connections%local(iconn) = 0
+		              connections%num_connections_unique = &
+		                                   connections%num_connections_unique - 1
+	              endif
+	            endif
+              
               if (associated(connections%id_up2)) then
                 if (i == 1) then
                   ! id_up indexes tvd_ghost_vec, see StructGridCreateTVDGhosts() 
@@ -928,11 +941,13 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               endif
               
               connections%dist(-1:3,iconn) = 0.d0
+              connections%normal(1:3,iconn) = 0.d0
               dist_up = 0.5d0*structured_grid%dx(id_up)
               dist_dn = 0.5d0*structured_grid%dx(id_dn)
               connections%dist(-1,iconn) = dist_up/(dist_up+dist_dn)
               connections%dist(0,iconn) = dist_up+dist_dn
               connections%dist(1,iconn) = 1.d0  ! x component of unit vector
+              connections%normal(1,iconn) = 1.d0
               connections%area(iconn) = structured_grid%dy(id_up)* &
                                         structured_grid%dz(id_up)
             enddo
@@ -949,12 +964,28 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               id_dn = id_up + 1
               connections%id_up(iconn) = id_up
               connections%id_dn(iconn) = id_dn
+              
+              connections%local(iconn) = 1
+		          connections%num_connections_unique = &
+		                         connections%num_connections_unique + 1
+              if (structured_grid%npx_final > 1) then
+                if (structured_grid%istart == 0 .and. i == lenx) then
+                  connections%local(iconn) = 0
+		              connections%num_connections_unique = &
+		                             connections%num_connections_unique - 1
+		            endif
+                if (structured_grid%istart /= 0 .and. i == 1) &
+                                           connections%local(iconn) = -1
+              endif
+		          
               connections%dist(-1:3,iconn) = 0.d0
+              connections%normal(1:3,iconn) = 0.d0
               dist_up = 0.5d0*structured_grid%dx(id_up)
               dist_dn = 0.5d0*structured_grid%dx(id_dn)
               connections%dist(-1,iconn) = dist_up/(dist_up+dist_dn)
               connections%dist(0,iconn) = dist_up+dist_dn
               connections%dist(1,iconn) = 1.d0  ! x component of unit vector
+              connections%normal(1,iconn) = 1.d0
               connections%area(iconn) = 2.d0 * pi * (radius(id_up)+0.5d0*structured_grid%dx(id_up))* &
                                         structured_grid%dz(id_up)
             enddo
@@ -969,12 +1000,28 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               id_dn = id_up + 1
               connections%id_up(iconn) = id_up
               connections%id_dn(iconn) = id_dn
+              
+              connections%local(iconn) = 1
+		          connections%num_connections_unique = &
+		                         connections%num_connections_unique + 1
+              if (structured_grid%npx_final > 1) then
+                if (structured_grid%istart == 0 .and. i == lenx) then
+                  connections%local(iconn) = 0
+		              connections%num_connections_unique = &
+		                             connections%num_connections_unique - 1
+		            endif
+                if (structured_grid%istart /= 0 .and. i == 1) &
+                                           connections%local(iconn) = -1
+              endif
+		          
               connections%dist(-1:3,iconn) = 0.d0
+              connections%normal(1:3,iconn) = 0.d0
               dist_up = 0.5d0*structured_grid%dx(id_up)
               dist_dn = 0.5d0*structured_grid%dx(id_dn)
               connections%dist(-1,iconn) = dist_up/(dist_up+dist_dn)
               connections%dist(0,iconn) = dist_up+dist_dn
               connections%dist(1,iconn) = 1.d0  ! x component of unit vector
+              connections%normal(1,iconn) = 0.d0
               connections%area(iconn) = 4.d0 * pi * (radius(id_up)+0.5d0*structured_grid%dx(id_up))**2
             enddo
           enddo
@@ -990,12 +1037,25 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
           do i = structured_grid%istart, structured_grid%iend
             do j = 1, leny
               iconn = iconn+1
-
-              id_up = i + 1 + (j-1) * structured_grid%ngx + k * structured_grid%ngxy
+              id_up = i + 1 + (j-1) * structured_grid%ngx + &
+                                                  k * structured_grid%ngxy
               id_dn = id_up + structured_grid%ngx
               connections%id_up(iconn) = id_up
               connections%id_dn(iconn) = id_dn
               
+              connections%local(iconn) = 1
+		          connections%num_connections_unique = &
+		                         connections%num_connections_unique + 1
+              if (structured_grid%npy_final > 1) then
+                if (structured_grid%jstart == 0 .and. j == leny) then
+                  connections%local(iconn) = 0
+		              connections%num_connections_unique = &
+		                             connections%num_connections_unique - 1
+		            endif
+                if (structured_grid%jstart /= 0 .and. j == 1) &
+                                          connections%local(iconn) = -1
+              endif
+              
               if (associated(connections%id_up2)) then
                 if (j == 1) then
                   ! id_up indexes tvd_ghost_vec, see StructGridCreateTVDGhosts() 
@@ -1018,11 +1078,13 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               endif
                             
               connections%dist(-1:3,iconn) = 0.d0
+              connections%normal(1:3,iconn) = 0.d0
               dist_up = 0.5d0*structured_grid%dy(id_up)
               dist_dn = 0.5d0*structured_grid%dy(id_dn)
               connections%dist(-1,iconn) = dist_up/(dist_up+dist_dn)
               connections%dist(0,iconn) = dist_up+dist_dn
               connections%dist(2,iconn) = 1.d0  ! y component of unit vector
+              connections%normal(2,iconn) = 1.d0
               connections%area(iconn) = structured_grid%dx(id_up)* &
                                     structured_grid%dz(id_up)
             enddo
@@ -1055,6 +1117,19 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               connections%id_up(iconn) = id_up
               connections%id_dn(iconn) = id_dn
               
+              connections%local(iconn) = 1
+		          connections%num_connections_unique = &
+		                         connections%num_connections_unique + 1
+              if (structured_grid%npz_final > 1) then
+                if (structured_grid%kstart == 0 .and. k == lenz) then
+                  connections%local(iconn) = 0
+		              connections%num_connections_unique = &
+		                             connections%num_connections_unique - 1
+                endif
+                if (structured_grid%kstart /= 0 .and. k == 1) &
+                                               connections%local(iconn) = -1
+              endif
+              
               if (associated(connections%id_up2)) then
                 if (k == 1) then
 !                  id_up2 = 1 + i + j*structured_grid%nlx + tvd_ghost_offset
@@ -1076,11 +1151,13 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               endif
                                  
               connections%dist(-1:3,iconn) = 0.d0
+              connections%normal(1:3,iconn) = 0.d0
               dist_up = 0.5d0*structured_grid%dz(id_up)
               dist_dn = 0.5d0*structured_grid%dz(id_dn)
               connections%dist(-1,iconn) = dist_up/(dist_up+dist_dn)
               connections%dist(0,iconn) = dist_up+dist_dn
               connections%dist(3,iconn) = 1.d0  ! z component of unit vector
+              connections%normal(3,iconn) = 1.d0
               connections%area(iconn) = structured_grid%dx(id_up) * &
                                         structured_grid%dy(id_up)
             enddo
@@ -1097,11 +1174,13 @@ function StructGridComputeInternConnect(structured_grid, xc, yc, zc, option)
               connections%id_up(iconn) = id_up
               connections%id_dn(iconn) = id_dn
               connections%dist(-1:3,iconn) = 0.d0
+              connections%normal(1:3,iconn) = 0.d0
               dist_up = 0.5d0*structured_grid%dz(id_up)
               dist_dn = 0.5d0*structured_grid%dz(id_dn)
               connections%dist(-1,iconn) = dist_up/(dist_up+dist_dn)
               connections%dist(0,iconn) = dist_up+dist_dn
               connections%dist(3,iconn) = 1.d0  ! z component of unit vector
+              connections%normal(3,iconn) = 1.d0
               ! pi*(r2^2-r1^2)
               r2 = xc(id_up) + 0.5d0*structured_grid%dx(id_up)
               r1 = xc(id_up) - 0.5d0*structured_grid%dx(id_up)
diff --git a/src/pflotran/grid_unstructured.F90 b/src/pflotran/grid_unstructured.F90
index e357009f9..d706377f8 100644
--- a/src/pflotran/grid_unstructured.F90
+++ b/src/pflotran/grid_unstructured.F90
@@ -2072,6 +2072,7 @@ function UGridComputeInternConnect(unstructured_grid,grid_x,grid_y,grid_z, &
   allocate(face_to_cell(2,face_count))
   face_to_cell = temp_int_2d
   deallocate(temp_int_2d)
+  ! unstructured_grid%nmax_faces = face_count
 
   
   ! remap faces in cells using temp_int from above
@@ -2197,14 +2198,48 @@ function UGridComputeInternConnect(unstructured_grid,grid_x,grid_y,grid_z, &
         connections%id_up(iconn) = local_id
         connections%id_dn(iconn) = abs(dual_local_id)
         connections%face_id(iconn) = cell_to_face(iface,local_id)
+        connections%local(iconn) = 0
+        
+        point_up%x = grid_x(local_id)
+        point_up%y = grid_y(local_id)
+        point_up%z = grid_z(local_id)
+        point_dn%x = grid_x(abs(dual_local_id))
+        point_dn%y = grid_y(abs(dual_local_id))
+        point_dn%z = grid_z(abs(dual_local_id))
+          
+        !added by Moise Rousseau (01-14-21)
+        !uniquely identify the ghosted connection
+        if (dual_local_id < 0) then
+          if (point_up%x > point_dn%x) then
+            connections%local(iconn) = -1
+            connections%num_connections_unique = &
+		               connections%num_connections_unique + 1
+          else
+            if (point_up%x == point_dn%x) then
+              if (point_up%y > point_dn%y) then
+                connections%local(iconn) = -1
+                connections%num_connections_unique = &
+		               connections%num_connections_unique + 1
+              else 
+                if (point_up%y == point_dn%y) then
+                  if (point_up%z > point_dn%z) then
+                    connections%local(iconn) = -1
+                    connections%num_connections_unique = &
+                               connections%num_connections_unique + 1
+                  endif
+                endif
+              endif
+            endif
+          endif
+        else 
+          connections%local(iconn) = 1
+          connections%num_connections_unique = &
+                                 connections%num_connections_unique + 1
+        endif
+        !end of addition
+        
         if (face_type == LINE_FACE_TYPE) then
-
-          point_up%x = grid_x(local_id)
-          point_up%y = grid_y(local_id)
-          point_up%z = grid_z(local_id)
-          point_dn%x = grid_x(abs(dual_local_id))
-          point_dn%y = grid_y(abs(dual_local_id))
-          point_dn%z = grid_z(abs(dual_local_id))
+        
           point1 = unstructured_grid%vertices(unstructured_grid%face_to_vertex(1,face_id))
           point2 = unstructured_grid%vertices(unstructured_grid%face_to_vertex(2,face_id))
 
@@ -2235,12 +2270,6 @@ function UGridComputeInternConnect(unstructured_grid,grid_x,grid_y,grid_z, &
           
           call GeometryComputePlaneWithPoints(plane1,point1,point2,point3)
          
-          point_up%x = grid_x(local_id)
-          point_up%y = grid_y(local_id)
-          point_up%z = grid_z(local_id)
-          point_dn%x = grid_x(abs(dual_local_id))
-          point_dn%y = grid_y(abs(dual_local_id))
-          point_dn%z = grid_z(abs(dual_local_id))
           v1(1) = point_dn%x-point_up%x
           v1(2) = point_dn%y-point_up%y
           v1(3) = point_dn%z-point_up%z
@@ -2312,6 +2341,7 @@ function UGridComputeInternConnect(unstructured_grid,grid_x,grid_y,grid_z, &
         connections%dist(0,iconn) = dist_up + dist_dn
         v3 = v1 + v2
         connections%dist(1:3,iconn) = v3/sqrt(DotProduct(v3,v3))
+        connections%normal(1:3,iconn) = n1 !suppose the quad face is planar
         connections%area(iconn) = area1 + area2
         connections%intercp(1,iconn) = intercept%x
         connections%intercp(2,iconn) = intercept%y
diff --git a/src/pflotran/grid_unstructured_aux.F90 b/src/pflotran/grid_unstructured_aux.F90
index 07c471536..b674d5341 100644
--- a/src/pflotran/grid_unstructured_aux.F90
+++ b/src/pflotran/grid_unstructured_aux.F90
@@ -27,6 +27,7 @@ module Grid_Unstructured_Aux_module
     PetscInt :: nmax   ! Total number of nodes in global domain
     PetscInt :: nlmax  ! Total number of non-ghosted nodes in local domain.
     PetscInt :: ngmax  ! Number of ghosted & non-ghosted nodes in local domain.
+    PetscInt :: nmax_faces  ! Number of ghosted & non-ghosted faces in global domain.
     PetscInt, pointer :: hash(:,:,:)
     PetscInt :: num_hash
     PetscInt, pointer :: cell_ids_natural(:) ! natural 1d right-hand i,j,k ordering
@@ -78,6 +79,7 @@ module Grid_Unstructured_Aux_module
     type(point3d_type), pointer :: cell_centroids(:)
     PetscInt, pointer :: connections(:,:)
     PetscReal, pointer :: face_areas(:)
+    PetscReal, pointer :: face_locals(:)
     type(point3d_type), pointer :: face_centroids(:)
     PetscInt :: num_cells_global  ! Number of cells in the entire domain
     PetscInt :: num_elems
@@ -248,6 +250,7 @@ function UGridCreate()
   unstructured_grid%nmax = 0
   unstructured_grid%nlmax = 0
   unstructured_grid%ngmax = 0
+  unstructured_grid%nmax_faces = 0
   nullify(unstructured_grid%hash)
   unstructured_grid%num_hash = 100
   nullify(unstructured_grid%cell_ids_natural)
@@ -308,6 +311,7 @@ function UGridExplicitCreate()
   nullify(explicit_grid%cell_centroids)
   nullify(explicit_grid%connections)
   nullify(explicit_grid%face_areas)
+  nullify(explicit_grid%face_locals)
   nullify(explicit_grid%face_centroids)
   nullify(explicit_grid%cell_vertices)
   nullify(explicit_grid%vertex_coordinates)
@@ -2195,6 +2199,7 @@ subroutine UGridExplicitDestroy(explicit_grid)
   nullify(explicit_grid%cell_centroids)
   call DeallocateArray(explicit_grid%connections)
   call DeallocateArray(explicit_grid%face_areas)
+  call DeallocateArray(explicit_grid%face_locals)
   if (associated(explicit_grid%face_centroids)) &
     deallocate(explicit_grid%face_centroids)
   nullify(explicit_grid%face_centroids)
diff --git a/src/pflotran/grid_unstructured_explicit.F90 b/src/pflotran/grid_unstructured_explicit.F90
index 5b4ddb708..8e6ed7dbb 100644
--- a/src/pflotran/grid_unstructured_explicit.F90
+++ b/src/pflotran/grid_unstructured_explicit.F90
@@ -240,7 +240,7 @@ subroutine UGridExplicitRead(unstructured_grid,filename,option)
   call MPI_Bcast(temp_int,ONE_INTEGER_MPI,MPI_INTEGER, &
                  option%driver%io_rank,option%mycomm,ierr)
   num_connections = temp_int
-
+  
    ! divide cells across ranks
   num_connections_local = num_connections/option%comm%mycommsize
   num_connections_local_save = num_connections_local
@@ -937,7 +937,7 @@ subroutine UGridExplicitDecompose(ugrid,option)
   PetscInt :: num_connections_local_old, num_connections_local
   PetscInt :: num_connections_total
   PetscInt :: num_connections_global, global_connection_offset
-  PetscInt :: id_up, id_dn, iconn, icell, count, offset
+  PetscInt :: id_up, id_dn, iconn, icell, count, count2, offset
   PetscInt :: conn_id, dual_id
   PetscBool :: found
   PetscInt :: i, temp_int, idual
@@ -1631,6 +1631,8 @@ subroutine UGridExplicitDecompose(ugrid,option)
   explicit_grid%connections = 0
   allocate(explicit_grid%face_areas(count))
   explicit_grid%face_areas = 0
+  allocate(explicit_grid%face_locals(count))
+  explicit_grid%face_locals = 1
   allocate(explicit_grid%face_centroids(count))
   do iconn = 1, count
     explicit_grid%face_centroids(iconn)%x = 0.d0
@@ -1649,6 +1651,9 @@ subroutine UGridExplicitDecompose(ugrid,option)
       explicit_grid%face_centroids(count)%y = vec_ptr(offset+4)
       explicit_grid%face_centroids(count)%z = vec_ptr(offset+5)
       explicit_grid%face_areas(count) = vec_ptr(offset+6)
+      if (int(vec_ptr(offset+1)) > ugrid%nlmax .or. &
+                          int(vec_ptr(offset+2)) > ugrid%nlmax) &
+        explicit_grid%face_locals(count) = 0
     endif
   enddo
   call VecRestoreArrayF90(connections_local,vec_ptr,ierr);CHKERRQ(ierr)
@@ -1756,6 +1761,8 @@ function UGridExplicitSetInternConnect(explicit_grid,upwind_fraction_method, &
     connections%id_up(iconn) = id_up
     connections%id_dn(iconn) = id_dn
 
+    connections%local(iconn) = 0
+    
     pt_up(1) = explicit_grid%cell_centroids(id_up)%x
     pt_up(2) = explicit_grid%cell_centroids(id_up)%y
     pt_up(3) = explicit_grid%cell_centroids(id_up)%z
@@ -1763,6 +1770,37 @@ function UGridExplicitSetInternConnect(explicit_grid,upwind_fraction_method, &
     pt_dn(1) = explicit_grid%cell_centroids(id_dn)%x
     pt_dn(2) = explicit_grid%cell_centroids(id_dn)%y
     pt_dn(3) = explicit_grid%cell_centroids(id_dn)%z
+    
+    !added by Moise Rousseau (01-14-21)
+    !uniquely identify the ghosted connection
+    if (explicit_grid%face_locals(iconn) < 0.1)  then
+      if (pt_up(1) > pt_dn(1)) then
+        connections%local(iconn) = -1
+        connections%num_connections_unique = &
+                           connections%num_connections_unique + 1
+      else
+        if (pt_up(1) == pt_dn(1)) then
+          if (pt_up(2) > pt_dn(2)) then
+            connections%local(iconn) = -1
+            connections%num_connections_unique = &
+                           connections%num_connections_unique + 1
+          else 
+            if (pt_up(2) == pt_dn(2)) then
+              if (pt_up(3) > pt_dn(3)) then
+                connections%local(iconn) = -1
+                connections%num_connections_unique = &
+                           connections%num_connections_unique + 1
+               endif
+            endif
+          endif
+        endif
+      endif
+    else 
+      connections%local(iconn) = 1
+      connections%num_connections_unique = &
+                           connections%num_connections_unique + 1
+    endif
+    !end of addition
 
     pt_center(1) = explicit_grid%face_centroids(iconn)%x
     pt_center(2) = explicit_grid%face_centroids(iconn)%y
@@ -1884,6 +1922,7 @@ function UGridExplicitSetBoundaryConnect(explicit_grid,cell_ids, &
     connections%dist(0,iconn) = distance
     connections%dist(1:3,iconn) = v/distance
     connections%area(iconn) = face_areas(iconn)
+    !connections%local(iconn) = 1 ! boundary always local
   enddo
   if (error) then
     option%io_buffer = 'Coincident cell and face centroids found in ' // &
diff --git a/src/pflotran/integral_flux.F90 b/src/pflotran/integral_flux.F90
index ea4d6234b..bdb9dedfd 100644
--- a/src/pflotran/integral_flux.F90
+++ b/src/pflotran/integral_flux.F90
@@ -3,6 +3,7 @@ module Integral_Flux_module
 #include "petsc/finclude/petscsys.h"
   use petscsys
   use Geometry_module
+  use Region_module
   
   use PFLOTRAN_Constants_module
 
@@ -31,6 +32,11 @@ module Integral_Flux_module
     PetscInt, pointer :: internal_connections(:)
     PetscInt, pointer :: boundary_connections(:)
     PetscReal, pointer :: integral_value(:)
+    PetscBool :: by_regions
+    character(len=MAXWORDLENGTH) :: reg_from_name
+    type(region_type), pointer :: reg_from
+    character(len=MAXWORDLENGTH) :: reg_to_name   
+    type(region_type), pointer :: reg_to
     type(integral_flux_type), pointer :: next
   end type integral_flux_type
   
@@ -76,6 +82,7 @@ function IntegralFluxCreate()
   integral_flux%id = 0
   integral_flux%invert_direction = PETSC_FALSE
   integral_flux%flux_calculation_option = SIGNED_FLUXES !signed
+  integral_flux%by_regions = PETSC_FALSE
   nullify(integral_flux%polygon)
   nullify(integral_flux%plane)
   nullify(integral_flux%coordinates_and_directions)
@@ -251,6 +258,34 @@ subroutine IntegralFluxRead(integral_flux,input,option)
         allocate(integral_flux%cell_ids(2,icount))
         integral_flux%cell_ids = int_array(:,1:icount)
         call DeallocateArray(int_array)
+      case('BETWEEN_REGIONS')
+        error_string = 'INTEGRAL_FLUX,BETWEEN_REGIONS'
+        call InputPushBlock(input,option)
+        do
+          call InputReadPflotranString(input,option)
+          call InputReadStringErrorMsg(input,option,error_string)
+
+          if (InputCheckExit(input,option)) exit
+
+          if (InputError(input)) exit
+          call InputReadCard(input,option,keyword)
+          call InputErrorMsg(input,option,'keyword',error_string)
+          select case(trim(keyword))
+            case('FROM')
+              call InputReadWord(input,option,integral_flux%reg_from_name, &
+                                 PETSC_TRUE)
+              call InputErrorMsg(input,option,'Region From',error_string)
+            case('TO')
+              call InputReadWord(input,option,integral_flux%reg_to_name, &
+                                 PETSC_TRUE)
+              call InputErrorMsg(input,option,'Region To',error_string)
+            case default
+              call InputKeywordUnrecognized(input,keyword,'INTEGRAL_FLUX,&
+                                            &BETWEEN_REGIONS',option)
+          end select
+        enddo
+        integral_flux%by_regions = PETSC_TRUE
+        call InputPopBlock(input,option)
       case default
         call InputKeywordUnrecognized(input,keyword,'INTEGRAL_FLUX',option)
     end select 
diff --git a/src/pflotran/output.F90 b/src/pflotran/output.F90
index 689bec39d..fc65669eb 100644
--- a/src/pflotran/output.F90
+++ b/src/pflotran/output.F90
@@ -118,6 +118,7 @@ subroutine OutputFileRead(input,realization,output_option, &
   PetscBool :: added
   PetscBool :: vel_cent, vel_face
   PetscBool :: fluxes
+  PetscBool :: print_connection_ids
   PetscBool :: mass_flowrate, energy_flowrate
   PetscBool :: aveg_mass_flowrate, aveg_energy_flowrate,is_sum,is_rst
 
@@ -132,6 +133,7 @@ subroutine OutputFileRead(input,realization,output_option, &
   energy_flowrate = PETSC_FALSE
   aveg_mass_flowrate = PETSC_FALSE
   aveg_energy_flowrate = PETSC_FALSE
+  print_connection_ids = PETSC_FALSE
   k = 0
   nullify(temp_real_array)
 
@@ -492,10 +494,10 @@ subroutine OutputFileRead(input,realization,output_option, &
       case('VARIABLES')
         select case(trim(block_name))
           case('SNAPSHOT_FILE')
-            call OutputVariableRead(input,option, &
+            call OutputVariableRead(input,option,output_option, &
                  output_option%output_snap_variable_list)
           case('OBSERVATION_FILE')
-            call OutputVariableRead(input,option, &
+            call OutputVariableRead(input,option,output_option, &
                  output_option%output_obs_variable_list)
           case('MASS_BALANCE_FILE')
             option%io_buffer = 'A variable list cannot be specified within &
@@ -508,6 +510,21 @@ subroutine OutputFileRead(input,realization,output_option, &
       case('PRINT_COLUMN_IDS')
         output_option%print_column_ids = PETSC_TRUE
 
+!.............................
+      case('PRINT_CONNECTION_IDS')
+        select case(trim(block_name))
+          case('SNAPSHOT_FILE') 
+            print_connection_ids = PETSC_TRUE
+          case('OBSERVATION_FILE')
+            option%io_buffer = 'PRINT_CONNECTION_IDS cannot be specified for &
+                               &OUTPUT,OBSERVATION_FILE block.'
+            call PrintErrMsg(option)
+          case('MASS_BALANCE_FILE')
+            option%io_buffer = 'PRINT_CONNECTION_IDS cannot be specified for &
+                               &OUTPUT,MASS_BALANCE_FILE block.'
+        end select
+
+
 !.............................
       case('DETAILED')
         select case(trim(block_name))
@@ -567,6 +584,16 @@ subroutine OutputFileRead(input,realization,output_option, &
   if (fluxes) then
     output_option%print_fluxes = PETSC_TRUE
   endif
+  
+  if (print_connection_ids) then
+    if (output_option%print_tecplot) then
+      option%io_buffer = 'Keyword: PRINT_CONNECTION_IDS only defined for &
+                         &FORMAT HDF5'
+      call PrintErrMsg(option)
+    endif
+    if (output_option%print_hdf5) &
+         output_option%print_hdf5_connection_ids = PETSC_TRUE
+  endif
 
   if(output_option%aveg_output_variable_list%nvars>0) then
     if(Equal(output_option%periodic_snap_output_time_incr,0.d0)) then
@@ -608,7 +635,7 @@ end subroutine OutputFileRead
 
 ! ************************************************************************** !
 
-subroutine OutputVariableRead(input,option,output_variable_list)
+subroutine OutputVariableRead(input,option,output_option,output_variable_list)
   !
   ! This routine reads a variable from the input file.
   !
@@ -624,6 +651,7 @@ subroutine OutputVariableRead(input,option,output_variable_list)
   implicit none
 
   type(option_type), pointer :: option
+  type(output_option_type), pointer :: output_option
   type(input_type), pointer :: input
   type(output_variable_list_type), pointer :: output_variable_list
 
@@ -954,6 +982,8 @@ subroutine OutputVariableRead(input,option,output_variable_list)
       case default
         call OutputVariableToID(word,name,units,category,id,subvar,subsubvar, &
                                 option)
+        if (category == OUTPUT_FACE) &
+                    output_option%print_face_variable = PETSC_TRUE
         if (Uninitialized(id)) &
           call InputKeywordUnrecognized(input,word,'VARIABLES',option)
 
diff --git a/src/pflotran/output_aux.F90 b/src/pflotran/output_aux.F90
index 8b18ad46e..40f9a85c7 100644
--- a/src/pflotran/output_aux.F90
+++ b/src/pflotran/output_aux.F90
@@ -48,6 +48,8 @@ module Output_Aux_module
     PetscBool :: print_hdf5_aveg_mass_flowrate
     PetscBool :: print_hdf5_aveg_energy_flowrate
     PetscBool :: print_explicit_flowrate
+    PetscBool :: print_hdf5_connection_ids
+    PetscBool :: print_face_variable
 
     PetscBool :: print_tecplot
     PetscInt :: tecplot_format
@@ -158,6 +160,7 @@ module Output_Aux_module
   PetscInt, parameter, public :: OUTPUT_DISPLACEMENT = 7
   PetscInt, parameter, public :: OUTPUT_STRESS = 8
   PetscInt, parameter, public :: OUTPUT_STRAIN = 9
+  PetscInt, parameter, public :: OUTPUT_FACE = 10
 
   public :: OutputOptionCreate, &
             OutputOptionDuplicate, &
@@ -211,6 +214,8 @@ function OutputOptionCreate()
   output_option%print_hdf5_aveg_mass_flowrate = PETSC_FALSE
   output_option%print_hdf5_aveg_energy_flowrate = PETSC_FALSE
   output_option%print_explicit_flowrate = PETSC_FALSE
+  output_option%print_hdf5_connection_ids = PETSC_FALSE
+  output_option%print_face_variable = PETSC_FALSE
   output_option%print_tecplot = PETSC_FALSE
   output_option%tecplot_format = 0
   output_option%print_tecplot_vel_cent = PETSC_FALSE
@@ -319,6 +324,9 @@ function OutputOptionDuplicate(output_option)
     output_option%print_hdf5_aveg_energy_flowrate
   output_option2%print_explicit_flowrate = &
     output_option%print_explicit_flowrate
+  output_option2%print_hdf5_connection_ids = &
+    output_option%print_hdf5_connection_ids
+  output_option2%print_face_variable = output_option%print_face_variable
   output_option2%print_tecplot = output_option%print_tecplot
   output_option2%tecplot_format = output_option%tecplot_format
   output_option2%print_tecplot_vel_cent = output_option%print_tecplot_vel_cent
@@ -1165,6 +1173,61 @@ subroutine OutputVariableToID(word,name,units,category,id,subvar,subsubvar, &
       name = 'Electrical Potential Dipole'
       category = OUTPUT_GENERIC
       id = ELECTRICAL_POTENTIAL_DIPOLE
+    case ('FACE_PERMEABILITY')
+      units = 'm^2'
+      name = 'Face Permeability'
+      category = OUTPUT_FACE
+      id = FACE_PERMEABILITY
+    case ('FACE_AREA')
+      units = 'm^2'
+      name = 'Face Area'
+      category = OUTPUT_FACE
+      id = FACE_AREA
+    case ('FACE_UPWIND_FRACTION')
+      units = ''
+      name = 'Face Upwind Fraction'
+      category = OUTPUT_FACE
+      id = FACE_UPWIND_FRACTION
+    case ('FACE_DISTANCE_BETWEEN_CENTER')
+      units = ''
+      name = 'Face Distance Between Center'
+      category = OUTPUT_FACE
+      id = FACE_DISTANCE_BETWEEN_CENTER
+    case ('FACE_NON_ORTHOGONALITY_ANGLE')
+      units = ''
+      name = 'Face Non Orthogonality Angle'
+      category = OUTPUT_FACE
+      id = FACE_NON_ORTHO_ANGLE
+    case ('FACE_CELL_CENTER_VECTOR_X')
+      units = ''
+      name = 'Face Cell Center X Component'
+      category = OUTPUT_FACE
+      id = FACE_CELL_CENTER_VECTOR_X
+    case ('FACE_CELL_CENTER_VECTOR_Y')
+      units = ''
+      name = 'Face Cell Vector Y Component'
+      category = OUTPUT_FACE
+      id = FACE_CELL_CENTER_VECTOR_Y
+    case ('FACE_CELL_CENTER_VECTOR_Z')
+      units = ''
+      name = 'Face Cell Vector Z Component'
+      category = OUTPUT_FACE
+      id = FACE_CELL_CENTER_VECTOR_Z
+    case ('FACE_NORMAL_X')
+      units = ''
+      name = 'Face Normal X Component'
+      category = OUTPUT_FACE
+      id = FACE_NORMAL_X
+    case ('FACE_NORMAL_Y')
+      units = ''
+      name = 'Face Normal Y Component'
+      category = OUTPUT_FACE
+      id = FACE_NORMAL_Y
+    case ('FACE_NORMAL_Z')
+      units = ''
+      name = 'Face Normal Z Component'
+      category = OUTPUT_FACE
+      id = FACE_NORMAL_Z
   end select
 
 end subroutine OutputVariableToID
@@ -1313,6 +1376,8 @@ function OutputVariableToCategoryString(icategory)
       string = 'STRESS'
     case(OUTPUT_STRAIN)
       string = 'STRAIN'
+    case(OUTPUT_FACE)
+      string = 'FACE'
     case default
       string = 'GENERIC'
   end select
diff --git a/src/pflotran/output_common.F90 b/src/pflotran/output_common.F90
index 5416abc67..f83517233 100644
--- a/src/pflotran/output_common.F90
+++ b/src/pflotran/output_common.F90
@@ -44,7 +44,8 @@ module Output_Common_module
             OutputGetExplicitIDsFlowrates, &
             OutputGetExplicitAuxVars, &
             OutputGetExplicitCellInfo, &
-            OutputCollectVelocityOrFlux
+            OutputCollectVelocityOrFlux, &
+            OutputGetNumberOfFaceConnectionLocal
               
 contains
 
@@ -2071,4 +2072,52 @@ subroutine OutputCollectVelocityOrFlux(realization_base, iphase, direction, &
 
 end subroutine OutputCollectVelocityOrFlux
 
+! ************************************************************************** !
+
+subroutine OutputGetNumberOfFaceConnectionLocal(realization_base, nconnection)
+  ! 
+  ! Compute the number of connection in the grid (internal and
+  ! and boundary)
+  ! 
+  ! Author: Moise Rousseau, Polytechnique Montreal
+  ! 09/21/20
+  ! 
+  
+  use Connection_module
+  use Coupler_module
+  use Option_module
+  
+  class(realization_base_type) :: realization_base
+  PetscInt :: nconnection
+  
+  type(option_type), pointer :: option
+  type(connection_set_type), pointer :: cur_connection_set
+  type(coupler_type), pointer :: boundary_condition
+  
+  nullify(boundary_condition)
+  nullify(cur_connection_set)
+  nconnection = 0
+  option => realization_base%option
+  
+  !internal connections
+  cur_connection_set => &
+            realization_base%patch%grid%internal_connection_set_list%first
+  do
+    if (.not.associated(cur_connection_set)) exit
+    nconnection = nconnection + cur_connection_set%num_connections_unique
+    cur_connection_set => cur_connection_set%next
+  enddo
+  ! boundary connections
+  boundary_condition => & 
+             realization_base%patch%boundary_condition_list%first
+  do
+    if (.not.associated(boundary_condition)) exit
+    cur_connection_set => boundary_condition%connection_set
+    nconnection = nconnection + &
+                            cur_connection_set%num_connections
+    boundary_condition => boundary_condition%next
+  enddo
+  
+end subroutine OutputGetNumberOfFaceConnectionLocal
+
 end module Output_Common_module
diff --git a/src/pflotran/output_hdf5.F90 b/src/pflotran/output_hdf5.F90
index dd9d8ad92..b9a66a3c3 100644
--- a/src/pflotran/output_hdf5.F90
+++ b/src/pflotran/output_hdf5.F90
@@ -123,6 +123,7 @@ subroutine OutputHDF5(realization_base,var_list_type)
   Vec :: global_vec_vy
   Vec :: global_vec_vz
   Vec :: natural_vec
+  Vec :: face_vec
   PetscReal, pointer :: v_ptr
   
   character(len=MAXSTRINGLENGTH) :: string
@@ -138,6 +139,7 @@ subroutine OutputHDF5(realization_base,var_list_type)
   PetscInt :: ivar, isubvar, var_type
   PetscBool :: include_gas_phase
   PetscErrorCode :: ierr
+  PetscInt :: nlconnection, total_num_connections
 
   discretization => realization_base%discretization
   patch => realization_base%patch
@@ -151,6 +153,9 @@ subroutine OutputHDF5(realization_base,var_list_type)
   if (first) then
     call OutputHDF5Provenance(option, output_option, file_id)
     call OutputHDF5WriteStructCoordGroup(file_id,discretization,grid,option)
+    if (output_option%print_hdf5_connection_ids) then
+      call WriteHDF5ConnectionIds(realization_base,option,file_id)
+    endif
   endif
         
   ! create a group for the data set
@@ -176,6 +181,14 @@ subroutine OutputHDF5(realization_base,var_list_type)
   call DiscretizationDuplicateVector(discretization,global_vec,global_vec_vx)
   call DiscretizationDuplicateVector(discretization,global_vec,global_vec_vy)
   call DiscretizationDuplicateVector(discretization,global_vec,global_vec_vz)
+  
+  if (output_option%print_face_variable) then
+    call OutputGetNumberOfFaceConnectionLocal(realization_base, nlconnection)
+    call MPI_Allreduce(nlconnection,total_num_connections,ONE_INTEGER_MPI, &
+                       MPIU_INTEGER, MPI_SUM,option%mycomm,ierr);CHKERRQ(ierr)
+    call VecCreateMPI(option%mycomm,nlconnection, total_num_connections, & 
+                      face_vec,ierr);CHKERRQ(ierr)
+  endif
 
   select case (var_list_type)
 
@@ -184,7 +197,7 @@ subroutine OutputHDF5(realization_base,var_list_type)
       cur_variable => output_option%output_snap_variable_list%first
       do
         if (.not.associated(cur_variable)) exit
-        call OutputGetVariableArray(realization_base,global_vec,cur_variable)
+        
         string = cur_variable%name
         call StringSwapChar(string," ","_")
         if (len_trim(cur_variable%units) > 0) then
@@ -192,6 +205,21 @@ subroutine OutputHDF5(realization_base,var_list_type)
           call HDF5MakeStringCompatible(word)
           string = trim(string) // ' [' // trim(word) // ']'
         endif
+        
+        if (cur_variable%icategory == OUTPUT_FACE) then
+          call OutputGetVariableArray(realization_base,face_vec,cur_variable)
+          if (cur_variable%iformat == 0) then
+            call HDF5WriteDataSetFromVec(string,option,face_vec,grp_id, &
+                                         H5T_NATIVE_DOUBLE)
+          else
+            call HDF5WriteDataSetFromVec(string,option,face_vec,grp_id, &
+                                         H5T_NATIVE_INTEGER)
+          endif
+          cur_variable => cur_variable%next
+          cycle
+        endif
+        
+        call OutputGetVariableArray(realization_base,global_vec,cur_variable)
         if (cur_variable%iformat == 0) then
           call HDF5WriteStructDataSetFromVec(string,realization_base, &
                                              global_vec,grp_id, &
@@ -311,6 +339,8 @@ subroutine OutputHDF5(realization_base,var_list_type)
   call VecDestroy(global_vec_vx,ierr);CHKERRQ(ierr)
   call VecDestroy(global_vec_vy,ierr);CHKERRQ(ierr)
   call VecDestroy(global_vec_vz,ierr);CHKERRQ(ierr)
+  if (output_option%print_face_variable) &
+                call VecDestroy(face_vec,ierr);CHKERRQ(ierr)
 
   call h5gclose_f(grp_id,hdf5_err)
 
@@ -491,6 +521,7 @@ subroutine OutputHDF5UGridXDMF(realization_base,var_list_type)
   Vec :: global_vec
   Vec :: global_vec_vx,global_vec_vy,global_vec_vz
   Vec :: natural_vec
+  Vec :: face_vec
   PetscReal, pointer :: v_ptr
 
   character(len=MAXSTRINGLENGTH) :: filename_path, filename_header
@@ -509,6 +540,7 @@ subroutine OutputHDF5UGridXDMF(realization_base,var_list_type)
   PetscInt :: vert_count
   Vec :: ivec
   PetscErrorCode :: ierr
+  PetscInt :: nlconnection, total_num_connections
 
   discretization => realization_base%discretization
   patch => realization_base%patch
@@ -641,6 +673,14 @@ subroutine OutputHDF5UGridXDMF(realization_base,var_list_type)
   call DiscretizationDuplicateVector(discretization,global_vec,global_vec_vx)
   call DiscretizationDuplicateVector(discretization,global_vec,global_vec_vy)
   call DiscretizationDuplicateVector(discretization,global_vec,global_vec_vz)
+  
+  if (output_option%print_face_variable) then
+    call OutputGetNumberOfFaceConnectionLocal(realization_base,nlconnection)
+    call MPI_Allreduce(nlconnection,total_num_connections,ONE_INTEGER_MPI, &
+                       MPIU_INTEGER, MPI_SUM,option%mycomm,ierr);CHKERRQ(ierr)
+    call VecCreateMPI(option%mycomm,nlconnection, total_num_connections, & 
+                      face_vec,ierr);CHKERRQ(ierr)
+  endif
 
   select case (var_list_type)
 
@@ -649,15 +689,30 @@ subroutine OutputHDF5UGridXDMF(realization_base,var_list_type)
       cur_variable => output_option%output_snap_variable_list%first
       do
         if (.not.associated(cur_variable)) exit
-        call OutputGetVariableArray(realization_base,global_vec,cur_variable)
-        call DiscretizationGlobalToNatural(discretization,global_vec, &
-                                           natural_vec,ONEDOF)
+        
         string = cur_variable%name
         if (len_trim(cur_variable%units) > 0) then
           word = cur_variable%units
           call HDF5MakeStringCompatible(word)
           string = trim(string) // ' [' // trim(word) // ']'
         endif
+        
+        if (cur_variable%icategory == OUTPUT_FACE) then
+          call OutputGetVariableArray(realization_base,face_vec,cur_variable)
+          if (cur_variable%iformat == 0) then
+            call HDF5WriteDataSetFromVec(string,option,face_vec,grp_id, &
+                                         H5T_NATIVE_DOUBLE)
+          else
+            call HDF5WriteDataSetFromVec(string,option,face_vec,grp_id, &
+                                         H5T_NATIVE_INTEGER)
+          endif
+          cur_variable => cur_variable%next
+          cycle
+        endif
+        
+        call OutputGetVariableArray(realization_base,global_vec,cur_variable)
+        call DiscretizationGlobalToNatural(discretization,global_vec, &
+                                           natural_vec,ONEDOF)
         if (cur_variable%iformat == 0) then
           call HDF5WriteDataSetFromVec(string,option,natural_vec,grp_id, &
                                        H5T_NATIVE_DOUBLE)
@@ -809,6 +864,8 @@ subroutine OutputHDF5UGridXDMF(realization_base,var_list_type)
   call VecDestroy(global_vec_vx,ierr);CHKERRQ(ierr)
   call VecDestroy(global_vec_vy,ierr);CHKERRQ(ierr)
   call VecDestroy(global_vec_vz,ierr);CHKERRQ(ierr)
+  if (output_option%print_face_variable) &
+                call VecDestroy(face_vec,ierr);CHKERRQ(ierr)
 
   call h5gclose_f(grp_id,hdf5_err)
 
@@ -886,6 +943,7 @@ subroutine OutputHDF5UGridXDMFExplicit(realization_base,var_list_type)
   Vec :: global_vec
   Vec :: global_vec_vx, global_vec_vy, global_vec_vz
   Vec :: natural_vec
+  Vec :: face_vec
   PetscReal, pointer :: v_ptr
   PetscBool :: include_gas_phase
 
@@ -910,6 +968,7 @@ subroutine OutputHDF5UGridXDMFExplicit(realization_base,var_list_type)
   PetscInt :: num_vertices, num_cells
   PetscInt :: mesh_type
   PetscErrorCode :: ierr
+  PetscInt :: nlconnection, total_num_connections
 
   discretization => realization_base%discretization
   patch => realization_base%patch
@@ -1064,12 +1123,18 @@ subroutine OutputHDF5UGridXDMFExplicit(realization_base,var_list_type)
     string = "Domain"
     call h5gcreate_f(new_file_id,string,new_grp_id,hdf5_err, &
                      OBJECT_NAMELEN_DEFAULT_F)
-    call WriteHDF5CoordinatesUGridXDMFExplicit(realization_base,option, &
-                                               new_grp_id)
+    if (output_option%print_explicit_primal_grid) then
+      call WriteHDF5CoordinatesUGridXDMFExplicit(realization_base,option, &
+                                                 new_grp_id)
+    endif
     num_cells = realization_base%output_option%xmf_vert_len
     call h5gclose_f(new_grp_id,hdf5_err)
     call h5fclose_f(new_file_id,hdf5_err)    
-  endif   
+  endif 
+  
+  if (first .and. output_option%print_hdf5_connection_ids) then
+    call WriteHDF5ConnectionIds(realization_base,option,file_id)
+  endif  
   
   if (write_xdmf) then
     option%io_buffer = '--> write xmf output file: ' // trim(xmf_filename)
@@ -1112,6 +1177,14 @@ subroutine OutputHDF5UGridXDMFExplicit(realization_base,var_list_type)
                                   option)
   call DiscretizationCreateVector(discretization,ONEDOF,natural_vec,NATURAL, &
                                   option)
+  
+  if (output_option%print_face_variable) then
+    call OutputGetNumberOfFaceConnectionLocal(realization_base, nlconnection)
+    call MPI_Allreduce(nlconnection,total_num_connections,ONE_INTEGER_MPI, &
+                       MPIU_INTEGER, MPI_SUM,option%mycomm,ierr);CHKERRQ(ierr)
+    call VecCreateMPI(option%mycomm,nlconnection, total_num_connections, & 
+                      face_vec,ierr);CHKERRQ(ierr)
+  endif
 
   select case (var_list_type)
 
@@ -1120,15 +1193,31 @@ subroutine OutputHDF5UGridXDMFExplicit(realization_base,var_list_type)
       cur_variable => output_option%output_snap_variable_list%first
       do
         if (.not.associated(cur_variable)) exit
-        call OutputGetVariableArray(realization_base,global_vec,cur_variable)
-        call DiscretizationGlobalToNatural(discretization,global_vec, &
-                                           natural_vec,ONEDOF)
+        
         string = cur_variable%name
         if (len_trim(cur_variable%units) > 0) then
           word = cur_variable%units
           call HDF5MakeStringCompatible(word)
           string = trim(string) // ' [' // trim(word) // ']'
         endif
+        
+        if (cur_variable%icategory == OUTPUT_FACE) then
+          call OutputGetVariableArray(realization_base,face_vec,cur_variable)
+          if (cur_variable%iformat == 0) then
+            call HDF5WriteDataSetFromVec(string,option,face_vec,grp_id, &
+                                         H5T_NATIVE_DOUBLE)
+          else
+            call HDF5WriteDataSetFromVec(string,option,face_vec,grp_id, &
+                                         H5T_NATIVE_INTEGER)
+          endif
+          cur_variable => cur_variable%next
+          cycle
+        endif
+        
+        call OutputGetVariableArray(realization_base,global_vec,cur_variable)
+        call DiscretizationGlobalToNatural(discretization,global_vec, &
+                                           natural_vec,ONEDOF)
+
         if (cur_variable%iformat == 0) then
           call HDF5WriteDataSetFromVec(string,option,natural_vec, &
                                        grp_id,H5T_NATIVE_DOUBLE)
@@ -1275,6 +1364,8 @@ subroutine OutputHDF5UGridXDMFExplicit(realization_base,var_list_type)
 
   call VecDestroy(global_vec,ierr);CHKERRQ(ierr)
   call VecDestroy(natural_vec,ierr);CHKERRQ(ierr)
+  if (output_option%print_face_variable) &
+                call VecDestroy(face_vec,ierr);CHKERRQ(ierr)
 
   call h5gclose_f(grp_id,hdf5_err)
   call h5fclose_f(file_id,hdf5_err)
@@ -2172,6 +2263,11 @@ subroutine WriteHDF5CoordinatesUGridXDMF(realization_base,option,file_id)
   call VecDestroy(global_vec,ierr);CHKERRQ(ierr)
   call VecDestroy(natural_vec,ierr);CHKERRQ(ierr)
   call UGridDMDestroy(ugdm_element)
+  
+  ! Added by Moise Rousseau 09/16/20
+  if (realization_base%output_option%print_hdf5_connection_ids) then
+    call WriteHDF5ConnectionIds(realization_base,option,file_id)
+  endif
 
   ! Cell center X/Y/Z
   call VecCreateMPI(option%mycomm,grid%nlmax, &
@@ -2408,6 +2504,170 @@ subroutine WriteHDF5CoordinatesUGridXDMF(realization_base,option,file_id)
 
 end subroutine WriteHDF5CoordinatesUGridXDMF
 
+  
+! ************************************************************************** !
+
+subroutine WriteHDF5ConnectionIds(realization_base,option,file_id)
+  ! 
+  ! Write the detail of connection ids in the output HDF5 file
+  ! under file_id / Connection Ids
+  ! Used to index the velocity_at_face_by_connection and 
+  ! permeability_at_face as well as all other face centered variables
+  ! 
+  ! Author: Moise Rousseau, Polytechnique Montreal
+  ! Date: 09/16/20
+  ! 
+  
+  use Realization_Base_class, only : realization_base_type
+  use hdf5
+  use Option_module
+  use Connection_module
+  use Coupler_module
+  use Variables_module
+  use Grid_module
+  
+  implicit none
+  
+  class(realization_base_type) :: realization_base
+  type(option_type), pointer :: option
+  integer(HID_T) :: file_id
+  
+  type(connection_set_type), pointer :: cur_connection_set
+  type(coupler_type), pointer :: boundary_condition
+  type(grid_type), pointer :: grid
+  PetscInt :: icount, iconn, istart, ibound_con
+  PetscInt :: ghosted_id, nat_id_up, nat_id_dn
+  PetscInt :: total_num_connections, nlconnection !local connection
+  PetscInt, allocatable :: int_array(:)
+  PetscErrorCode :: ierr
+  
+  integer(HID_T) :: data_type
+  integer(HID_T) :: grp_id
+  integer(HID_T) :: file_space_id
+  integer(HID_T) :: realization_set_id
+  integer(HID_T) :: memory_space_id
+  integer(HID_T) :: data_set_id
+  integer(HID_T) :: prop_id
+  integer(HSIZE_T) :: dims(3)
+  integer(HSIZE_T) :: start(3), length(3), stride(3)
+  PetscMPIInt :: rank_mpi,file_space_rank_mpi
+  PetscMPIInt :: hdf5_flag
+  PetscMPIInt, parameter :: ON=1, OFF=0
+  PetscMPIInt :: hdf5_err
+  character(len=MAXSTRINGLENGTH) :: string
+  
+  grid => realization_base%patch%grid
+  
+  ! Ask for space and organize it
+  ! number of connections
+  total_num_connections = 0
+  nlconnection = 0
+  call OutputGetNumberOfFaceConnectionLocal(realization_base, nlconnection)
+
+  ! memory space which is a 1D vector
+  rank_mpi = 1
+  dims = 0
+  dims(1) = nlconnection * 2
+  call h5screate_simple_f(rank_mpi,dims,memory_space_id,hdf5_err,dims)
+   
+  ! file space which is a 2D block
+  call MPI_Allreduce(nlconnection,total_num_connections,ONE_INTEGER_MPI, &
+                     MPIU_INTEGER, MPI_SUM,option%mycomm,ierr);CHKERRQ(ierr)
+  rank_mpi = 2
+  dims = 0
+  dims(2) = total_num_connections
+  dims(1) = 2
+  call h5pcreate_f(H5P_DATASET_CREATE_F,prop_id,hdf5_err)
+  
+  string = "Connection Ids" // CHAR(0)
+
+  call h5eset_auto_f(OFF,hdf5_err)
+  call h5dopen_f(file_id,string,data_set_id,hdf5_err)
+  hdf5_flag = hdf5_err
+  call h5eset_auto_f(ON,hdf5_err)
+  if (hdf5_flag < 0) then
+    ! if the dataset does not exist, create it
+    call h5screate_simple_f(rank_mpi,dims,file_space_id,hdf5_err,dims)
+    call h5dcreate_f(file_id,string,H5T_NATIVE_INTEGER,file_space_id, &
+                     data_set_id,hdf5_err,prop_id)
+  else
+    call h5dget_space_f(data_set_id,file_space_id,hdf5_err)
+  endif
+
+  call h5pclose_f(prop_id,hdf5_err)
+  
+  !geh: cannot use dims(1) in MPI_Allreduce as it causes errors on 
+  !     Juqueen
+  istart = 0
+  call MPI_Exscan(nlconnection, istart, ONE_INTEGER_MPI, MPIU_INTEGER, &
+                  MPI_SUM, option%mycomm, ierr);CHKERRQ(ierr)
+  start(2) = istart
+  start(1) = 0
+  
+  length(2) = nlconnection
+  length(1) = 2
+
+  stride = 1
+  call h5sselect_hyperslab_f(file_space_id,H5S_SELECT_SET_F,start,length, &
+                             hdf5_err,stride,stride)
+
+  ! write the data
+  call h5pcreate_f(H5P_DATASET_XFER_F,prop_id,hdf5_err)
+#ifndef SERIAL_HDF5
+    call h5pset_dxpl_mpio_f(prop_id,H5FD_MPIO_INDEPENDENT_F, &
+                            hdf5_err)
+#endif
+
+  allocate(int_array(nlconnection*2))
+  int_array = UNINITIALIZED_INTEGER
+  icount = 1
+  nullify(boundary_condition)
+  nullify(cur_connection_set)
+  !internal connections
+  cur_connection_set => grid%internal_connection_set_list%first
+  do
+    do iconn = 1, cur_connection_set%num_connections
+      nat_id_up = grid%nG2A( cur_connection_set%id_up(iconn) )
+      nat_id_dn = grid%nG2A( cur_connection_set%id_dn(iconn) )
+      if (cur_connection_set%local(iconn) == 0) cycle
+      int_array(icount) = nat_id_dn
+      int_array(icount + 1) = nat_id_up
+      icount = icount + 2
+    enddo
+    cur_connection_set => cur_connection_set%next
+    if (.not.associated(cur_connection_set)) exit
+  enddo
+  
+  ! boundary connections
+  boundary_condition => & 
+             realization_base%patch%boundary_condition_list%first
+  do
+    if (.not.associated(boundary_condition)) exit
+    ibound_con = - boundary_condition%id
+    cur_connection_set => boundary_condition%connection_set
+    do iconn = 1, cur_connection_set%num_connections
+      ghosted_id = grid%nL2G( cur_connection_set%id_dn(iconn) )
+      nat_id_dn = grid%nG2A( ghosted_id )
+      int_array(icount) = nat_id_dn
+      int_array(icount + 1) = ibound_con
+      icount = icount + 2
+    enddo
+    boundary_condition => boundary_condition%next
+  enddo
+  
+  call PetscLogEventBegin(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr)
+  call h5dwrite_f(data_set_id,H5T_NATIVE_INTEGER,int_array,dims, &
+                  hdf5_err,memory_space_id,file_space_id,prop_id)
+  call PetscLogEventEnd(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr) 
+  
+  call h5pclose_f(prop_id,hdf5_err)
+  call h5dclose_f(data_set_id,hdf5_err)
+  call h5sclose_f(file_space_id,hdf5_err)
+  
+  deallocate(int_array)
+
+end subroutine WriteHDF5ConnectionIds
+
 ! ************************************************************************** !
 
 subroutine DetermineNumVertices(realization_base,option)
diff --git a/src/pflotran/output_sensitivity.F90 b/src/pflotran/output_sensitivity.F90
new file mode 100644
index 000000000..78150b518
--- /dev/null
+++ b/src/pflotran/output_sensitivity.F90
@@ -0,0 +1,663 @@
+
+module Sensitivity_Output_module
+
+#include "petsc/finclude/petscsys.h"
+  use petscsys
+#include "petsc/finclude/petscsnes.h"
+  use petscsnes
+#include "petsc/finclude/petscmat.h"
+  use petscmat
+  use hdf5
+  use PFLOTRAN_Constants_module
+  use Sensitivity_Aux_module
+  
+  implicit none
+
+  private
+  
+  PetscMPIInt, parameter :: ON=1, OFF=0
+  
+  public :: OutputSensitivity
+
+contains
+
+! ************************************************************************** !
+
+subroutine OutputSensitivity(J,grid,option,output_option, &
+                             sensitivity_output_option,variable,mode)
+  ! 
+  ! Output the J matrix in the desired format
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 20 dec 2020
+  ! 
+  
+  use Option_module
+  use Output_Aux_module
+  use HDF5_module
+  use Output_HDF5_module
+  use Grid_module
+  
+  implicit none
+  
+  Mat :: J
+  type(grid_type), pointer :: grid
+  type(option_type), pointer :: option
+  type(output_option_type), pointer :: output_option
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  character(len=MAXWORDLENGTH) :: mode
+  
+  PetscBool :: first
+  integer(HID_T) :: file_id
+  character(len=MAXSTRINGLENGTH) :: filename
+  type(sensitivity_output_variable_type) :: variable
+  PetscViewer :: viewer
+  PetscErrorCode :: ierr
+  
+  call OutputSensitivityCreateFilename(sensitivity_output_option,option,&
+                                       variable%name,mode,filename)
+  
+  select case(sensitivity_output_option%format)
+    case(SENSITIVITY_OUTPUT_HDF5)
+      call OutputSensitivityOpenHDF5(option,sensitivity_output_option,&
+                                     filename,file_id,first)
+      if (first) then
+        call OutputSensitivityWriteMatrixIJ(J,grid,option,&
+                                            sensitivity_output_option,file_id)
+        !call OutputHDF5Provenance(option, output_option, file_id)
+      endif
+      call OutputSensitivityWriteMatrixData(J,grid,option,output_option, &
+                                            sensitivity_output_option, &
+                                            variable,file_id)
+        !call OutputHDF5Provenance(option, output_option, file_id)
+      call OutputHDF5CloseFile(option,file_id)
+    case(SENSITIVITY_OUTPUT_ASCII)
+      option%io_buffer = '--> writing sensitivity to ascii file: ' // &
+                                                     trim(filename)
+      call PrintMsg(option)
+      call PetscViewerASCIIOpen(option%mycomm,filename, &
+                                 viewer,ierr);CHKERRQ(ierr)
+      call MatView(J,viewer,ierr);CHKERRQ(ierr)
+      call PetscViewerDestroy(viewer,ierr);CHKERRQ(ierr)
+    case(SENSITIVITY_OUTPUT_MATLAB)
+      option%io_buffer = '--> writing sensitivity to matlab ascii file: ' // &
+                                                     trim(filename)
+      call PrintMsg(option)
+      call PetscViewerASCIIOpen(option%mycomm,filename, &
+                                 viewer,ierr);CHKERRQ(ierr)
+      call PetscViewerPushFormat(viewer,PETSC_VIEWER_ASCII_MATLAB, &
+                                 ierr);CHKERRQ(ierr)
+      call MatView(J,viewer,ierr);CHKERRQ(ierr)
+      call PetscViewerPopFormat(viewer,ierr);CHKERRQ(ierr)
+      call PetscViewerDestroy(viewer,ierr);CHKERRQ(ierr)
+    case(SENSITIVITY_OUTPUT_BINARY)
+      option%io_buffer = '--> writing sensitivity to matlab binary file: ' // &
+                                                     trim(filename)
+      call PrintMsg(option)
+      call PetscViewerBinaryOpen(option%mycomm,filename, &
+                                 FILE_MODE_WRITE,viewer,ierr);CHKERRQ(ierr)
+      call MatView(J,viewer,ierr);CHKERRQ(ierr)
+      call PetscViewerPopFormat(viewer,ierr);CHKERRQ(ierr)
+      call PetscViewerDestroy(viewer,ierr);CHKERRQ(ierr)
+    case default
+  end select
+  
+end subroutine OutputSensitivity
+
+! ************************************************************************** !
+
+subroutine OutputSensitivityOpenHDF5(option,sensitivity_output_option, &
+                                     filename,file_id,first)
+  !
+  ! Determine the propper hdf5 sensitivity output file name and open it.
+  !
+  ! Return the file handle and 'first' flag indicating if this is the
+  ! first time the file has been opened.
+  !
+  
+  use Option_module
+  use Output_Aux_module
+  use hdf5
+  use String_module
+
+  implicit none
+
+  type(option_type), pointer :: option
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  character(len=MAXSTRINGLENGTH) :: filename
+  PetscBool, intent(out) :: first
+  integer(HID_T), intent(out) :: file_id
+  
+  PetscErrorCode :: ierr
+  integer(HID_T) :: prop_id
+  PetscMPIInt :: hdf5_err
+
+  call h5pcreate_f(H5P_FILE_ACCESS_F,prop_id,hdf5_err)
+#ifndef SERIAL_HDF5
+  call h5pset_fapl_mpio_f(prop_id,option%mycomm,MPI_INFO_NULL,hdf5_err)
+#endif
+  if (sensitivity_output_option%first_plot_flag) then
+    first = PETSC_TRUE
+    sensitivity_output_option%first_plot_flag = PETSC_FALSE
+  else
+    first = PETSC_FALSE
+  endif
+  if (.not. first) then
+    call h5eset_auto_f(OFF,hdf5_err)
+    call h5fopen_f(filename,H5F_ACC_RDWR_F,file_id,hdf5_err,prop_id)
+    if (hdf5_err /= 0) first = PETSC_TRUE
+    call h5eset_auto_f(ON,hdf5_err)
+  endif
+  if (first) then 
+    call h5fcreate_f(filename,H5F_ACC_TRUNC_F,file_id,hdf5_err, &
+                      H5P_DEFAULT_F,prop_id)
+  endif
+  call h5pclose_f(prop_id,hdf5_err)
+
+  if (first) then
+    option%io_buffer = '--> creating sensitivity hdf5 output file: ' // &
+                                                     trim(filename)
+  else
+    option%io_buffer = '--> appending to sensitivity hdf5 output file: ' // &
+                                                     trim(filename)
+  endif
+  call PrintMsg(option)
+
+end subroutine OutputSensitivityOpenHDF5
+
+! ************************************************************************** !
+
+subroutine OutputSensitivityCreateFilename(sensitivity_output_option, &
+                                           option,variable_name,mode,filename)
+  ! 
+  ! Create sensitivity output filename
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  
+  use Option_module
+  use String_module
+
+  implicit none
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  type(option_type), pointer :: option
+  character(len=MAXWORDLENGTH) :: variable_name
+  character(len=MAXWORDLENGTH) :: mode
+  character(len=MAXSTRINGLENGTH), intent(out) :: filename
+  
+  PetscInt :: file_number
+  character(len=MAXSTRINGLENGTH) :: string, string2
+  
+  if (sensitivity_output_option%format == SENSITIVITY_OUTPUT_HDF5 .and. &
+      sensitivity_output_option%timestep_per_hdf5_file > 0) then
+      file_number = floor(real(sensitivity_output_option%plot_number) / &
+                         sensitivity_output_option%timestep_per_hdf5_file)
+  else
+    file_number = sensitivity_output_option%plot_number
+  endif
+  if (file_number < 10) then
+    write(string,'("00",i1)') file_number
+  else if (file_number < 100) then
+    write(string,'("0",i2)') file_number  
+  else if (file_number < 1000) then
+    write(string,'(i3)') file_number  
+  else if (file_number < 10000) then
+    write(string,'(i4)') file_number
+  else if (file_number < 100000) then
+    write(string,'(i5)') file_number
+  else
+    !write(option%io_buffer, '(i10)') file_number
+    !call PrintMsg(option)
+    option%io_buffer = 'Plot number exceeds current maximum of 10^5.'
+    call PrintErrMsgToDev(option,'ask for a higher maximum')
+  endif 
+  string = adjustl(string)
+
+  if (sensitivity_output_option%format == SENSITIVITY_OUTPUT_HDF5) then
+    if (sensitivity_output_option%timestep_per_hdf5_file > 0) then
+      filename = trim(option%global_prefix) // trim(option%group_prefix) // &
+                  '-sensitivity-' // trim(mode) // '-' // trim(string) // '.h5'
+    else
+      filename = trim(option%global_prefix) // trim(option%group_prefix) // &
+                  '-sensitivity-flow.h5'
+    endif
+  else
+    string2 = trim(variable_name)
+    call StringToLower(string2)
+    filename = trim(option%global_prefix) // trim(option%group_prefix) // &
+                '-sensitivity-' // trim(mode) // '-'  // trim(string2) // &
+                 '-' // trim(string)
+    select case(sensitivity_output_option%format)
+      case(SENSITIVITY_OUTPUT_MATLAB)
+        filename = trim(filename) // '.mat'
+      case(SENSITIVITY_OUTPUT_BINARY)
+        filename = trim(filename) // '.bin'
+      case(SENSITIVITY_OUTPUT_ASCII)
+        filename = trim(filename) // '.txt'
+    end select
+  endif
+ 
+end subroutine OutputSensitivityCreateFilename
+
+! ************************************************************************** !
+
+subroutine OutputHDF5CloseFile(file_id)
+
+  use hdf5
+
+  implicit none
+
+  integer(HID_T), intent(in) :: file_id
+  integer :: hdf5_err
+
+  call h5fclose_f(file_id, hdf5_err)
+
+end subroutine OutputHDF5CloseFile
+
+! ************************************************************************** !
+
+subroutine OutputSensitivityWriteMatrixIJ(J,grid,option,&
+                                          sensitivity_output_option,file_id)
+  ! 
+  ! Write matrix IJ data
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 20 dec 2020
+  ! 
+
+  use Option_module
+  use hdf5
+  use HDF5_module, only : HDF5WriteDataSetFromVec
+  use String_module
+  use Grid_module
+  use Connection_module
+  
+  Mat :: J
+  type(grid_type), pointer :: grid
+  type(option_type), pointer :: option
+  type(connection_set_type), pointer :: cur_connection_set
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  integer(HID_T) :: file_id
+  
+  !get indices
+  PetscInt, allocatable :: local_i(:), local_j(:)
+  PetscReal :: info(MAT_INFO_SIZE)
+  PetscInt :: mat_non_zeros_local, mat_non_zeros_global
+  PetscInt :: local_id, ghosted_id, natural_id, count
+  PetscInt :: nlmax, iconn, id_up, id_dn
+  PetscInt :: ierr
+  !save indices
+  character(len=MAXSTRINGLENGTH) :: string
+  integer(HID_T) :: file_space_id,memory_space_id, data_set_id, prop_id
+  PetscMPIInt :: rank_mpi
+  integer(HSIZE_T) :: dims(1)
+  integer(HSIZE_T) :: start(1), length(1), stride(1)
+  integer(HID_T) :: grp_id
+  PetscMPIInt :: hdf5_err
+  PetscInt :: istart
+  
+  cur_connection_set => grid%internal_connection_set_list%first
+  
+  !get matrix size for output vector
+  !MAT_LOCAL = 1
+  call MatGetInfo(J,1,info,ierr);CHKERRQ(ierr)
+  mat_non_zeros_local = info(MAT_INFO_NZ_ALLOCATED)
+  !MAT_SUM_GLOBAL = 3
+  call MatGetInfo(J, 3, info, ierr);CHKERRQ(ierr)
+  mat_non_zeros_global = info(MAT_INFO_NZ_ALLOCATED)
+  
+  !create output array
+  allocate(local_i(mat_non_zeros_local))
+  allocate(local_j(mat_non_zeros_local))
+  local_i = UNINITIALIZED_INTEGER
+  local_j = UNINITIALIZED_INTEGER
+  if (associated(grid%unstructured_grid)) then 
+    nlmax = grid%unstructured_grid%nlmax
+  else
+    nlmax = grid%structured_grid%nlmax
+  endif
+  
+  count = 1
+  !diag term
+  do local_id = 1, nlmax
+    ghosted_id = local_id
+    natural_id = grid%nG2A(ghosted_id)
+    local_i(count) = natural_id
+    local_j(count) = natural_id
+    count = count + 1
+  enddo
+  
+  !neighbors term
+  cur_connection_set => grid%internal_connection_set_list%first
+  do
+    if (.not. associated(cur_connection_set)) exit
+    do iconn = 1, cur_connection_set%num_connections
+      id_up = cur_connection_set%id_up(iconn)
+      id_dn = cur_connection_set%id_dn(iconn)
+      !get values
+      if (id_up <= nlmax) then ! local
+        natural_id = grid%nG2A(id_up)
+        local_i(count) = natural_id
+        natural_id = grid%nG2A(id_dn)
+        local_j(count) = natural_id
+        count = count + 1
+      endif
+      if (id_dn <= nlmax) then ! local
+        natural_id = grid%nG2A(id_dn)
+        local_i(count) = natural_id
+        natural_id = grid%nG2A(id_up)
+        local_j(count) = natural_id
+        count = count + 1
+      endif
+    enddo
+    cur_connection_set => cur_connection_set%next
+  enddo
+  
+	
+  !output it
+  !create group
+  string = "Mat Structure"
+  call h5gcreate_f(file_id,string,grp_id,hdf5_err,OBJECT_NAMELEN_DEFAULT_F)
+
+  ! -- ROWS -- !
+  ! Ask for space and organize it
+  ! memory space which is a 1D vector
+  rank_mpi = 1
+  dims(1) = mat_non_zeros_local
+  call h5screate_simple_f(rank_mpi,dims,memory_space_id,hdf5_err,dims)
+  ! file space which is a 2D block
+  dims(1) = mat_non_zeros_global
+  call h5pcreate_f(H5P_DATASET_CREATE_F,prop_id,hdf5_err)
+  call h5pset_chunk_f(prop_id,1,dims,hdf5_err)
+  !set the hdf5 filter (for compression)
+  if (sensitivity_output_option%hdf5_compress /= 0) then
+    call h5pset_deflate_f(prop_id,sensitivity_output_option%hdf5_compress,&
+                          hdf5_err)
+  endif
+  
+  string = "Row Indices" // CHAR(0)
+  call h5eset_auto_f(OFF,hdf5_err)
+  call h5dopen_f(grp_id,string,data_set_id,hdf5_err)
+  if (hdf5_err < 0) then
+    call h5eset_auto_f(ON,hdf5_err)
+    ! if the dataset does not exist, create it
+    call h5screate_simple_f(rank_mpi,dims,file_space_id,hdf5_err,dims)
+    call h5dcreate_f(grp_id,string,H5T_NATIVE_INTEGER,file_space_id, &
+                     data_set_id,hdf5_err,prop_id)
+  else
+    call h5eset_auto_f(ON,hdf5_err)
+    call h5dget_space_f(data_set_id,file_space_id,hdf5_err)
+  endif
+  call h5pclose_f(prop_id,hdf5_err)
+  
+  !geh: cannot use dims(1) in MPI_Allreduce as it causes errors on 
+  !     Juqueen
+  istart = 0
+  call MPI_Exscan(mat_non_zeros_local, istart, ONE_INTEGER_MPI, MPIU_INTEGER, &
+                  MPI_SUM, option%mycomm, ierr);CHKERRQ(ierr)
+  start(1) = istart
+  length(1) = mat_non_zeros_local
+  stride = 1
+  call h5sselect_hyperslab_f(file_space_id,H5S_SELECT_SET_F,start,length, &
+                             hdf5_err,stride,stride)
+  ! write the data
+  call h5pcreate_f(H5P_DATASET_XFER_F,prop_id,hdf5_err)
+#ifndef SERIAL_HDF5
+    call h5pset_dxpl_mpio_f(prop_id,H5FD_MPIO_COLLECTIVE_F, &
+                            hdf5_err)
+#endif
+  !call PetscLogEventBegin(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr)
+  call h5dwrite_f(data_set_id,H5T_NATIVE_INTEGER,local_i,dims, &
+                  hdf5_err,memory_space_id,file_space_id,prop_id)
+  !call PetscLogEventEnd(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr) 
+  
+  call h5pclose_f(prop_id,hdf5_err)
+  call h5dclose_f(data_set_id,hdf5_err)
+  call h5sclose_f(file_space_id,hdf5_err)
+
+  ! -- COLUMNS -- !
+  ! Ask for space and organize it
+  ! memory space which is a 1D vector
+  rank_mpi = 1
+  dims(1) = mat_non_zeros_local
+  call h5screate_simple_f(rank_mpi,dims,memory_space_id,hdf5_err,dims)
+  ! file space which is a 2D block
+  dims(1) = mat_non_zeros_global
+  call h5pcreate_f(H5P_DATASET_CREATE_F,prop_id,hdf5_err)
+  call h5pset_chunk_f(prop_id,1,dims,hdf5_err)
+  !set the hdf5 filter (for compression)
+  if (sensitivity_output_option%hdf5_compress /= 0) then
+    call h5pset_deflate_f(prop_id,sensitivity_output_option%hdf5_compress,&
+                          hdf5_err)
+  endif
+  
+  string = "Column Indices" // CHAR(0)
+  call h5eset_auto_f(OFF,hdf5_err)
+  call h5dopen_f(grp_id,string,data_set_id,hdf5_err)
+  if (hdf5_err < 0) then
+    call h5eset_auto_f(ON,hdf5_err)
+    ! if the dataset does not exist, create it
+    call h5screate_simple_f(rank_mpi,dims,file_space_id,hdf5_err,dims)
+    call h5dcreate_f(grp_id,string,H5T_NATIVE_INTEGER,file_space_id, &
+                     data_set_id,hdf5_err,prop_id)
+  else
+    call h5eset_auto_f(ON,hdf5_err)
+    call h5dget_space_f(data_set_id,file_space_id,hdf5_err)
+  endif
+  call h5pclose_f(prop_id,hdf5_err)
+  
+  !geh: cannot use dims(1) in MPI_Allreduce as it causes errors on 
+  !     Juqueen
+  istart = 0
+  call MPI_Exscan(mat_non_zeros_local, istart, ONE_INTEGER_MPI, MPIU_INTEGER, &
+                  MPI_SUM, option%mycomm, ierr);CHKERRQ(ierr)
+  start(1) = istart
+  length(1) = mat_non_zeros_local
+  stride = 1
+  call h5sselect_hyperslab_f(file_space_id,H5S_SELECT_SET_F,start,length, &
+                             hdf5_err,stride,stride)
+  ! write the data
+  call h5pcreate_f(H5P_DATASET_XFER_F,prop_id,hdf5_err)
+#ifndef SERIAL_HDF5
+    call h5pset_dxpl_mpio_f(prop_id,H5FD_MPIO_COLLECTIVE_F, &
+                            hdf5_err)
+#endif
+  !call PetscLogEventBegin(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr)
+  call h5dwrite_f(data_set_id,H5T_NATIVE_INTEGER,local_j,dims, &
+                  hdf5_err,memory_space_id,file_space_id,prop_id)
+  !call PetscLogEventEnd(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr) 
+  
+  call h5pclose_f(prop_id,hdf5_err)
+  call h5dclose_f(data_set_id,hdf5_err)
+  call h5sclose_f(file_space_id,hdf5_err)
+
+  call h5gclose_f(grp_id,hdf5_err)
+  deallocate(local_i)
+  deallocate(local_j)
+                    
+end subroutine OutputSensitivityWriteMatrixIJ
+
+! ************************************************************************** !
+
+subroutine OutputSensitivityWriteMatrixData(J,grid,option,output_option, &
+                                            sensitivity_output_option, &
+                                            variable,file_id)
+  ! 
+  ! Write matrix data
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 20 dec 2020
+  ! 
+  
+  use Option_module
+  use Output_Aux_module
+  use hdf5
+  use String_module
+  use Connection_module
+  use HDF5_module, only : HDF5WriteDataSetFromVec
+  use Grid_module
+  
+  implicit none
+  
+  Mat :: J
+  type(grid_type), pointer :: grid
+  type(option_type), pointer :: option
+  type(output_option_type), pointer :: output_option
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  type(sensitivity_output_variable_type) :: variable
+  integer(HID_T) :: file_id
+  
+  !compute sensitivity
+  PetscReal, allocatable :: datas(:)
+  PetscReal :: info(MAT_INFO_SIZE)
+  PetscInt :: mat_non_zeros_local, mat_non_zeros_global
+  PetscInt :: local_id, count
+  PetscInt :: temp_id_in(1), temp_id_out(1), neighbor_id(1)
+  PetscInt :: nlmax, iconn, id_up, id_dn
+  PetscInt :: ierr
+  ISLocalToGlobalMapping :: rmapping,cmapping
+  type(connection_set_type), pointer :: cur_connection_set
+  !save sensitivity
+  character(len=MAXSTRINGLENGTH) :: string
+  integer(HID_T) :: file_space_id,memory_space_id, data_set_id, prop_id
+  PetscMPIInt :: rank_mpi
+  integer(HSIZE_T) :: dims(1)
+  integer(HSIZE_T) :: start(1), length(1), stride(1)
+  integer(HID_T) :: grp_id
+  PetscMPIInt :: hdf5_err
+  PetscInt :: istart
+  
+  !get matrix size for output vector
+  !MAT_LOCAL = 1
+  call MatGetInfo(J, 1, info, ierr);CHKERRQ(ierr)
+  mat_non_zeros_local = info(MAT_INFO_NZ_ALLOCATED)
+  !MAT_SUM_GLOBAL = 3
+  call MatGetInfo(J, 3, info, ierr);CHKERRQ(ierr)
+  mat_non_zeros_global = info(MAT_INFO_NZ_ALLOCATED)
+  call MatGetLocalToGlobalMapping(J,rmapping,cmapping,ierr);CHKERRQ(ierr)
+
+  allocate(datas(mat_non_zeros_local))
+  datas = UNINITIALIZED_DOUBLE
+  if (associated(grid%unstructured_grid)) then 
+    nlmax = grid%unstructured_grid%nlmax
+  else
+    nlmax = grid%structured_grid%nlmax
+  endif
+  
+  count = 1
+  !diag term
+  do local_id = 1, nlmax
+    temp_id_in(1) = local_id - 1
+    call ISLocalToGlobalMappingApply(rmapping,1,temp_id_in, &
+                                     temp_id_out,ierr);CHKERRQ(ierr)
+    call MatGetValues(J,1,temp_id_out(1),1,temp_id_out(1), &
+                      datas(count),ierr);CHKERRQ(ierr)
+    count = count + 1
+  enddo
+  
+  !neighbors term
+  cur_connection_set => grid%internal_connection_set_list%first
+  do
+    if (.not. associated(cur_connection_set)) exit
+    do iconn = 1, cur_connection_set%num_connections
+      id_up = cur_connection_set%id_up(iconn)
+      id_dn = cur_connection_set%id_dn(iconn)
+      !convert ghosted id to mat local index
+      temp_id_in(1) = id_up - 1
+      call ISLocalToGlobalMappingApply(rmapping,1,temp_id_in, &
+                                       temp_id_out,ierr);CHKERRQ(ierr)
+      temp_id_in(1) = id_dn - 1
+      call ISLocalToGlobalMappingApply(cmapping,1,temp_id_in, &
+                                       neighbor_id,ierr);CHKERRQ(ierr)
+      !get values
+      if (id_up <= nlmax) then ! local
+        call MatGetValues(J,1,temp_id_out(1),1,neighbor_id(1), &
+                                 datas(count),ierr);CHKERRQ(ierr)
+        count = count + 1
+      endif
+      if (id_dn <= nlmax) then ! local
+        call MatGetValues(J,1,neighbor_id(1),1,temp_id_out(1), &
+                                 datas(count),ierr);CHKERRQ(ierr)
+        count = count + 1
+      endif
+    enddo
+    cur_connection_set => cur_connection_set%next
+  enddo
+  
+  ! -- Output it ---
+  !open or create the corresponding time group
+  write(string,'(''Time:'',es13.5,x,a1)') &
+        option%time/output_option%tconv,output_option%tunit
+  call h5eset_auto_f(OFF,hdf5_err)
+  call h5gopen_f(file_id,string,grp_id,hdf5_err)
+  if (hdf5_err /= 0) then
+    call h5gcreate_f(file_id,string,grp_id,hdf5_err,OBJECT_NAMELEN_DEFAULT_F)
+  endif
+  call h5eset_auto_f(ON,hdf5_err)
+
+  ! Ask for space and organize it
+  ! memory space which is a 1D vector
+  rank_mpi = 1
+  dims(1) = mat_non_zeros_local
+  call h5screate_simple_f(rank_mpi,dims,memory_space_id,hdf5_err,dims)
+  ! file space which is a 2D block
+  dims(1) = mat_non_zeros_global
+  call h5pcreate_f(H5P_DATASET_CREATE_F,prop_id,hdf5_err)
+  call h5pset_chunk_f(prop_id,1,dims,hdf5_err)
+  
+  !set the hdf5 filter (for compression)
+  if (sensitivity_output_option%hdf5_compress /= 0) then
+    call h5pset_deflate_f(prop_id,sensitivity_output_option%hdf5_compress,&
+                          hdf5_err)
+  endif
+  
+  string = trim(variable%name) // " [" // trim(variable%units) // ']'
+  call h5eset_auto_f(OFF,hdf5_err)
+  call h5dopen_f(grp_id,string,data_set_id,hdf5_err)
+  if (hdf5_err < 0) then
+    call h5eset_auto_f(ON,hdf5_err)
+    ! if the dataset does not exist, create it
+    call h5screate_simple_f(rank_mpi,dims,file_space_id,hdf5_err,dims)
+    call h5dcreate_f(grp_id,string,H5T_NATIVE_DOUBLE,file_space_id, &
+                     data_set_id,hdf5_err,prop_id)
+  else
+    call h5eset_auto_f(ON,hdf5_err)
+    call h5dget_space_f(data_set_id,file_space_id,hdf5_err)
+  endif
+  call h5pclose_f(prop_id,hdf5_err)
+  
+  !geh: cannot use dims(1) in MPI_Allreduce as it causes errors on 
+  !     Juqueen
+  istart = 0
+  call MPI_Exscan(mat_non_zeros_local, istart, ONE_INTEGER_MPI, MPIU_INTEGER, &
+                  MPI_SUM, option%mycomm, ierr);CHKERRQ(ierr)
+  start(1) = istart
+  length(1) = mat_non_zeros_local
+  stride = 1
+  call h5sselect_hyperslab_f(file_space_id,H5S_SELECT_SET_F,start,length, &
+                             hdf5_err,stride,stride)
+  
+  ! write the data
+  call h5pcreate_f(H5P_DATASET_XFER_F,prop_id,hdf5_err)
+#ifndef SERIAL_HDF5
+    call h5pset_dxpl_mpio_f(prop_id,H5FD_MPIO_COLLECTIVE_F, &
+                            hdf5_err)
+#endif
+  !call PetscLogEventBegin(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr)
+  call h5dwrite_f(data_set_id,H5T_NATIVE_DOUBLE,datas,dims, &
+                  hdf5_err,memory_space_id,file_space_id,prop_id)
+  !call PetscLogEventEnd(logging%event_h5dwrite_f,ierr);CHKERRQ(ierr) 
+  
+  call h5pclose_f(prop_id,hdf5_err)
+  call h5dclose_f(data_set_id,hdf5_err)
+  call h5sclose_f(file_space_id,hdf5_err)
+
+  call h5gclose_f(grp_id,hdf5_err)
+  deallocate(datas)
+
+end subroutine OutputSensitivityWriteMatrixData
+
+! ************************************************************************** !
+ 
+end module
diff --git a/src/pflotran/patch.F90 b/src/pflotran/patch.F90
index 8be332937..f9d5a6bfc 100644
--- a/src/pflotran/patch.F90
+++ b/src/pflotran/patch.F90
@@ -6202,9 +6202,16 @@ subroutine PatchGetVariable1(patch,field,reaction_base,option, &
       enddo
     case(K_ORTHOGONALITY_ERROR)
       if (grid%itype == IMPLICIT_UNSTRUCTURED_GRID) then
-        call PatchGetKOrthogonalityError(grid, material_auxvars, vec_ptr)
+        call PatchGetKOrthogonalityError(grid,material_auxvars,vec_ptr)
         !vec_ptr(:) = UNINITIALIZED_DOUBLE
       endif
+    case(FACE_PERMEABILITY,FACE_AREA,FACE_UPWIND_FRACTION, &
+         FACE_NON_ORTHO_ANGLE, FACE_DISTANCE_BETWEEN_CENTER,&
+         FACE_NORMAL_X, FACE_NORMAL_Y, FACE_NORMAL_Z, &
+         FACE_CELL_CENTER_VECTOR_X, FACE_CELL_CENTER_VECTOR_Y, &
+         FACE_CELL_CENTER_VECTOR_Z) 
+        ! or all other connection indexed output
+        call PatchGetFaceVariable(patch,material_auxvars,ivar,vec_ptr,option)
     case default
       call PatchUnsupportedVariable(ivar,option)
   end select
@@ -8482,6 +8489,237 @@ end subroutine PatchGetKOrthogonalityError
 
 ! ************************************************************************** !
 
+subroutine PatchGetFaceVariable(patch,material_auxvars,ivar,vec_ptr,option)
+  !
+  ! Populate the vec_ptr with face variable
+  !
+  ! Author: Moise Rousseau
+  ! Date: 06/28/20
+  
+  use Connection_module
+  use Coupler_module
+  use Variables_module
+  use Material_Aux_class
+  use Utility_module, only : DotProduct, CrossProduct
+  use Option_module
+  use Geometry_module  
+  
+  type(patch_type), pointer :: patch
+  class(material_auxvar_type), pointer :: material_auxvars(:)
+  type(option_type) :: option
+  PetscInt :: ivar
+  PetscReal, pointer :: vec_ptr(:)
+  
+  class (connection_set_type), pointer :: cur_connection_set
+  type(coupler_type), pointer :: boundary_condition
+  PetscInt :: iconn, icount
+  PetscInt :: local_id_up, local_id_dn, ghosted_id_up, ghosted_id_dn, face_id
+  PetscReal :: perm_up, perm_dn, dd_up, dd_dn, dist(-1:3)
+  PetscReal :: temp_real
+  type(point3d_type) :: point1, point2, point3
+  PetscReal :: v1(3), v2(3), v3(3)
+
+  nullify(boundary_condition)
+  nullify(cur_connection_set)
+  !internal connections
+  icount = 1
+  cur_connection_set => patch%grid%internal_connection_set_list%first
+  do
+    if (.not.associated(cur_connection_set)) exit
+    select case(ivar)
+      case(FACE_PERMEABILITY)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          !Cell ids from both side of the face
+          ghosted_id_up = cur_connection_set%id_up(iconn)
+          ghosted_id_dn = cur_connection_set%id_dn(iconn)
+          dist(:) = cur_connection_set%dist(:,iconn)
+          dd_up = dist(-1)
+          dd_dn = 1.d0-dd_up
+          perm_up = 0.
+          perm_dn = 0.
+          call material_auxvars(ghosted_id_up)%PermeabilityTensorToScalar( &
+                                    dist,perm_up)
+          call material_auxvars(ghosted_id_dn)%PermeabilityTensorToScalar( &
+                                    dist,perm_dn)
+          vec_ptr(icount) = (perm_up * perm_dn)/(dd_up*perm_dn + dd_dn*perm_up)
+          icount = icount + 1
+        enddo
+      case(FACE_AREA)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          vec_ptr(icount) = cur_connection_set%area(iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_NON_ORTHO_ANGLE)
+        if (patch%grid%itype == STRUCTURED_GRID .or. &
+            patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+            vec_ptr = -1. !not defined
+            return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            if (cur_connection_set%local(iconn) == 0) cycle
+            v3 = cur_connection_set%normal(1:3,iconn)
+            temp_real = abs(DotProduct(v3,cur_connection_set%dist(1:3,iconn)))
+            vec_ptr(icount) = 1.d0 - temp_real
+            icount = icount + 1
+          enddo
+        endif
+      case(FACE_UPWIND_FRACTION)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          vec_ptr(icount) = cur_connection_set%dist(-1,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_DISTANCE_BETWEEN_CENTER)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          vec_ptr(icount) = cur_connection_set%dist(0,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_CELL_CENTER_VECTOR_X)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          vec_ptr(icount) = cur_connection_set%dist(1,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_CELL_CENTER_VECTOR_Y)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          vec_ptr(icount) = cur_connection_set%dist(2,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_CELL_CENTER_VECTOR_Z)
+        do iconn = 1, cur_connection_set%num_connections
+          if (cur_connection_set%local(iconn) == 0) cycle
+          vec_ptr(icount) = cur_connection_set%dist(3,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_NORMAL_X)
+        if (patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+          vec_ptr = -1.!for explicit grid we do not know the point nor the face
+          return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            if (cur_connection_set%local(iconn) == 0) cycle
+            vec_ptr(icount) = cur_connection_set%normal(1,iconn)
+            icount = icount + 1
+          enddo
+        endif
+      case(FACE_NORMAL_Y)
+        if (patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+          vec_ptr = -1.!for explicit grid we do not know the point nor the face
+          return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            if (cur_connection_set%local(iconn) == 0) cycle
+            vec_ptr(icount) = cur_connection_set%normal(2,iconn)
+            icount = icount + 1
+          enddo
+        endif
+      case(FACE_NORMAL_Z)
+        if (patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+          vec_ptr = -1.!for explicit grid we do not know the point nor the face
+          return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            if (cur_connection_set%local(iconn) == 0) cycle
+            vec_ptr(icount) = cur_connection_set%normal(3,iconn)
+            icount = icount + 1
+          enddo
+        endif
+    end select
+    cur_connection_set => cur_connection_set%next
+  enddo
+  ! boundary connections
+  boundary_condition => patch%boundary_condition_list%first
+  do
+    if (.not.associated(boundary_condition)) exit
+    cur_connection_set => boundary_condition%connection_set
+    select case(ivar)
+      case(FACE_PERMEABILITY)
+        do iconn = 1, cur_connection_set%num_connections
+          !Cell ids from both side of the face
+          ghosted_id_dn = cur_connection_set%id_dn(iconn)
+          dist(:) = cur_connection_set%dist(:,iconn)
+          call material_auxvars(ghosted_id_dn)%PermeabilityTensorToScalar( &
+                                   dist, perm_dn)
+          vec_ptr(icount) = perm_dn
+          icount = icount + 1
+        enddo
+      case(FACE_AREA)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = cur_connection_set%area(iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_NON_ORTHO_ANGLE)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = 0.
+          icount = icount + 1
+        enddo
+      case(FACE_UPWIND_FRACTION)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = cur_connection_set%dist(-1,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_DISTANCE_BETWEEN_CENTER)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = cur_connection_set%dist(0,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_CELL_CENTER_VECTOR_X)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = cur_connection_set%dist(1,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_CELL_CENTER_VECTOR_Y)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = cur_connection_set%dist(2,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_CELL_CENTER_VECTOR_Z)
+        do iconn = 1, cur_connection_set%num_connections
+          vec_ptr(icount) = cur_connection_set%dist(3,iconn)
+          icount = icount + 1
+        enddo
+      case(FACE_NORMAL_X)
+        if (patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+          vec_ptr = -1.!for explicit grid we do not know the point nor the face
+          return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            vec_ptr(icount) = cur_connection_set%normal(1,iconn)
+            icount = icount + 1
+          enddo
+        endif
+      case(FACE_NORMAL_Y)
+        if (patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+          vec_ptr = -1.!for explicit grid we do not know the point nor the face
+          return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            vec_ptr(icount) = cur_connection_set%normal(2,iconn)
+            icount = icount + 1
+          enddo
+        endif
+      case(FACE_NORMAL_Z)
+        if (patch%grid%itype == EXPLICIT_UNSTRUCTURED_GRID) then
+          vec_ptr = -1.!for explicit grid we do not know the point nor the face
+          return
+        else
+          do iconn = 1, cur_connection_set%num_connections
+            vec_ptr(icount) = cur_connection_set%normal(3,iconn)
+            icount = icount + 1
+          enddo
+        endif
+    end select
+    boundary_condition => boundary_condition%next
+  enddo
+    
+end subroutine PatchGetFaceVariable
+
+! ************************************************************************** !
+
 subroutine PatchGetIntegralFluxConnections(patch,integral_flux,option)
   !
   !
@@ -8499,6 +8737,7 @@ subroutine PatchGetIntegralFluxConnections(patch,integral_flux,option)
   use Connection_module
   use Coupler_module
   use Grid_Unstructured_Cell_module, only : MAX_VERT_PER_FACE
+  use Region_module
 
 
   implicit none
@@ -8658,12 +8897,33 @@ subroutine PatchGetIntegralFluxConnections(patch,integral_flux,option)
   endif
 
   if (associated(by_cell_ids)) then
-    error_string = 'cell ids match the an actual face between these cells'
+    error_string = 'cell ids must match an actual face between these cells'
     num_to_be_found = size(by_cell_ids,2)
     allocate(yet_to_be_found(num_to_be_found))
     yet_to_be_found = PETSC_TRUE
   endif
-
+  
+  if(integral_flux%by_regions) then
+    integral_flux%reg_from => &
+                        RegionGetPtrFromList(integral_flux%reg_from_name, &
+                                             patch%region_list)
+    if (.not.associated(integral_flux%reg_from)) then
+      option%io_buffer = 'Region "' // trim(integral_flux%reg_from_name) // &
+               '" in INTEGRAL_FLUX/BETWEEN_REGIONS/FROM not found in region &
+                list'
+      call PrintErrMsg(option)
+    endif
+    integral_flux%reg_to => &
+                        RegionGetPtrFromList(integral_flux%reg_to_name, &
+                                             patch%region_list)
+    if (.not.associated(integral_flux%reg_to)) then
+      option%io_buffer = 'Region "' // trim(integral_flux%reg_to_name) // &
+               '" in INTEGRAL_FLUX/BETWEEN_REGIONS/TO not found in region &
+                list'
+      call PrintErrMsg(option)
+    endif
+  endif
+      
   array_size = 100
   allocate(connections(array_size))
 
@@ -8874,6 +9134,34 @@ subroutine PatchGetIntegralFluxConnections(patch,integral_flux,option)
               ! not yet supported
           end select
         endif
+        if (.not. found .and. integral_flux%by_regions) then
+          select case(ipass)
+            case(1) ! internal connections
+              do i = 1, integral_flux%reg_from%num_cells
+                if (natural_id_dn == integral_flux%reg_from%cell_ids(i)) then
+                  do ii = 1, integral_flux%reg_to%num_cells
+                    if (natural_id_up == integral_flux%reg_to%cell_ids(ii)) then
+                      found = PETSC_TRUE
+                      same_direction = PETSC_FALSE
+                      exit
+                    endif
+                  enddo
+                  exit
+                endif
+                if (natural_id_up == integral_flux%reg_from%cell_ids(i)) then
+                  do ii = 1, integral_flux%reg_to%num_cells
+                    if (natural_id_dn == integral_flux%reg_to%cell_ids(ii)) then
+                      found = PETSC_TRUE
+                      exit
+                    endif
+                  enddo
+                  exit
+                endif
+              enddo
+            case(2) ! boundary connections
+              ! not yet supported
+          end select
+        endif
         if (found) then
           icount = icount + 1
           if (icount > size(connections)) then
diff --git a/src/pflotran/pflotran_dependencies.txt b/src/pflotran/pflotran_dependencies.txt
index e436c5316..f789165c7 100644
--- a/src/pflotran/pflotran_dependencies.txt
+++ b/src/pflotran/pflotran_dependencies.txt
@@ -158,10 +158,10 @@ factory_subsurface.o : characteristic_curves.o characteristic_curves_thermal.o \
                        pm_auxiliary.o pm_base.o pm_base_pointer.o pm_ert.o \
                        pm_general.o pm_hydrate.o pm_mphase.o pm_nwt.o \
                        pm_osrt.o pm_pnf.o pm_richards.o pm_richards_ts.o \
-                       pm_rt.o pm_subsurface_flow.o pm_th.o pm_th_ts.o \
-                       pm_ufd_biosphere.o pm_ufd_decay.o pm_waste_form.o \
-                       pm_wipp_flow.o pm_wipp_srcsink.o pm_zflow.o \
-                       pmc_auxiliary.o pmc_base.o pmc_geophysics.o \
+                       pm_rt.o pm_sensitivity_analysis.o pm_subsurface_flow.o \
+                       pm_th.o pm_th_ts.o pm_ufd_biosphere.o pm_ufd_decay.o \
+                       pm_waste_form.o pm_wipp_flow.o pm_wipp_srcsink.o \
+                       pm_zflow.o pmc_auxiliary.o pmc_base.o pmc_geophysics.o \
                        pmc_linear.o pmc_subsurface.o pmc_subsurface_osrt.o \
                        pmc_third_party.o reaction.o reaction_aux.o \
                        reaction_database.o reaction_mineral.o \
@@ -335,7 +335,7 @@ inlinesurface.o : global_aux.o inlinesurface_aux.o material_aux.o option.o \
 inlinesurface_aux.o : global_aux.o option.o utility.o
 input_aux.o : option.o pflotran_constants.o string.o units.o
 integral_flux.o : geometry.o input_aux.o option.o pflotran_constants.o \
-                  string.o utility.o
+                  region.o string.o utility.o
 inversion_aux.o : option.o pflotran_constants.o utility.o
 inversion_base.o : driver.o input_aux.o option.o option_inversion.o \
                    pflotran_constants.o string.o timer.o
@@ -443,6 +443,8 @@ output_observation.o : connection.o coupler.o discretization.o field.o \
                        realization_subsurface.o region.o richards.o string.o \
                        th.o utility.o variables.o wipp_flow.o wipp_flow_aux.o \
                        zflow.o
+output_sensitivity.o: output_aux.o option.o string.o hdf5.o output_hdf5.o \
+                      sensitivity_aux.o
 output_tecplot.o : connection.o coupler.o discretization.o dm_kludge.o field.o \
                    grid.o grid_structured.o grid_unstructured_aux.o \
                    grid_unstructured_cell.o logging.o observation.o option.o \
@@ -546,6 +548,9 @@ pm_rt.o : checkpoint.o communicator_base.o communicator_structured.o \
           reaction_aux.o reactive_transport.o reactive_transport_aux.o \
           realization_base.o realization_subsurface.o secondary_continuum.o \
           string.o utility.o variables.o
+pm_sensitivity_analysis.o : input_aux.o option.o pflotran_constants.o pm_base.o \
+                            realization_subsurface.o string.o utility.o \
+                            sensitivity_aux.o output_sensitivity.o
 pm_subsurface_flow.o : characteristic_curves.o characteristic_curves_wipp.o \
                        checkpoint.o communicator_base.o \
                        communicator_structured.o communicator_unstructured.o \
@@ -839,8 +844,9 @@ richards.o : connection.o coupler.o debug.o discretization.o field.o \
              material.o material_aux.o matrix_buffer.o option.o output_aux.o \
              patch.o pflotran_constants.o realization_base.o \
              realization_subsurface.o region.o richards_aux.o \
-             richards_common.o srcsink_sandbox.o srcsink_sandbox_base.o \
-             srcsink_sandbox_downreg.o utility.o variables.o
+             richards_common.o srcsink_sandbox.o \
+             srcsink_sandbox_base.o srcsink_sandbox_downreg.o \
+             utility.o variables.o
 richards_aux.o : characteristic_curves.o characteristic_curves_common.o \
                  eos_water.o global_aux.o material_aux.o matrix_buffer.o \
                  matrix_zeroing.o option.o pflotran_constants.o utility.o
@@ -859,6 +865,12 @@ secondary_continuum.o : block_solve.o block_tridiag.o condition.o coupler.o \
                         utility.o variables.o
 secondary_continuum_aux.o : option.o pflotran_constants.o \
                             reactive_transport_aux.o utility.o
+sensitivity_richards.o : characteristic_curves.o connection.o eos_water.o \
+                         global_aux.o grid.o material_aux.o option.o patch.o \
+                         pflotran_constants.o realization_subsurface.o \
+                         sensitivity_aux.o richards.o richards_aux.o \
+                         richards_common.o utility.o 
+sensitivity_aux.o : pflotran_constants.o
 shape_function.o : gauss.o grid_unstructured_cell.o pflotran_constants.o
 simulation_aux.o : option.o pflotran_constants.o
 simulation_base.o : driver.o option.o output.o output_aux.o \
diff --git a/src/pflotran/pflotran_object_files.txt b/src/pflotran/pflotran_object_files.txt
index dc1b47c62..2b1ef07d0 100644
--- a/src/pflotran/pflotran_object_files.txt
+++ b/src/pflotran/pflotran_object_files.txt
@@ -71,7 +71,9 @@ mode_process_model_obj = \
 	${common_src}pm_waste_form.o \
 	${common_src}pm_wipp_srcsink.o \
 	${common_src}pm_ufd_biosphere.o \
-	${common_src}pm_zflow.o \
+	${common_src}pm_sensitivity_analysis.o \
+	${common_src}sensitivity_aux.o \
+	${common_src}pm_zflow.o
 
 mode_obj = \
 	${common_src}general.o \
@@ -86,6 +88,7 @@ mode_obj = \
 	${common_src}pnf.o \
 	${common_src}reactive_transport.o \
 	${common_src}richards.o \
+	${common_src}sensitivity_richards.o \
 	${common_src}richards_common.o \
 	${common_src}th.o \
 	${common_src}zflow.o \
@@ -204,6 +207,7 @@ io_obj = \
 	${common_src}output_hdf5.o \
 	${common_src}output_observation.o \
 	${common_src}output_tecplot.o \
+	${common_src}output_sensitivity.o \
 	${common_src}output_vtk.o
 
 misc_obj = \
diff --git a/src/pflotran/pm_sensitivity_analysis.F90 b/src/pflotran/pm_sensitivity_analysis.F90
new file mode 100644
index 000000000..689cc7dea
--- /dev/null
+++ b/src/pflotran/pm_sensitivity_analysis.F90
@@ -0,0 +1,662 @@
+module PM_Sensitivity_Analysis_class
+
+#include "petsc/finclude/petscsys.h"
+  use petscsys
+#include "petsc/finclude/petscsnes.h"
+  use petscsnes
+  use PM_Base_class
+  use Realization_Subsurface_class
+  use PFLOTRAN_Constants_module
+  use Sensitivity_Aux_module
+
+  implicit none
+
+  private
+
+  type, public, extends(pm_base_type) :: pm_sensitivity_type
+    class(realization_subsurface_type), pointer :: realization
+    type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+    PetscBool :: sensitivity_flow !indicate to compute sensitivity for flow
+    PetscBool :: sensitivity_transport
+  contains
+    procedure, public :: SetRealization => PMSensitivitySetRealization
+    procedure, public :: Setup => PMSensitivitySetup
+    procedure, public :: ReadPMBlock => PMSensitivityReadPMBlock
+    procedure, public :: ReadSimulationOptionsBlock => &
+                                         PMSensitivitysReadSimOptionsBlock
+    procedure, public :: InitializeRun => PMSensitivityInitializeRun
+    procedure, public :: InitializeTimestep => PMSensitivityInitializeTimestep
+    procedure, public :: FinalizeTimestep => PMSensitivityFinalizeTimestep
+    procedure, public :: Solve => PMSensitivitySolve
+    !procedure, public :: Output => PMSensitivityOutput
+    procedure, public :: InputRecord => PMSensitivityInputRecord
+    procedure, public :: Destroy => PMSensitivityDestroy
+  end type pm_sensitivity_type
+
+  public :: PMSensitivityCreate
+  
+contains
+
+! *************************************************************************** !
+
+function PMSensitivityCreate()
+  !
+  ! Creates and initializes the sensitivity Richards process model.
+  !
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  
+  implicit none
+  
+  class(pm_sensitivity_type), pointer :: PMSensitivityCreate
+  
+  allocate(PMSensitivityCreate)
+  call PMBaseInit(PMSensitivityCreate)
+  nullify(PMSensitivityCreate%realization)
+  PMSensitivityCreate%name = 'sensitivity'
+  PMSensitivityCreate%header = 'SENSITIVITY ANALYSIS'
+  PMSensitivityCreate%sensitivity_flow = PETSC_FALSE
+  PMSensitivityCreate%sensitivity_transport = PETSC_FALSE
+  allocate(PMSensitivityCreate%sensitivity_output_option)
+  call SensitivityOutputOptionInit( &
+                         PMSensitivityCreate%sensitivity_output_option)
+  
+end function PMSensitivityCreate
+
+! *************************************************************************** !
+
+subroutine PMSensitivitySetRealization(this,realization)
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+
+  use Realization_Subsurface_class
+
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  class(realization_subsurface_type), pointer :: realization
+  
+  this%realization => realization
+  this%realization_base => realization
+
+end subroutine PMSensitivitySetRealization
+
+! *************************************************************************** !
+
+subroutine PMSensitivitysReadSimOptionsBlock(this,input)
+  ! 
+  ! Reads input file parameters associated with the Richards process model
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/12/2021
+
+  use Input_Aux_module
+  use String_module
+  use Option_module
+  use Sensitivity_Aux_module
+ 
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  type(input_type), pointer :: input
+  
+  character(len=MAXWORDLENGTH) :: word
+  character(len=MAXSTRINGLENGTH) :: error_string
+  type(option_type), pointer :: option
+  PetscBool :: found
+  PetscReal :: tempreal
+
+  option => this%option
+  error_string = 'Sensitivity Analysis Options'
+  input%ierr = 0
+  word = ''
+  
+  call InputPushBlock(input,option)
+  do
+    call InputReadPflotranString(input,option)
+    if (InputCheckExit(input,option)) exit
+    call InputReadCard(input,option,word,PETSC_FALSE)
+    call StringToUpper(word)
+    select case(word)
+      case('SENSITIVITY_FLOW')
+        this%sensitivity_flow = PETSC_TRUE
+      case('SENSITIVITY_TRANSPORT')
+        this%sensitivity_transport = PETSC_TRUE
+        option%io_buffer = 'SENSITIVITY_ANALYSIS for TRANSPORT process ' // &
+                           'not yet implemented'
+        call PrintErrMsg(option)
+      case default
+        option%io_buffer = 'Keyword ' // trim(word) // &
+              ' not recognized for the ' // trim(error_string) // ' block.'
+        call PrintErrMsg(option)
+    end select
+  enddo
+  
+  call InputPopBlock(input,option)
+  
+end subroutine PMSensitivitysReadSimOptionsBlock
+
+! *************************************************************************** !
+
+subroutine PMSensitivityReadPMBlock(this,input)
+  !
+  ! Reads input file parameters for the sensitivity flow
+  !
+  ! Author: Moise Rousseau
+  ! Date: 03/13/2017
+  !
+#if 0
+SENSTIVITITY_FLOW
+  FORMAT HDF5
+  VARIABLES
+    PRESSURE
+    PERMEABILITY
+    POROSITY
+  /
+  OUTPUT SYNC_WITH_SNAPSHOT_FILE
+END
+#endif
+  
+  use Input_Aux_module
+  use Option_module
+  use String_module
+  use Sensitivity_Aux_module
+  
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  type(input_type), pointer :: input
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  
+  type(option_type), pointer :: option
+  character(len=MAXWORDLENGTH) :: word
+  character(len=MAXSTRINGLENGTH) :: error_string
+  PetscBool :: ierr
+  
+  sensitivity_output_option => this%sensitivity_output_option
+  option => this%option
+  input%ierr = 0
+  
+  option%io_buffer = 'pflotran card:: SENSITIVITY FLOW'
+  call PrintMsg(option)
+  
+  error_string = 'sensitivity'
+  call InputPushBlock(input,option)
+  
+  do
+    call InputReadPflotranString(input,option)
+    if (InputError(input)) exit
+    if (InputCheckExit(input,option)) exit
+    
+    call InputReadCard(input,option,word)
+    call InputErrorMsg(input,option,'keyword',error_string)
+    call StringToUpper(word)
+
+    select case(trim(word))
+    !-----------------------------------------
+    !-----------------------------------------
+      case('SENSITIVITY_OUTPUT_FORMAT') !HDF5 or petsc viewer (ascii, binary)
+        call InputReadCard(input,option,word)
+        call StringToUpper(word)
+        select case(trim(word))
+          case('HDF5')
+            sensitivity_output_option%format = SENSITIVITY_OUTPUT_HDF5
+          case('MATLAB')
+            sensitivity_output_option%format = SENSITIVITY_OUTPUT_MATLAB
+            if (option%comm%mycommsize > 1) then
+              option%io_buffer = "Sensitivities output for parallel &
+                                  &simulations required HDF5 output format"
+              call PrintErrMsg(option)
+            endif
+          case('BINARY')
+            sensitivity_output_option%format = SENSITIVITY_OUTPUT_BINARY
+            if (option%comm%mycommsize > 1) then
+              option%io_buffer = "Sensitivities output for parallel &
+                                  &simulations required HDF5 output format"
+              call PrintErrMsg(option)
+            endif
+          case('ASCII')
+            sensitivity_output_option%format = SENSITIVITY_OUTPUT_ASCII
+            if (option%comm%mycommsize > 1) then
+              option%io_buffer = "Sensitivities output for parallel &
+                                  &simulations required HDF5 output format"
+              call PrintErrMsg(option)
+            endif
+          case default
+            call InputKeywordUnrecognized(input,word,'SENSITIVITY_FLOW,&
+                                          &FORMAT',option)
+        end select
+    !-----------------------------------------
+      case('HDF5_COMPRESSION_LEVEL')
+        call InputReadInt(input,option,&
+                          sensitivity_output_option%hdf5_compress)
+    !-----------------------------------------
+      case('VARIABLES')
+        call PMSensitivityReadOutputVariables(this, &
+                                              sensitivity_output_option,input)
+    !-----------------------------------------
+      case('OUTPUT')
+        call PMSensitivityReadOutputTimes(this, &
+                                              sensitivity_output_option,input)
+    !-----------------------------------------
+      case default
+        call InputKeywordUnrecognized(input,word,'SENSITIVITY_FLOW',option)
+    !-----------------------------------------
+    end select  
+  enddo
+  call InputPopBlock(input,option)
+  
+end subroutine PMSensitivityReadPMBlock
+
+! *************************************************************************** !
+
+subroutine PMSensitivityReadOutputVariables(this, &
+                                            sensitivity_output_option,input)
+  !
+  ! Sets up the process model with external information.
+  !
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+
+  use Input_Aux_module
+  use Option_module
+  use String_module
+  use Sensitivity_Aux_module
+  
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  type(input_type), pointer :: input
+  
+  type(option_type), pointer :: option
+  character(len=MAXWORDLENGTH) :: word
+  type(sensitivity_output_variable_type), pointer :: variable
+  
+  option => this%option
+  
+  call InputPushBlock(input,option)
+  do
+    call InputReadPflotranString(input,option)
+    if (InputError(input)) exit
+    if (InputCheckExit(input,option)) exit
+    call InputReadCard(input,option,word)
+    call InputErrorMsg(input,option,'keyword', &
+                       'sensitivity, VARIABLES')
+    call StringToUpper(word)
+    
+    select case(trim(word))
+      case('PRESSURE')
+        variable => SensitivityOutputVariableCreate()
+        variable%name = 'Pressure'
+        variable%units = ''
+        variable%ivar = SENSITIVITY_PRESSURE
+      case('PERMEABILITY')
+        variable => SensitivityOutputVariableCreate()
+        variable%name = 'Permeability'
+        variable%units = ''
+        variable%ivar = SENSITIVITY_PERMEABILITY
+      case('POROSITY')
+        variable => SensitivityOutputVariableCreate()
+        variable%name = 'Porosity'
+        variable%units = ''
+        variable%ivar = SENSITIVITY_POROSITY
+      case default
+        call InputKeywordUnrecognized(input,word, &
+                                      'SENSITIVITY_FLOW, VARIABLES', &
+                                      option)
+    end select
+    call SensitivityAddOutputVariableToList(sensitivity_output_option, &
+                                            variable)
+  end do
+  
+  call InputPopBlock(input,option)
+  
+end subroutine PMSensitivityReadOutputVariables
+
+! *************************************************************************** !
+
+subroutine PMSensitivityReadOutputTimes(this,sensitivity_output_option, &
+                                            input)
+
+  use Input_Aux_module
+  use Option_module
+  use String_module
+  use Sensitivity_Aux_module
+  
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  type(input_type), pointer :: input
+  
+  type(option_type), pointer :: option
+  character(len=MAXWORDLENGTH) :: word
+  type(sensitivity_output_variable_type), pointer :: variable
+  
+  option => this%option
+  
+  call InputPushBlock(input,option)
+  do
+    call InputReadPflotranString(input,option)
+    if (InputError(input)) exit
+    if (InputCheckExit(input,option)) exit
+    call InputReadCard(input,option,word)
+    call InputErrorMsg(input,option,'keyword', &
+                       'sensitivity, VARIABLES')
+    call StringToUpper(word)
+    select case(trim(word))
+!      case('SYNC_WITH_SNAPSHOT_FILE')
+!        sensitivity_output_option%output_time_option = &
+!                                            SENSITIVITY_SYNC_OUTPUT
+      case('PERIODIC_TIMESTEP')
+        call InputReadInt(input,option,&
+                          sensitivity_output_option%output_every_timestep)
+      case('PRINT_FINAL_TIMESTEP')
+        sensitivity_output_option%print_last_timestep = PETSC_TRUE
+      case default
+        call InputKeywordUnrecognized(input,word,'SENSITIVITY_FLOW,&
+                                      &OUTPUT_TIME',option)
+    end select
+  end do
+  call InputPopBlock(input,option)
+
+end subroutine PMSensitivityReadOutputTimes
+
+! *************************************************************************** !
+
+subroutine PMSensitivitySetup(this)
+  !
+  ! Sets up the process model with external information.
+  ! i.e. check if the correct flow mode is selected
+  !
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  
+  use Option_module
+
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  type(option_type), pointer :: option
+  
+  option => this%option
+  
+  select case(option%iflowmode)
+    case(RICHARDS_MODE)
+    case default
+      option%io_buffer = "Flow mode not supported for carrying a Sensitivity &
+                          &Analysis."
+      call PrintErrMsg(option)
+  end select
+  
+end subroutine PMSensitivitySetup
+
+! *************************************************************************** !
+
+subroutine PMSensitivityInitializeRun(this)
+  ! 
+  ! Initializes the process model for the simulation.
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  
+  implicit none
+
+  class(pm_sensitivity_type) :: this
+  
+  PetscErrorCode :: ierr
+  
+  ierr = 0
+  
+  ! create the J matrix ?
+  ! create the output and the ij structure ?
+  
+end subroutine PMSensitivityInitializeRun
+
+! *************************************************************************** !
+
+subroutine PMSensitivityInitializeTimestep(this)
+  ! 
+  ! Initializes the process model to take a time step in the simulation.
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  
+  implicit none
+
+  class(pm_sensitivity_type) :: this
+  
+  !call PMBasePrintHeader(this)
+  
+  !if (this%option%time >= this%output_start_time) then
+  !  call PMUFDBOutput(this)
+  !endif
+
+  
+end subroutine PMSensitivityInitializeTimestep
+
+! *************************************************************************** !
+
+ subroutine PMSensitivitySolve(this,time,ierr)
+  ! 
+  ! Just determine and update the output flag
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  
+  use Option_module
+  use Sensitivity_Output_module
+  use Sensitivity_Aux_module
+  
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  PetscReal :: time
+  PetscErrorCode :: ierr
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  PetscBool :: plot_flag
+  
+  sensitivity_output_option => this%sensitivity_output_option
+  
+  !update time for future calling of output
+  sensitivity_output_option%time = time
+  sensitivity_output_option%steps = sensitivity_output_option%steps + 1
+  
+  call SensitivityOutputOptionIsTimeToOutput(sensitivity_output_option, &
+                                             plot_flag)
+  if (plot_flag) call PMSensitivityOutput(this)
+  
+  ierr = 0
+
+end subroutine PMSensitivitySolve
+
+! ************************************************************************** !
+
+subroutine PMSensitivityFinalizeTimestep(this)
+  ! 
+  ! Author: Jenn Frederick
+  ! Date: 03/13/2017
+
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  
+end subroutine PMSensitivityFinalizeTimestep
+
+! *************************************************************************** !
+
+subroutine PMSensitivityOutput(this)
+  ! 
+  ! Sets up output for the process model.
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  !
+  
+  use Option_module
+  use Output_Aux_module
+  use Discretization_module
+  use Sensitivity_Richards_module
+  !use Sensitivity_TH_module
+  !use Sensitivity_Transport_module
+  use Sensitivity_Output_module
+  use Grid_module
+  
+  implicit none
+
+  class(pm_sensitivity_type) :: this
+  
+  type(option_type), pointer :: option
+  type(output_option_type), pointer :: output_option
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  type(sensitivity_output_variable_type), pointer :: output_variable
+  type(grid_type), pointer :: grid
+  Mat :: J
+  MatType :: J_mat_type
+  PetscErrorCode :: ierr
+  character(len=MAXWORDLENGTH) :: word
+  
+  output_option => this%realization%output_option
+  sensitivity_output_option => this%sensitivity_output_option
+  option => this%realization%option
+  grid => this%realization%discretization%grid
+  
+    
+  !prepare J matrix
+  J_mat_type = MATBAIJ
+  call DiscretizationCreateMatrix(this%realization%discretization, &
+                                    option%nflowdof, J_mat_type, J, option)
+  call MatSetOptionsPrefix(J,"Sensitivity_",ierr);CHKERRQ(ierr)
+  
+  output_variable => sensitivity_output_option%output_variables%first
+  do 
+    
+    if (.not.associated(output_variable)) exit
+    if (this%sensitivity_flow) then
+      ! compute sensitivity using finite difference
+      option%io_buffer = trim(this%header) //": Compute " // &
+                   trim(output_variable%name) // " Flow &
+                   &Sensitivity Matrix"
+      call PrintMsg(option)
+      
+      call MatZeroEntries(J,ierr);CHKERRQ(ierr)
+      select case(option%iflowmode)
+        case(RICHARDS_MODE)
+          call RichardsSensitivity(J,this%realization,output_variable%ivar)
+        !case(TH)
+        !  call THSensitivity()
+        case default
+      end select
+      call MatAssemblyBegin(J,MAT_FINAL_ASSEMBLY,ierr);CHKERRQ(ierr)
+      call MatAssemblyEnd(J,MAT_FINAL_ASSEMBLY,ierr);CHKERRQ(ierr)
+      
+      !output it
+      word = "flow"
+      call OutputSensitivity(J,grid,option,output_option, &
+                       sensitivity_output_option, &
+                       output_variable, word)
+    endif
+    
+    if (this%sensitivity_transport) then
+      ! TODO (moise)
+      option%io_buffer = trim(this%header) //": Compute " // &
+                   trim(output_variable%name) // " Transport &&
+                   Sensitivity Matrix"
+      call PrintMsg(option)
+    endif
+    
+    output_variable => output_variable%next
+    if (.not.associated(output_variable)) exit
+  enddo
+  
+  call MatDestroy(J,ierr);CHKERRQ(ierr)
+  option%io_buffer = "END " // trim(this%header) // achar(10)
+  call PrintMsg(option)
+  
+  sensitivity_output_option%plot_number = &
+           sensitivity_output_option%plot_number + 1
+  
+end subroutine PMSensitivityOutput
+
+! *************************************************************************** !
+
+subroutine PMSensitivityInputRecord(this)
+  ! 
+  ! Writes ingested information to the input record file.
+  ! 
+  ! Author: Jenn Frederick
+  ! Date: 03/13/2017
+  ! 
+  
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+
+  PetscInt :: id
+
+  id = INPUT_RECORD_UNIT
+  
+  write(id,'(a29)',advance='no') 'pm: '
+  write(id,'(a)') this%name
+
+  
+end subroutine PMSensitivityInputRecord
+
+! *************************************************************************** !
+
+subroutine PMSensitivityStrip(this)
+  ! 
+  ! Strips the Sensitivity process model.
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/12/2021
+  !
+  
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  
+  call PMBaseDestroy(this)
+  nullify(this%realization)
+  call SensitivityOutputOptionDestroy(this%sensitivity_output_option)
+  nullify(this%sensitivity_output_option)
+
+end subroutine PMSensitivityStrip
+
+! ************************************************************************** !
+
+subroutine PMSensitivityDestroy(this)
+  ! 
+  ! Strips and destroys the UFD Biosphere process model.
+  ! 
+  ! Author: Sensitivity Richards
+  ! Date: 01/04/2021
+  !
+
+  implicit none
+  
+  class(pm_sensitivity_type) :: this
+  
+  !if we destroy, that mean we reach the last timestep, therefore:
+  !if (this%sensitivity_output_option%print_last_timestep) &
+  !  call PMSensitivityOutput(this)
+  !that's ugly, but it's the only way i found...
+  
+  call PMSensitivityStrip(this)
+  
+end subroutine PMSensitivityDestroy
+
+! ************************************************************************** !
+
+end module PM_Sensitivity_Analysis_class
diff --git a/src/pflotran/regression.F90 b/src/pflotran/regression.F90
index b7cec6dc3..fb2f74234 100644
--- a/src/pflotran/regression.F90
+++ b/src/pflotran/regression.F90
@@ -62,7 +62,7 @@ end function RegressionCreate
 
 ! ************************************************************************** !
 
-subroutine RegressionRead(regression,input,option)
+subroutine RegressionRead(regression,input,option,output_option)
   !
   ! Reads in contents of a regression card
   !
@@ -81,6 +81,7 @@ subroutine RegressionRead(regression,input,option)
   type(regression_type), pointer :: regression
   type(input_type), pointer :: input
   type(option_type), pointer :: option
+  type(output_option_type), pointer :: output_option
 
   character(len=MAXWORDLENGTH) :: keyword, word
   type(output_variable_type), pointer :: cur_variable, new_variable
@@ -108,7 +109,8 @@ subroutine RegressionRead(regression,input,option)
         if (.not.associated(regression%variable_list)) then
           regression%variable_list => OutputVariableListCreate()
         endif
-        call OutputVariableRead(input,option,regression%variable_list)
+        call OutputVariableRead(input,option,output_option, &
+                                regression%variable_list)
       case('CELLS')
         call InputKeywordDeprecated('CELLS','CELL_IDS',option)
       case('CELL_IDS')
diff --git a/src/pflotran/richards.F90 b/src/pflotran/richards.F90
index 1f8575b51..277a5f4ff 100644
--- a/src/pflotran/richards.F90
+++ b/src/pflotran/richards.F90
@@ -43,9 +43,11 @@ module Richards_module
          RichardsDestroy, &
          RichardsResidualInternalConn, &
          RichardsResidualBoundaryConn, &
+         RichardsResidualAccumulation, &
          RichardsResidualSourceSink, &
          RichardsJacobianInternalConn, &
          RichardsJacobianBoundaryConn, &
+         RichardsJacobianAccumulation, &
          RichardsJacobianSourceSink
 
 contains
diff --git a/src/pflotran/sensitivity_aux.F90 b/src/pflotran/sensitivity_aux.F90
new file mode 100644
index 000000000..bbd1a6bac
--- /dev/null
+++ b/src/pflotran/sensitivity_aux.F90
@@ -0,0 +1,252 @@
+module Sensitivity_Aux_module
+
+#include "petsc/finclude/petscsys.h"
+  use petscsys
+  use PFLOTRAN_Constants_module
+  
+  implicit none
+
+  private
+  
+  !Output format
+  PetscInt, parameter, public :: SENSITIVITY_OUTPUT_HDF5          = 0
+  PetscInt, parameter, public :: SENSITIVITY_OUTPUT_MATLAB        = 1
+  PetscInt, parameter, public :: SENSITIVITY_OUTPUT_BINARY        = 2
+  PetscInt, parameter, public :: SENSITIVITY_OUTPUT_ASCII         = 3
+  
+  !output variable
+  PetscInt, parameter, public :: SENSITIVITY_PRESSURE             = 0
+  PetscInt, parameter, public :: SENSITIVITY_PERMEABILITY         = 1
+  PetscInt, parameter, public :: SENSITIVITY_POROSITY             = 2
+  
+  !Output times
+  PetscInt, parameter, public :: SENSITIVITY_SYNC_OUTPUT          = 0
+  PetscInt, parameter, public :: SENSITIVITY_EVERY_X_TIMESTEP     = 1
+  PetscInt, parameter, public :: SENSITIVITY_LAST                 = 2
+  
+  !Miscenalleous
+  PetscInt, parameter, public :: SENSITIVITY_MAX_FACE_PER_CELL_OUTPUT = 60
+  
+  
+  type, public :: sensitivity_output_variable_type
+    character(len=MAXWORDLENGTH) :: name   ! string that appears in hdf5 file
+    character(len=MAXWORDLENGTH) :: units
+    PetscInt :: ivar
+    type(sensitivity_output_variable_type), pointer :: next
+  end type sensitivity_output_variable_type
+  
+  type, public :: sensitivity_output_variable_list_type
+    type(sensitivity_output_variable_type), pointer :: first
+    type(sensitivity_output_variable_type), pointer :: last
+    !type(sensitivity_output_variable_type), pointer :: array(:)
+    PetscInt :: nvars
+  end type sensitivity_output_variable_list_type
+  
+  type, public :: sensitivity_output_option_type
+    PetscInt :: plot_number
+    PetscBool :: first_plot_flag
+    PetscInt :: format !hdf5, binary, matlab
+    PetscBool :: print_last_timestep 
+    PetscInt :: output_every_timestep !when x timestep option
+    PetscInt :: timestep_per_hdf5_file !x timestep per output file
+    PetscReal :: time !simulation time
+    PetscInt :: steps !simulation steps
+    PetscInt :: hdf5_compress !compression level for hdf5 output (0-9)
+    type(sensitivity_output_variable_list_type), pointer :: output_variables
+  end type sensitivity_output_option_type
+  
+  public :: SensitivityOutputVariableCreate, &
+            SensitivityOutputOptionInit, &
+            SensitivityOutputOptionIsTimeToOutput, &
+            SensitivityAddOutputVariableToList, &
+            SensitivityOutputOptionDestroy
+
+contains
+
+! ************************************************************************** !
+
+function  SensitivityOutputVariableCreate()
+  ! 
+  ! Create an sensitivity output variable
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/12/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_variable_type), pointer :: &
+                                    SensitivityOutputVariableCreate
+  type(sensitivity_output_variable_type), pointer :: variable
+  
+  allocate(variable)
+  variable%name = ""
+  variable%units = ""
+  variable%ivar = UNINITIALIZED_INTEGER
+  nullify(variable%next)
+  
+  SensitivityOutputVariableCreate => variable
+  
+end function SensitivityOutputVariableCreate
+
+! ************************************************************************** !
+
+subroutine SensitivityOutputOptionInit(sensitivity_output_option)
+  ! 
+  ! Initialize an output sensitivity option instance
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  sensitivity_output_option%time = 0.d0
+  sensitivity_output_option%steps = 0
+  sensitivity_output_option%hdf5_compress = 0 !no compression
+  
+  sensitivity_output_option%plot_number = 0
+  sensitivity_output_option%first_plot_flag = PETSC_TRUE
+  sensitivity_output_option%format = SENSITIVITY_OUTPUT_HDF5
+  sensitivity_output_option%print_last_timestep = PETSC_FALSE
+  sensitivity_output_option%output_every_timestep = -1
+  sensitivity_output_option%timestep_per_hdf5_file = 0 !no limit
+  
+  allocate(sensitivity_output_option%output_variables)
+  call SensitivityOutputVaraibleListInit( &
+                                 sensitivity_output_option%output_variables)
+  
+end subroutine SensitivityOutputOptionInit
+
+! ************************************************************************** !
+
+subroutine SensitivityOutputVaraibleListInit(list)
+  ! 
+  ! Initialize an output sensitivity option output variable list
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_variable_list_type), pointer :: list
+  
+  nullify(list%first)
+  nullify(list%last)
+  !nullify(list%array)
+  list%nvars = 0 
+  
+end subroutine SensitivityOutputVaraibleListInit
+
+! ************************************************************************** !
+
+subroutine SensitivityAddOutputVariableToList(sensitivity_output_option, &
+                                              new_variable)
+  ! 
+  ! Add an output sensitivity variable to the output variable list
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  type(sensitivity_output_variable_type), pointer :: new_variable
+  nullify(new_variable%next)
+  
+  if (.not. associated(sensitivity_output_option%output_variables%first)) then
+    sensitivity_output_option%output_variables%first => new_variable
+  else
+    sensitivity_output_option%output_variables%last%next => new_variable
+  endif
+  sensitivity_output_option%output_variables%last => new_variable
+  
+  sensitivity_output_option%output_variables%nvars = &
+                           sensitivity_output_option%output_variables%nvars+1
+  
+end subroutine SensitivityAddOutputVariableToList
+
+! ************************************************************************** !
+
+subroutine SensitivityOutputOptionIsTimeToOutput(sensitivity_output_option, &
+                                                 plot_flag)
+  ! 
+  ! Determine if it's the time to output the sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/04/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  PetscBool, intent(out) :: plot_flag
+  
+  plot_flag = PETSC_FALSE
+  if (sensitivity_output_option%output_every_timestep > 0) then
+    if (mod(sensitivity_output_option%steps, &
+                  sensitivity_output_option%output_every_timestep) == 0) &
+          plot_flag = PETSC_TRUE
+  endif
+  
+end subroutine SensitivityOutputOptionIsTimeToOutput
+
+! ************************************************************************** !
+
+subroutine SensitivityDestroyOutputVariableList(var_list)
+  ! 
+  ! Destroy an sensitivity output variable list object
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/12/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_variable_list_type), pointer :: var_list
+  type(sensitivity_output_variable_type), pointer :: var, prev_var
+  
+  if (.not.associated(var_list)) return
+  
+  var => var_list%first
+  do 
+    if (.not.associated(var)) exit
+    prev_var => var
+    var => var%next
+    nullify(prev_var%next)
+  enddo
+  
+  var_list%nvars = 0
+  nullify(var_list%first)
+  nullify(var_list%last)
+  
+  deallocate(var_list)
+  nullify(var_list)
+
+end subroutine SensitivityDestroyOutputVariableList
+
+! ************************************************************************** !
+
+subroutine SensitivityOutputOptionDestroy(sensitivity_output_option)
+  ! 
+  ! Destroy an output sensitivity option instance
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/12/2021
+  ! 
+  
+  implicit none
+  
+  type(sensitivity_output_option_type), pointer :: sensitivity_output_option
+  
+  call SensitivityDestroyOutputVariableList( &
+                                 sensitivity_output_option%output_variables)
+  
+end subroutine SensitivityOutputOptionDestroy
+
+! ************************************************************************** !
+ 
+end module
diff --git a/src/pflotran/sensitivity_richards.F90 b/src/pflotran/sensitivity_richards.F90
new file mode 100644
index 000000000..2dcc60e3c
--- /dev/null
+++ b/src/pflotran/sensitivity_richards.F90
@@ -0,0 +1,1022 @@
+module Sensitivity_Richards_module
+
+#include "petsc/finclude/petscsys.h"
+  use petscsys
+#include "petsc/finclude/petscsnes.h"
+  use petscsnes
+  use Richards_Common_module
+  use Richards_Aux_module
+  use Global_Aux_module
+  use PFLOTRAN_Constants_module
+  use Material_Aux_class
+  use Sensitivity_Aux_module
+  
+  implicit none
+
+  private
+  
+  ! Cutoff parameters
+  PetscReal, parameter :: eps       = 1.D-8
+  PetscReal, parameter :: floweps   = 1.D-24
+  PetscReal, parameter :: perturbation_tolerance = 1.d-3
+
+  public :: RichardsSensitivity
+
+contains
+
+! ************************************************************************** !
+
+subroutine RichardsSensitivity(J,realization,ivar)
+  ! 
+  ! Main driver for computing the sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 01/12/2021
+  ! 
+  
+  use Realization_Subsurface_class
+  use Option_module
+  use Richards_module !for jacobian
+
+  implicit none
+
+  Mat, intent(inout) :: J
+  type(realization_subsurface_type) :: realization
+  PetscInt :: ivar
+  PetscErrorCode :: ierr
+  
+  if (ivar == SENSITIVITY_PRESSURE) then
+    call RichardsJacobianInternalConn(J,realization,ierr)
+    call RichardsJacobianBoundaryConn(J,realization,ierr)
+    call RichardsJacobianAccumulation(J,realization,ierr)
+    call RichardsJacobianSourceSink(J,realization,ierr)
+  else
+    call RichardsSensitivityInternalConn(J,realization,ivar,ierr)
+    call RichardsSensitivityBoundaryConn(J,realization,ivar,ierr)
+    !call RichardsSensitivitySourceSink(J,realization,ivar,ierr)
+    !update here when porosity ok
+    !call RichardsSensitivityAccumulation(J,realization,ivar,ierr)
+  endif
+
+end subroutine RichardsSensitivity
+
+! ************************************************************************** !
+
+subroutine RichardsSensitivityInternalConn(A,realization,ivar,ierr)
+  ! 
+  ! Computes the interior flux terms of the Sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+       
+  use Connection_module
+  use Realization_Subsurface_class
+  use Option_module
+  use Patch_module
+  use Grid_module
+  !use Coupler_module
+  !use Field_module
+  !use Debug_module
+  use Material_Aux_class
+  !use Region_module
+  
+  implicit none
+
+  Mat, intent(inout) :: A
+  type(realization_subsurface_type) :: realization
+  PetscInt :: ivar
+  PetscErrorCode :: ierr
+
+  PetscInt :: icc_up,icc_dn
+  PetscInt :: local_id_up, local_id_dn
+  PetscInt :: ghosted_id_up, ghosted_id_dn
+  !PetscInt :: region_id_up, region_id_dn
+  PetscInt :: istart_up, istart_dn, istart
+
+  PetscReal :: Jup(realization%option%nflowdof,realization%option%nflowdof), &
+               Jdn(realization%option%nflowdof,realization%option%nflowdof)
+  PetscReal :: unit_z(3) = [0.d0,0.d0,1.d0]
+
+!  type(coupler_type), pointer :: boundary_condition, source_sink
+  type(connection_set_list_type), pointer :: connection_set_list
+  type(connection_set_type), pointer :: cur_connection_set
+  PetscInt :: iconn
+  PetscInt :: sum_connection
+  type(grid_type), pointer :: grid
+  type(patch_type), pointer :: patch
+  type(option_type), pointer :: option
+  !type(field_type), pointer :: field
+  !type(region_type), pointer :: region
+  !type(material_parameter_type), pointer :: material_parameter
+  type(richards_auxvar_type), pointer :: rich_auxvars(:)
+  type(global_auxvar_type), pointer :: global_auxvars(:)
+  class(material_auxvar_type), pointer :: material_auxvars(:)
+  
+  character(len=MAXSTRINGLENGTH) :: string
+  
+  patch => realization%patch
+  grid => patch%grid
+  option => realization%option
+  !field => realization%field
+  !material_parameter => patch%aux%Material%material_parameter
+  rich_auxvars => patch%aux%Richards%auxvars
+  global_auxvars => patch%aux%Global%auxvars
+  material_auxvars => patch%aux%Material%auxvars
+   
+#ifdef BUFFER_MATRIX
+  if (option%use_matrix_buffer) then
+    if (associated(patch%aux%Richards%matrix_buffer)) then
+      call MatrixBufferZero(patch%aux%Richards%matrix_buffer)
+    else
+      patch%aux%Richards%matrix_buffer => MatrixBufferCreate()
+      call MatrixBufferInit(A,patch%aux%Richards%matrix_buffer,grid)
+    endif
+  endif
+#endif
+
+  ! Interior Flux Terms -----------------------------------
+  connection_set_list => grid%internal_connection_set_list
+  cur_connection_set => connection_set_list%first
+  sum_connection = 0
+  do
+    if (.not.associated(cur_connection_set)) exit
+    do iconn = 1, cur_connection_set%num_connections
+      sum_connection = sum_connection + 1
+
+      ghosted_id_up = cur_connection_set%id_up(iconn)
+      ghosted_id_dn = cur_connection_set%id_dn(iconn)
+
+      if (patch%imat(ghosted_id_up) <= 0 .or. &
+          patch%imat(ghosted_id_dn) <= 0) cycle
+
+      if (option%flow%only_vertical_flow) then
+        !geh: place second conditional within first to avoid excessive
+        !     dot products when .not. option%flow%only_vertical_flow
+        if (abs(dot_product(cur_connection_set%dist(1:3,iconn),unit_z)) < &
+            0.99d0) cycle
+      endif
+
+      local_id_up = grid%nG2L(ghosted_id_up) ! = zero for ghost nodes
+      local_id_dn = grid%nG2L(ghosted_id_dn) ! Ghost to local mapping
+
+      icc_up = patch%cc_id(ghosted_id_up)
+      icc_dn = patch%cc_id(ghosted_id_dn)
+      
+      call RichardsFluxSensitivity(rich_auxvars(ghosted_id_up), &
+                 global_auxvars(ghosted_id_up), &
+                 material_auxvars(ghosted_id_up), &
+                 rich_auxvars(ghosted_id_dn), &
+                 global_auxvars(ghosted_id_dn), &
+                 material_auxvars(ghosted_id_dn), &
+                 cur_connection_set%area(iconn), &
+                 cur_connection_set%dist(-1:3,iconn),&
+                 option,&
+                 patch%characteristic_curves_array(icc_up)%ptr, &
+                 patch%characteristic_curves_array(icc_dn)%ptr, &
+                 Jup,Jdn,ivar)
+      
+      if (local_id_up > 0) then
+
+#ifdef BUFFER_MATRIX
+        if (option%use_matrix_buffer) then
+          call MatrixBufferAdd(patch%aux%Richards%matrix_buffer, &
+                               ghosted_id_up,ghosted_id_up,Jup(1,1))
+          call MatrixBufferAdd(patch%aux%Richards%matrix_buffer, &
+                               ghosted_id_up,ghosted_id_dn,Jdn(1,1))
+        else
+#endif
+          istart_up = (ghosted_id_up-1)*option%nflowdof + 1
+          istart_dn = (ghosted_id_dn-1)*option%nflowdof + 1
+
+          call MatSetValuesLocal(A,1,istart_up-1,1,istart_up-1, &
+                                        Jup,ADD_VALUES,ierr);CHKERRQ(ierr)
+          call MatSetValuesLocal(A,1,istart_up-1,1,istart_dn-1, &
+                                        Jdn,ADD_VALUES,ierr);CHKERRQ(ierr)
+#ifdef BUFFER_MATRIX
+        endif
+#endif
+      endif
+
+      if (local_id_dn > 0) then
+        Jup = -Jup
+        Jdn = -Jdn
+#ifdef BUFFER_MATRIX
+        if (option%use_matrix_buffer) then
+          call MatrixBufferAdd(patch%aux%Richards%matrix_buffer, &
+                               ghosted_id_dn,ghosted_id_dn,Jdn(1,1))
+          call MatrixBufferAdd(patch%aux%Richards%matrix_buffer, &
+                               ghosted_id_dn,ghosted_id_up,Jup(1,1))
+        else
+#endif
+          istart_up = (ghosted_id_up-1)*option%nflowdof + 1
+          istart_dn = (ghosted_id_dn-1)*option%nflowdof + 1
+
+          call MatSetValuesLocal(A,1,istart_dn-1,1,istart_dn-1, &
+                                        Jdn,ADD_VALUES,ierr);CHKERRQ(ierr)
+          call MatSetValuesLocal(A,1,istart_dn-1,1,istart_up-1, &
+                                        Jup,ADD_VALUES,ierr);CHKERRQ(ierr)
+#ifdef BUFFER_MATRIX
+        endif
+#endif
+      endif
+    enddo
+    cur_connection_set => cur_connection_set%next
+  enddo
+
+end subroutine RichardsSensitivityInternalConn
+
+! ************************************************************************** !
+
+subroutine RichardsFluxSensitivity(rich_auxvar_up,global_auxvar_up, &
+                                  material_auxvar_up, & 
+                                  rich_auxvar_dn,global_auxvar_dn, &
+                                  material_auxvar_dn, &
+                                  area, dist, &
+                                  option, &
+                                  characteristic_curves_up, &
+                                  characteristic_curves_dn, &
+                                  Jup,Jdn, ivar)
+  ! 
+  ! Computes the Sensitivity of the internal flux terms
+  ! For K or poro, just change the value in the numerical derivative with a 
+  ! select statement
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+  use Option_module 
+  use Characteristic_Curves_module
+  use Material_Aux_class
+  use Connection_module
+  
+  implicit none
+  
+  type(richards_auxvar_type) :: rich_auxvar_up, rich_auxvar_dn
+  type(global_auxvar_type) :: global_auxvar_up, global_auxvar_dn
+  class(material_auxvar_type) :: material_auxvar_up, material_auxvar_dn
+  type(option_type) :: option
+  PetscReal :: v_darcy, area, dist(-1:3)
+  type(characteristic_curves_type) :: characteristic_curves_up
+  type(characteristic_curves_type) :: characteristic_curves_dn
+  PetscReal :: Jup(option%nflowdof,option%nflowdof)
+  PetscReal :: Jdn(option%nflowdof,option%nflowdof)
+  PetscInt :: ivar
+
+  PetscInt :: ideriv
+  type(richards_auxvar_type) :: rich_auxvar_pert_up, rich_auxvar_pert_dn
+  type(global_auxvar_type) :: global_auxvar_pert_up, global_auxvar_pert_dn
+  ! leave as type
+  type(material_auxvar_type) :: material_auxvar_pert_up, material_auxvar_pert_dn
+  !PetscReal :: x_up(1), x_dn(1), x_pert_up(1), x_pert_dn(1), pert_up, pert_dn, &
+  !          res(1), res_pert_up(1), res_pert_dn(1), J_pert_up(1,1), J_pert_dn(1,1)
+  PetscReal :: pres_up(1), pres_dn(1), res(1), res_pert_up(1), res_pert_dn(1), &
+               J_pert_up(1,1), J_pert_dn(1,1), x_up, x_dn, pert_up, pert_dn
+               
+  PetscInt :: iperm
+  
+  v_darcy = 0.D0  
+
+  call GlobalAuxVarInit(global_auxvar_pert_up,option)
+  call GlobalAuxVarInit(global_auxvar_pert_dn,option)  
+  call MaterialAuxVarInit(material_auxvar_pert_up,option)
+  call MaterialAuxVarInit(material_auxvar_pert_dn,option)  
+  call RichardsAuxVarCopy(rich_auxvar_up,rich_auxvar_pert_up,option)
+  call RichardsAuxVarCopy(rich_auxvar_dn,rich_auxvar_pert_dn,option)
+  call GlobalAuxVarCopy(global_auxvar_up,global_auxvar_pert_up,option)
+  call GlobalAuxVarCopy(global_auxvar_dn,global_auxvar_pert_dn,option)
+  call MaterialAuxVarCopy(material_auxvar_up,material_auxvar_pert_up,option)
+  call MaterialAuxVarCopy(material_auxvar_dn,material_auxvar_pert_dn,option)
+  pres_up(1) = global_auxvar_up%pres(1)
+  pres_dn(1) = global_auxvar_dn%pres(1)
+  call RichardsFlux(rich_auxvar_up,global_auxvar_up,material_auxvar_up, &
+                    rich_auxvar_dn,global_auxvar_dn,material_auxvar_dn, &
+                    area, dist, &
+                    option,v_darcy,res)
+  ideriv = 1
+  
+  !modify ivar
+  select case (ivar)
+    case (SENSITIVITY_PERMEABILITY)
+      call PerturbatePermeability(material_auxvar_up, &
+                                  material_auxvar_pert_up, &
+                                  pert_up, option)
+      call PerturbatePermeability(material_auxvar_dn, &
+                                  material_auxvar_pert_dn, &
+                                  pert_dn, option)
+    case (SENSITIVITY_POROSITY)
+      ! TODO: add check for porosity update
+      x_up = material_auxvar_up%porosity
+      pert_up = perturbation_tolerance*x_up
+      material_auxvar_pert_up%porosity = x_up + pert_up
+      x_dn = material_auxvar_dn%porosity
+      pert_dn = perturbation_tolerance*x_dn
+      material_auxvar_pert_dn%porosity = x_dn + pert_dn
+    case default
+      ! TODO
+  end select
+  
+  call RichardsAuxVarCompute(pres_up(1),rich_auxvar_pert_up, &
+                             global_auxvar_pert_up, &
+                             material_auxvar_pert_up, &
+                             characteristic_curves_up, &
+                             -999, &
+                             PETSC_TRUE,option)
+  call RichardsAuxVarCompute(pres_dn(1),rich_auxvar_pert_dn, &
+                             global_auxvar_pert_dn, &
+                             material_auxvar_pert_dn, &
+                             characteristic_curves_dn, &
+                             -999, &
+                             PETSC_TRUE,option)
+  call RichardsFlux(rich_auxvar_pert_up,global_auxvar_pert_up, &
+                    material_auxvar_pert_up, &
+                    rich_auxvar_dn,global_auxvar_dn, &
+                    material_auxvar_dn, &
+                    area, dist, &
+                    option,v_darcy,res_pert_up)
+  call RichardsFlux(rich_auxvar_up,global_auxvar_up, &
+                    material_auxvar_up, &
+                    rich_auxvar_pert_dn,global_auxvar_pert_dn, &
+                    material_auxvar_pert_dn, &
+                    area, dist, &
+                    option,v_darcy,res_pert_dn)
+  
+  J_pert_up(1,ideriv) = (res_pert_up(1)-res(1))/pert_up
+  J_pert_dn(1,ideriv) = (res_pert_dn(1)-res(1))/pert_dn
+  Jup = J_pert_up
+  Jdn = J_pert_dn
+  call GlobalAuxVarStrip(global_auxvar_pert_up)
+  call GlobalAuxVarStrip(global_auxvar_pert_dn)    
+  call MaterialAuxVarStrip(material_auxvar_pert_up)
+  call MaterialAuxVarStrip(material_auxvar_pert_dn)    
+
+end subroutine RichardsFluxSensitivity
+
+! ************************************************************************** !
+
+subroutine RichardsSensitivityBoundaryConn(A,realization,ivar,ierr)
+  ! 
+  ! Computes the boundary flux terms of the Sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+
+  use Connection_module
+  use Realization_Subsurface_class
+  use Option_module
+  use Patch_module
+  use Grid_module
+  use Coupler_module
+  use Field_module
+  !use Debug_module
+  use Material_Aux_class
+  use Region_module
+  
+  implicit none
+
+  Mat, intent(inout) :: A
+  type(realization_subsurface_type) :: realization
+  PetscInt :: ivar
+  PetscErrorCode :: ierr
+
+  PetscInt :: icc_up,icc_dn
+  PetscInt :: local_id, ghosted_id
+  PetscInt :: local_id_up, local_id_dn, region_id, i
+  PetscInt :: ghosted_id_up, ghosted_id_dn
+  PetscInt :: istart_up, istart_dn, istart
+  
+  PetscReal :: Jup(realization%option%nflowdof,realization%option%nflowdof), &
+               Jdn(realization%option%nflowdof,realization%option%nflowdof)
+  
+  type(coupler_type), pointer :: boundary_condition, source_sink
+  type(connection_set_list_type), pointer :: connection_set_list
+  type(connection_set_type), pointer :: cur_connection_set
+  PetscInt :: iconn
+  PetscInt :: sum_connection  
+  type(grid_type), pointer :: grid
+  type(patch_type), pointer :: patch
+  type(option_type), pointer :: option 
+  type(field_type), pointer :: field 
+  type(region_type), pointer :: region
+  type(material_parameter_type), pointer :: material_parameter
+  type(richards_auxvar_type), pointer :: rich_auxvars(:), rich_auxvars_bc(:) 
+  type(global_auxvar_type), pointer :: global_auxvars(:), global_auxvars_bc(:)
+  class(material_auxvar_type), pointer :: material_auxvars(:)
+  
+  character(len=MAXSTRINGLENGTH) :: string
+
+  patch => realization%patch
+  grid => patch%grid
+  option => realization%option
+  field => realization%field
+  material_parameter => patch%aux%Material%material_parameter
+  rich_auxvars => patch%aux%Richards%auxvars
+  rich_auxvars_bc => patch%aux%Richards%auxvars_bc
+  global_auxvars => patch%aux%Global%auxvars
+  global_auxvars_bc => patch%aux%Global%auxvars_bc
+  material_auxvars => patch%aux%Material%auxvars
+  
+  ! Boundary Flux Terms -----------------------------------
+  boundary_condition => patch%boundary_condition_list%first
+  sum_connection = 0    
+  do 
+    if (.not.associated(boundary_condition)) exit
+    
+    cur_connection_set => boundary_condition%connection_set
+    
+    do iconn = 1, cur_connection_set%num_connections
+      sum_connection = sum_connection + 1
+    
+      local_id = cur_connection_set%id_dn(iconn)
+      ghosted_id = grid%nL2G(local_id)
+
+      if (patch%imat(ghosted_id) <= 0) cycle
+
+      if (ghosted_id<=0) then
+        print *, "Wrong boundary node index... STOP!!!"
+        stop
+      endif
+
+      icc_dn = patch%cc_id(ghosted_id) 
+
+      call RichardsBCFluxSensitivity(boundary_condition%flow_condition%itype, &
+                     boundary_condition%flow_aux_real_var(:,iconn), &
+                     rich_auxvars_bc(sum_connection), &
+                     global_auxvars_bc(sum_connection), &
+                     rich_auxvars(ghosted_id), &
+                     global_auxvars(ghosted_id), &
+                     material_auxvars(ghosted_id), &
+                     cur_connection_set%area(iconn), &
+                     cur_connection_set%dist(:,iconn), &
+                     option, &
+                     patch%characteristic_curves_array(icc_dn)%ptr, &
+                     Jdn, ivar)
+      Jdn = -Jdn
+
+#ifdef BUFFER_MATRIX
+      if (option%use_matrix_buffer) then
+        call MatrixBufferAdd(patch%aux%Richards%matrix_buffer,ghosted_id, &
+                             ghosted_id,Jdn(1,1))
+      else
+#endif
+        istart = (ghosted_id-1)*option%nflowdof + 1
+
+        call MatSetValuesLocal(A,1,istart-1,1,istart-1,Jdn, &
+                               ADD_VALUES,ierr);CHKERRQ(ierr)
+#ifdef BUFFER_MATRIX
+      endif
+#endif
+ 
+    enddo
+    boundary_condition => boundary_condition%next
+  enddo
+  
+end subroutine RichardsSensitivityBoundaryConn
+
+! ************************************************************************** !
+
+subroutine RichardsBCFluxSensitivity(ibndtype,auxvars, &
+                                    rich_auxvar_up,global_auxvar_up, &
+                                    rich_auxvar_dn,global_auxvar_dn, &
+                                    material_auxvar_dn, &
+                                    area,dist,option, &
+                                    characteristic_curves_dn, &
+                                    Jdn, ivar)
+  ! 
+  ! Computes numerically the derivatives of the boundary flux
+  ! terms for the Sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+  use Option_module
+  use Characteristic_Curves_module
+  use EOS_Water_module
+  use Utility_module
+ 
+  implicit none
+  
+  PetscInt :: ibndtype(:)
+  type(richards_auxvar_type) :: rich_auxvar_up, rich_auxvar_dn
+  type(global_auxvar_type) :: global_auxvar_up, global_auxvar_dn
+  class(material_auxvar_type) :: material_auxvar_dn
+  type(option_type) :: option
+  PetscReal :: auxvars(:) ! from aux_real_var array in boundary condition
+  PetscReal :: area
+  ! dist(-1) = fraction_upwind
+  ! dist(0) = magnitude
+  ! dist(1:3) = unit vector
+  ! dist(0)*dist(1:3) = vector
+  PetscReal :: dist(-1:3)
+  type(characteristic_curves_type) :: characteristic_curves_dn
+  PetscReal :: Jdn(option%nflowdof,option%nflowdof)
+  PetscInt :: ivar
+  
+  PetscReal :: v_darcy
+  PetscInt :: pressure_bc_type
+
+  PetscInt :: iphase, ideriv
+  type(richards_auxvar_type) :: rich_auxvar_pert_dn, rich_auxvar_pert_up
+  type(global_auxvar_type) :: global_auxvar_pert_dn, global_auxvar_pert_up
+  class(material_auxvar_type), allocatable :: material_auxvar_pert_dn, &
+                                              material_auxvar_pert_up
+  PetscReal :: perturbation
+  PetscReal :: pres_dn(1), pres_up(1), x_pert_dn(1), x_pert_up(1), pert_dn, &
+               res(1), res_pert_dn(1), J_pert_dn(1,1), x_dn
+  PetscErrorCode :: ierr
+
+  v_darcy = 0.d0
+  Jdn = 0.d0 
+
+  call GlobalAuxVarInit(global_auxvar_pert_up,option)
+  call GlobalAuxVarInit(global_auxvar_pert_dn,option)  
+  allocate(material_auxvar_pert_up,material_auxvar_pert_dn)
+  call MaterialAuxVarInit(material_auxvar_pert_up,option)  
+  call MaterialAuxVarInit(material_auxvar_pert_dn,option)  
+  call RichardsAuxVarCopy(rich_auxvar_up,rich_auxvar_pert_up,option)
+  call RichardsAuxVarCopy(rich_auxvar_dn,rich_auxvar_pert_dn,option)
+  call GlobalAuxVarCopy(global_auxvar_up,global_auxvar_pert_up,option)
+  call GlobalAuxVarCopy(global_auxvar_dn,global_auxvar_pert_dn,option)
+  call MaterialAuxVarCopy(material_auxvar_dn,material_auxvar_pert_up, &
+                          option)
+  call MaterialAuxVarCopy(material_auxvar_dn,material_auxvar_pert_dn, &
+                          option)
+  
+  pres_up(1) = global_auxvar_up%pres(1)
+  pres_dn(1) = global_auxvar_dn%pres(1)
+  ideriv = 1
+  if (ibndtype(ideriv) == ZERO_GRADIENT_BC) then
+    pres_up(ideriv) = pres_dn(ideriv)
+  endif
+  call RichardsBCFlux(ibndtype,auxvars, &
+                      rich_auxvar_up,global_auxvar_up, &
+                      rich_auxvar_dn,global_auxvar_dn, &
+                      material_auxvar_dn, &
+                      area,dist,option,v_darcy,res)
+  
+  ideriv = 1
+  
+  select case(ivar)
+    case (SENSITIVITY_PERMEABILITY)
+      call PerturbatePermeability(material_auxvar_dn, & 
+                                  material_auxvar_pert_dn, &
+                                  pert_dn, option)
+    case (SENSITIVITY_POROSITY)
+    
+    case default
+    
+  end select
+  
+  call RichardsAuxVarCompute(pres_dn(1),rich_auxvar_pert_dn, &
+                             global_auxvar_pert_dn, &
+                             material_auxvar_pert_dn, &
+                             characteristic_curves_dn, &
+                             -999, &
+                             PETSC_TRUE,option)
+  call RichardsAuxVarCompute(pres_up(1),rich_auxvar_pert_up, &
+                             global_auxvar_pert_up, &
+                             material_auxvar_pert_up, &
+                             characteristic_curves_dn, &
+                             -999, &
+                             PETSC_TRUE,option)
+  call RichardsBCFlux(ibndtype,auxvars, &
+                      rich_auxvar_pert_up,global_auxvar_pert_up, &
+                      rich_auxvar_pert_dn,global_auxvar_pert_dn, &
+                      material_auxvar_pert_dn, &
+                      area,dist,option,v_darcy,res_pert_dn)
+  J_pert_dn(1,ideriv) = (res_pert_dn(1)-res(1))/pert_dn
+  Jdn = J_pert_dn
+  call GlobalAuxVarStrip(global_auxvar_pert_up)
+  call GlobalAuxVarStrip(global_auxvar_pert_dn)   
+  call MaterialAuxVarStrip(material_auxvar_pert_up)
+  call MaterialAuxVarStrip(material_auxvar_pert_dn)
+  deallocate(material_auxvar_pert_up,material_auxvar_pert_dn)
+
+end subroutine RichardsBCFluxSensitivity
+
+! ************************************************************************** !
+
+subroutine RichardsSensitivitySourceSink(A,realization,ivar,ierr)
+  ! 
+  ! Computes the accumulation and source/sink terms of
+  ! the Sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+
+  use Connection_module
+  use Realization_Subsurface_class
+  use Option_module
+  use Patch_module
+  use Grid_module
+  use Coupler_module
+  use Field_module
+  use Debug_module
+    
+  implicit none
+
+  Mat, intent(inout) :: A
+  type(realization_subsurface_type) :: realization
+  PetscInt :: ivar
+  PetscErrorCode :: ierr
+
+  PetscReal :: qsrc
+  PetscInt :: local_id, ghosted_id
+  PetscInt :: istart
+  
+  PetscReal :: Jup(realization%option%nflowdof,realization%option%nflowdof)
+  
+  type(coupler_type), pointer :: source_sink
+  type(connection_set_type), pointer :: cur_connection_set
+  PetscInt :: iconn
+  type(grid_type), pointer :: grid
+  type(patch_type), pointer :: patch
+  type(option_type), pointer :: option 
+  type(field_type), pointer :: field 
+  type(richards_auxvar_type), pointer :: rich_auxvars(:)
+  type(global_auxvar_type), pointer :: global_auxvars(:)
+  class(material_auxvar_type), pointer :: material_auxvars(:)
+  PetscInt :: flow_pc
+  PetscReal, pointer :: mmsrc(:)
+  PetscReal :: well_status
+  PetscReal :: well_factor
+  PetscReal :: pressure_bh
+  PetscReal :: pressure_max
+  PetscReal :: pressure_min
+  PetscReal :: ukvr, Dq, dphi, v_darcy
+  Vec, parameter :: null_vec = tVec(0)
+  character(len=MAXSTRINGLENGTH) :: string
+
+  patch => realization%patch
+  grid => patch%grid
+  option => realization%option
+  field => realization%field
+  rich_auxvars => patch%aux%Richards%auxvars
+  global_auxvars => patch%aux%Global%auxvars
+  material_auxvars => patch%aux%Material%auxvars
+
+  ! Source/sink terms -------------------------------------
+  source_sink => patch%source_sink_list%first 
+  do 
+    if (.not.associated(source_sink)) exit
+    
+    if (source_sink%flow_condition%itype(1)/=HET_VOL_RATE_SS.and. &
+       source_sink%flow_condition%itype(1)/=HET_MASS_RATE_SS .and. &
+       source_sink%flow_condition%itype(1)/=WELL_SS) &
+      qsrc = source_sink%flow_condition%rate%dataset%rarray(1)
+
+    cur_connection_set => source_sink%connection_set
+    
+    do iconn = 1, cur_connection_set%num_connections      
+      local_id = cur_connection_set%id_dn(iconn)
+      ghosted_id = grid%nL2G(local_id)
+
+      if (patch%imat(ghosted_id) <= 0) cycle
+      
+      Jup = 0.d0
+      select case(source_sink%flow_condition%itype(1))
+        case(MASS_RATE_SS,SCALED_MASS_RATE_SS,HET_MASS_RATE_SS)
+        case(VOLUMETRIC_RATE_SS)  ! assume local density for now
+          Jup(1,1) = -qsrc*rich_auxvars(ghosted_id)%dden_dp*FMWH2O
+        case(SCALED_VOLUMETRIC_RATE_SS)  ! assume local density for now
+          Jup(1,1) = -qsrc*rich_auxvars(ghosted_id)%dden_dp*FMWH2O* &
+            source_sink%flow_aux_real_var(ONE_INTEGER,iconn)
+        case(HET_VOL_RATE_SS)
+          Jup(1,1) = -source_sink%flow_aux_real_var(ONE_INTEGER,iconn)* &
+                    rich_auxvars(ghosted_id)%dden_dp*FMWH2O
+        case(WELL_SS) ! production well, SK 12/19/13
+          ! if node pessure is lower than the given extraction pressure, 
+          ! shut it down
+          !  well parameter explanation
+          !   1. well status. 1 injection; -1 production; 0 shut in!
+          !   2. well factor [m^3],  the effective permeability [m^2/s]
+          !   3. bottomhole pressure:  [Pa]
+          !   4. max pressure: [Pa]
+          !   5. min pressure: [Pa]
+          mmsrc => source_sink%flow_condition%well%dataset%rarray
+
+          well_status = mmsrc(1)
+          well_factor = mmsrc(2)
+          pressure_bh = mmsrc(3)
+          pressure_max = mmsrc(4)
+          pressure_min = mmsrc(5)
+    
+          ! production well (well status = -1)
+          if (dabs(well_status + 1.D0) < 1.D-1) then
+            if (global_auxvars(ghosted_id)%pres(1) > pressure_min) then
+              Dq = well_factor 
+              dphi = global_auxvars(ghosted_id)%pres(1) - pressure_bh
+              if (dphi >= 0.D0) then ! outflow only
+                ukvr = rich_auxvars(ghosted_id)%kvr
+                if (ukvr < 1.e-20) ukvr = 0.D0
+                v_darcy = 0.D0
+                if (ukvr*Dq > floweps) then
+                  v_darcy = Dq * ukvr * dphi
+                  ! store volumetric rate for ss_fluid_fluxes()
+                  Jup(1,1) = -1.d0*(-Dq*rich_auxvars(ghosted_id)%dkvr_dp*dphi* &
+                             global_auxvars(ghosted_id)%den(1) &
+                             -Dq*ukvr*1.d0*global_auxvars(ghosted_id)%den(1) &
+                             -Dq*ukvr*dphi*rich_auxvars(ghosted_id)%dden_dp)
+                endif
+              endif
+            endif
+          endif 
+      end select
+#ifdef BUFFER_MATRIX
+      if (option%use_matrix_buffer) then
+        call MatrixBufferAdd(patch%aux%Richards%matrix_buffer,ghosted_id, &
+                             ghosted_id,Jup(1,1))
+      else
+#endif
+        istart = (ghosted_id-1)*option%nflowdof + 1
+
+        call MatSetValuesLocal(A,1,istart-1,1,istart-1,Jup,ADD_VALUES, &
+                               ierr);CHKERRQ(ierr)
+#ifdef BUFFER_MATRIX
+      endif
+#endif
+    enddo
+    source_sink => source_sink%next
+  enddo
+
+  !call RichardsSSSandbox(null_vec,A,PETSC_TRUE,grid,material_auxvars, &
+  !                       global_auxvars,rich_auxvars,option)
+  
+#ifdef BUFFER_MATRIX
+  if (option%use_matrix_buffer) then
+    if (patch%aux%Richards%inactive_cells_exist) then
+      call MatrixBufferZeroRows(patch%aux%Richards%matrix_buffer, &
+                                patch%aux%Richards%matrix_zeroing% &
+                                  n_inactive_rows, &
+                                patch%aux%Richards%matrix_zeroing% &
+                                  inactive_rows_local_ghosted)
+    endif
+    call MatrixBufferSetValues(A,patch%aux%Richards%matrix_buffer)
+  endif
+#endif
+
+  call MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,ierr);CHKERRQ(ierr)
+  call MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,ierr);CHKERRQ(ierr)
+
+! zero out isothermal and inactive cells
+#ifdef BUFFER_MATRIX
+  if (.not.option%use_matrix_buffer) then
+#endif
+    if (patch%aux%Richards%inactive_cells_exist) then
+      qsrc = 1.d0 ! solely a temporary variable in this conditional
+      call MatZeroRowsLocal(A,patch%aux%Richards%matrix_zeroing% &
+                              n_inactive_rows, &
+                            patch%aux%Richards%matrix_zeroing% &
+                              inactive_rows_local_ghosted, &
+                            qsrc,PETSC_NULL_VEC,PETSC_NULL_VEC, &
+                            ierr);CHKERRQ(ierr)
+    endif
+#ifdef BUFFER_MATRIX
+  endif
+#endif
+
+end subroutine RichardsSensitivitySourceSink
+
+! ************************************************************************** !
+
+subroutine RichardsSensitivityAccumulation(A,realization,ivar,ierr)
+  ! 
+  ! Computes the accumulation terms of the Sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+
+  use Connection_module
+  use Realization_Subsurface_class
+  use Option_module
+  use Patch_module
+  use Grid_module
+  use Coupler_module
+  use Debug_module
+  use Region_module
+  
+  implicit none
+
+  Mat, intent(inout) :: A
+  type(realization_subsurface_type) :: realization
+  PetscInt :: ivar
+  PetscErrorCode :: ierr
+
+  PetscInt :: local_id, ghosted_id, region_id
+  PetscInt :: istart
+
+  PetscReal :: Jup(realization%option%nflowdof,realization%option%nflowdof)
+
+  type(grid_type), pointer :: grid
+  type(patch_type), pointer :: patch
+  type(option_type), pointer :: option
+  type(region_type), pointer :: region
+  type(richards_auxvar_type), pointer :: rich_auxvars(:)
+  type(global_auxvar_type), pointer :: global_auxvars(:)
+  class(material_auxvar_type), pointer :: material_auxvars(:)
+  !type(inlinesurface_auxvar_type), pointer :: inlinesurface_auxvars(:)
+  character(len=MAXSTRINGLENGTH) :: string
+
+  patch => realization%patch
+  grid => patch%grid
+  option => realization%option
+  rich_auxvars => patch%aux%Richards%auxvars
+  global_auxvars => patch%aux%Global%auxvars
+  material_auxvars => patch%aux%Material%auxvars
+
+  if (.not.option%flow%steady_state) then
+
+    ! Accumulation terms ------------------------------------
+    do local_id = 1, grid%nlmax  ! For each local node do...
+      ghosted_id = grid%nL2G(local_id)
+      !geh - Ignore inactive cells with inactive materials
+      if (patch%imat(ghosted_id) <= 0) cycle
+      call RichardsAccumSensitivity(rich_auxvars(ghosted_id), &
+           global_auxvars(ghosted_id), &
+           material_auxvars(ghosted_id), &
+           option, &
+           patch%characteristic_curves_array( &
+           patch%cc_id(ghosted_id))%ptr, &
+           Jup, ivar)
+    enddo
+
+#ifdef BUFFER_MATRIX
+    if (option%use_matrix_buffer) then
+      call MatrixBufferAdd(patch%aux%Richards%matrix_buffer,ghosted_id, &
+           ghosted_id,Jup(1,1))
+    else
+#endif
+      istart = (ghosted_id-1)*option%nflowdof + 1
+
+      call MatSetValuesLocal(A,1,istart-1,1,istart-1,Jup, &
+           ADD_VALUES,ierr);CHKERRQ(ierr)
+#ifdef BUFFER_MATRIX
+    endif
+#endif
+  endif
+
+#if 0
+  if (option%inline_surface_flow) then
+    do region_id = 1, region%num_cells
+      local_id = region%cell_ids(region_id)
+      ghosted_id = grid%nL2G(local_id)         
+      if (patch%imat(ghosted_id) <= 0) cycle
+      call InlineSurfaceAccumulationJac(inlinesurface_auxvars(region_id), &
+           material_auxvars(ghosted_id),option,Jup)
+      istart = (ghosted_id-1)*option%nflowdof + 1
+      call MatSetValuesLocal(A,1,istart-1,1,istart-1,Jup, &
+           ADD_VALUES,ierr);CHKERRQ(ierr)
+    enddo
+  endif
+#endif
+
+
+end subroutine RichardsSensitivityAccumulation
+
+! ************************************************************************** !
+
+subroutine RichardsAccumSensitivity(rich_auxvar,global_auxvar, &
+                                   material_auxvar, &
+                                   option, &
+                                   characteristic_curves, &
+                                   J,ivar)
+  ! 
+  ! Computes derivatives of the accumulation
+  ! term for the Sensitivity
+  ! 
+  ! Author: Moise Rousseau
+  ! Date: 09/03/2020
+  ! 
+
+  use Option_module
+  use Characteristic_Curves_module
+  use Material_Aux_class, only : material_auxvar_type, &
+                                 soil_compressibility_index, &
+                                 MaterialAuxVarInit, &
+                                 MaterialAuxVarCopy, &
+                                 MaterialAuxVarStrip, &
+                                 MaterialCompressSoil
+  
+  implicit none
+
+  type(richards_auxvar_type) :: rich_auxvar
+  type(global_auxvar_type) :: global_auxvar
+  class(material_auxvar_type) :: material_auxvar
+  type(option_type) :: option
+  type(characteristic_curves_type) :: characteristic_curves
+  PetscReal :: J(option%nflowdof,option%nflowdof)
+  PetscInt :: ivar
+     
+  PetscInt :: ispec 
+  PetscReal :: vol_over_dt
+  PetscReal :: tempreal
+  PetscReal :: derivative
+
+  PetscInt :: iphase, ideriv
+  type(richards_auxvar_type) :: rich_auxvar_pert
+  type(global_auxvar_type) :: global_auxvar_pert
+  ! leave as type
+  type(material_auxvar_type) :: material_auxvar_pert
+  PetscReal :: x(1), x_pert(1), pert, res(1), res_pert(1), J_pert(1,1)
+
+  vol_over_dt = material_auxvar%volume/option%flow_dt
+  
+  select case(ivar)
+    case (SENSITIVITY_PERMEABILITY)
+      ! TODO (moise) it's null
+    case (SENSITIVITY_POROSITY)
+      ! I may compute this analytically
+      ! accumulation term units = dkmol/dp
+      J(1,1) = (material_auxvar%dporosity_dp*global_auxvar%sat(1)* &
+                global_auxvar%den(1) + &
+                (global_auxvar%sat(1)*rich_auxvar%dden_dp + &
+                 rich_auxvar%dsat_dp*global_auxvar%den(1)) * &
+                material_auxvar%porosity) * &
+                vol_over_dt
+    case default
+    
+  end select
+  
+  if (option%flow%numerical_derivatives) then
+    call GlobalAuxVarInit(global_auxvar_pert,option)  
+    call MaterialAuxVarInit(material_auxvar_pert,option)  
+    call RichardsAuxVarCopy(rich_auxvar,rich_auxvar_pert,option)
+    call GlobalAuxVarCopy(global_auxvar,global_auxvar_pert,option)
+    call MaterialAuxVarCopy(material_auxvar,material_auxvar_pert,option)
+    x(1) = global_auxvar%pres(1)
+    call RichardsAccumulation(rich_auxvar,global_auxvar,material_auxvar, &
+                              option,res)
+    ideriv = 1
+    pert = max(dabs(x(ideriv)*perturbation_tolerance),0.1d0)
+    x_pert = x
+    if (x_pert(ideriv) < option%flow%reference_pressure) pert = -1.d0*pert
+    x_pert(ideriv) = x_pert(ideriv) + pert
+    
+    call RichardsAuxVarCompute(x_pert(1),rich_auxvar_pert,global_auxvar_pert, &
+                               material_auxvar_pert, &
+                               characteristic_curves, &
+                               -999, &
+                               PETSC_TRUE,option)
+    call RichardsAccumulation(rich_auxvar_pert,global_auxvar_pert, &
+                              material_auxvar_pert, &
+                              option,res_pert)
+    J_pert(1,1) = (res_pert(1)-res(1))/pert
+    J = J_pert
+    call GlobalAuxVarStrip(global_auxvar_pert)  
+    call MaterialAuxVarStrip(material_auxvar_pert)  
+  endif
+   
+end subroutine RichardsAccumSensitivity
+
+! ************************************************************************** !
+
+subroutine PerturbatePermeability(material_auxvar, material_auxvar_pert, &
+                                  pert, option)
+
+  ! Perturbate the permeability
+  ! 
+  ! Author: Moise Rousseau
+  ! 09/04/2020
+  ! 
+  
+  use Option_module
+
+  type(material_auxvar_type) :: material_auxvar
+  type(material_auxvar_type) :: material_auxvar_pert
+  PetscReal :: pert
+  type(option_type) :: option
+  
+  PetscReal :: x
+  PetscInt :: iperm
+  
+  !test for scalar permeability
+  if (material_auxvar%permeability(perm_xx_index) /= &
+      material_auxvar%permeability(perm_yy_index) .or. &
+      material_auxvar%permeability(perm_xx_index) /= &
+      material_auxvar%permeability(perm_zz_index) .or. &
+      option%flow%full_perm_tensor) then
+    option%io_buffer = 'Sensitivity analysis for permeability &
+                        requires scalar permeability'
+    call PrintErrMsg(option)
+  endif
+  ! update diagonal permeability
+  do iperm = perm_xx_index, perm_zz_index
+    x = material_auxvar%permeability(iperm)
+    pert = perturbation_tolerance*x
+    material_auxvar_pert%permeability(iperm) = x + pert
+  enddo
+
+end subroutine PerturbatePermeability
+
+! ************************************************************************** !
+
+subroutine SensitivityAnalysisDestroy()
+
+end subroutine SensitivityAnalysisDestroy
+
+! ************************************************************************** !
+    
+end module
diff --git a/src/pflotran/variables.F90 b/src/pflotran/variables.F90
index b3f295d5f..fc6415bc4 100644
--- a/src/pflotran/variables.F90
+++ b/src/pflotran/variables.F90
@@ -160,5 +160,18 @@ module Variables_module
   PetscInt, parameter, public :: EPSILON = 130
 
   PetscInt, parameter, public :: DARCY_VELOCITY          = 141
+  
+  PetscInt, parameter, public :: FACE_PERMEABILITY       = 144
+  PetscInt, parameter, public :: FACE_AREA               = 145
+  PetscInt, parameter, public :: FACE_NON_ORTHO_ANGLE    = 146
+  PetscInt, parameter, public :: FACE_UPWIND_FRACTION    = 147
+  PetscInt, parameter, public :: FACE_DISTANCE_BETWEEN_CENTER = 148
+  PetscInt, parameter, public :: FACE_NORMAL_X            = 149
+  PetscInt, parameter, public :: FACE_NORMAL_Y            = 150
+  PetscInt, parameter, public :: FACE_NORMAL_Z            = 151
+  PetscInt, parameter, public :: FACE_CELL_CENTER_VECTOR_X = 152
+  PetscInt, parameter, public :: FACE_CELL_CENTER_VECTOR_Y = 153
+  PetscInt, parameter, public :: FACE_CELL_CENTER_VECTOR_Z = 154
+
 
 end module Variables_module
